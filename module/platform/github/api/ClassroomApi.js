/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Classroom from '../model/Classroom';
import ClassroomAcceptedAssignment from '../model/ClassroomAcceptedAssignment';
import ClassroomAssignment from '../model/ClassroomAssignment';
import ClassroomAssignmentGrade from '../model/ClassroomAssignmentGrade';
import SimpleClassroom from '../model/SimpleClassroom';
import SimpleClassroomAssignment from '../model/SimpleClassroomAssignment';

/**
* Classroom service.
* @module api/ClassroomApi
* @version 1.1.4
*/
export default class ClassroomApi {

    /**
    * Constructs a new ClassroomApi. 
    * @alias module:api/ClassroomApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the classroomGetAClassroom operation.
     * @callback module:api/ClassroomApi~classroomGetAClassroomCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Classroom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a classroom
     * Gets a GitHub Classroom classroom for the current user. Classroom will only be returned if the current user is an administrator of the GitHub Classroom.
     * @param {Number} classroomId The unique identifier of the classroom.
     * @param {module:api/ClassroomApi~classroomGetAClassroomCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Classroom}
     */
    classroomGetAClassroom(classroomId, callback) {
      let postBody = null;
      // verify the required parameter 'classroomId' is set
      if (classroomId === undefined || classroomId === null) {
        throw new Error("Missing the required parameter 'classroomId' when calling classroomGetAClassroom");
      }

      let pathParams = {
        'classroom_id': classroomId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Classroom;
      return this.apiClient.callApi(
        '/classrooms/{classroom_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the classroomGetAnAssignment operation.
     * @callback module:api/ClassroomApi~classroomGetAnAssignmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClassroomAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an assignment
     * Gets a GitHub Classroom assignment. Assignment will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.
     * @param {Number} assignmentId The unique identifier of the classroom assignment.
     * @param {module:api/ClassroomApi~classroomGetAnAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClassroomAssignment}
     */
    classroomGetAnAssignment(assignmentId, callback) {
      let postBody = null;
      // verify the required parameter 'assignmentId' is set
      if (assignmentId === undefined || assignmentId === null) {
        throw new Error("Missing the required parameter 'assignmentId' when calling classroomGetAnAssignment");
      }

      let pathParams = {
        'assignment_id': assignmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClassroomAssignment;
      return this.apiClient.callApi(
        '/assignments/{assignment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the classroomGetAssignmentGrades operation.
     * @callback module:api/ClassroomApi~classroomGetAssignmentGradesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ClassroomAssignmentGrade>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get assignment grades
     * Gets grades for a GitHub Classroom assignment. Grades will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.
     * @param {Number} assignmentId The unique identifier of the classroom assignment.
     * @param {module:api/ClassroomApi~classroomGetAssignmentGradesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ClassroomAssignmentGrade>}
     */
    classroomGetAssignmentGrades(assignmentId, callback) {
      let postBody = null;
      // verify the required parameter 'assignmentId' is set
      if (assignmentId === undefined || assignmentId === null) {
        throw new Error("Missing the required parameter 'assignmentId' when calling classroomGetAssignmentGrades");
      }

      let pathParams = {
        'assignment_id': assignmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ClassroomAssignmentGrade];
      return this.apiClient.callApi(
        '/assignments/{assignment_id}/grades', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the classroomListAcceptedAssigmentsForAnAssignment operation.
     * @callback module:api/ClassroomApi~classroomListAcceptedAssigmentsForAnAssignmentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ClassroomAcceptedAssignment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List accepted assignments for an assignment
     * Lists any assignment repositories that have been created by students accepting a GitHub Classroom assignment. Accepted assignments will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.
     * @param {Number} assignmentId The unique identifier of the classroom assignment.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/ClassroomApi~classroomListAcceptedAssigmentsForAnAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ClassroomAcceptedAssignment>}
     */
    classroomListAcceptedAssigmentsForAnAssignment(assignmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assignmentId' is set
      if (assignmentId === undefined || assignmentId === null) {
        throw new Error("Missing the required parameter 'assignmentId' when calling classroomListAcceptedAssigmentsForAnAssignment");
      }

      let pathParams = {
        'assignment_id': assignmentId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ClassroomAcceptedAssignment];
      return this.apiClient.callApi(
        '/assignments/{assignment_id}/accepted_assignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the classroomListAssignmentsForAClassroom operation.
     * @callback module:api/ClassroomApi~classroomListAssignmentsForAClassroomCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SimpleClassroomAssignment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List assignments for a classroom
     * Lists GitHub Classroom assignments for a classroom. Assignments will only be returned if the current user is an administrator of the GitHub Classroom.
     * @param {Number} classroomId The unique identifier of the classroom.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/ClassroomApi~classroomListAssignmentsForAClassroomCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SimpleClassroomAssignment>}
     */
    classroomListAssignmentsForAClassroom(classroomId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'classroomId' is set
      if (classroomId === undefined || classroomId === null) {
        throw new Error("Missing the required parameter 'classroomId' when calling classroomListAssignmentsForAClassroom");
      }

      let pathParams = {
        'classroom_id': classroomId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SimpleClassroomAssignment];
      return this.apiClient.callApi(
        '/classrooms/{classroom_id}/assignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the classroomListClassrooms operation.
     * @callback module:api/ClassroomApi~classroomListClassroomsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SimpleClassroom>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List classrooms
     * Lists GitHub Classroom classrooms for the current user. Classrooms will only be returned if the current user is an administrator of one or more GitHub Classrooms.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/ClassroomApi~classroomListClassroomsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SimpleClassroom>}
     */
    classroomListClassrooms(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SimpleClassroom];
      return this.apiClient.callApi(
        '/classrooms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
