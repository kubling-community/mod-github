/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Collaborator from '../model/Collaborator';
import Contributor from '../model/Contributor';
import Release from '../model/Release';
import ShortBranch from '../model/ShortBranch';
import Tag from '../model/Tag';

/**
* Repos service.
* @module api/ReposApi
* @version 1.1.4
*/
export default class ReposApi {

  /**
  * Constructs a new ReposApi. 
  * @alias module:api/ReposApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * List organization repositories
   * Lists repositories for the specified organization.  **Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"
   * @param {String} org The organization name. The name is not case sensitive.
   * @param {Object} opts Optional parameters
   * @param {module:model/String} [type = 'all')] Specifies the types of repositories you want returned.
   * @param {module:model/String} [sort = 'created')] The property to sort the results by.
   * @param {module:model/String} [direction] The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.
   * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
   * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
   * @param {module:api/ReposApi~reposListForOrgCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Array.<module:model/MinimalRepository>}
   */
  reposListForOrg(org, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'org' is set
    if (org === undefined || org === null) {
      throw new Error("Missing the required parameter 'org' when calling reposListForOrg");
    }

    let pathParams = {
      'org': org
    };
    let queryParams = {
      'type': opts['type'],
      'sort': opts['sort'],
      'direction': opts['direction'],
      'per_page': opts['perPage'],
      'page': opts['page']
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = ApiClient.requireDeserializationToClass(opts, [MinimalRepository]);
    return this.apiClient.callApi(
      '/orgs/{org}/repos', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null, callback
    );
  }

  /**
       * List branches
       * 
       * @param {String} owner The account owner of the repository. The name is not case sensitive.
       * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
       * @param {Object} opts Optional parameters
       * @param {Boolean} [_protected] Setting to `true` returns only branches protected by branch protections or rulesets. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.
       * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
       * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
       * @param {module:api/ReposApi~reposListBranchesCallback} callback The callback function, accepting three arguments: error, data, response
       * data is of type: {@link Array.<module:model/ShortBranch>}
       */
  reposListBranches(owner, repo, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'owner' is set
    if (owner === undefined || owner === null) {
      throw new Error("Missing the required parameter 'owner' when calling reposListBranches");
    }
    // verify the required parameter 'repo' is set
    if (repo === undefined || repo === null) {
      throw new Error("Missing the required parameter 'repo' when calling reposListBranches");
    }

    let pathParams = {
      'owner': owner,
      'repo': repo
    };
    let queryParams = {
      'protected': opts['_protected'],
      'per_page': opts['perPage'],
      'page': opts['page']
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['basicAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = [ShortBranch];
    return this.apiClient.callApi(
      '/repos/{owner}/{repo}/branches', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null, callback
    );
  }

  /**
   * List repository collaborators
   * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. Organization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.  Team members will include the members of child teams.  The authenticated user must have push access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `read:org` and `repo` scopes to use this endpoint.
   * @param {String} owner The account owner of the repository. The name is not case sensitive.
   * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
   * @param {Object} opts Optional parameters
   * @param {module:model/String} [affiliation = 'all')] Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
   * @param {module:model/String} [permission] Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned.
   * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
   * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
   * @param {module:api/ReposApi~reposListCollaboratorsCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Array.<module:model/Collaborator>}
   */
  reposListCollaborators(owner, repo, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'owner' is set
    if (owner === undefined || owner === null) {
      throw new Error("Missing the required parameter 'owner' when calling reposListCollaborators");
    }
    // verify the required parameter 'repo' is set
    if (repo === undefined || repo === null) {
      throw new Error("Missing the required parameter 'repo' when calling reposListCollaborators");
    }

    let pathParams = {
      'owner': owner,
      'repo': repo
    };
    let queryParams = {
      'affiliation': opts['affiliation'],
      'permission': opts['permission'],
      'per_page': opts['perPage'],
      'page': opts['page']
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['basicAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = [Collaborator];
    return this.apiClient.callApi(
      '/repos/{owner}/{repo}/collaborators', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null, callback
    );
  }

  /**
   * List repository contributors
   * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.  GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
   * @param {String} owner The account owner of the repository. The name is not case sensitive.
   * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
   * @param {Object} opts Optional parameters
   * @param {String} [anon] Set to `1` or `true` to include anonymous contributors in results.
   * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
   * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
   * @param {module:api/ReposApi~reposListContributorsCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Array.<module:model/Contributor>}
   */
  reposListContributors(owner, repo, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'owner' is set
    if (owner === undefined || owner === null) {
      throw new Error("Missing the required parameter 'owner' when calling reposListContributors");
    }
    // verify the required parameter 'repo' is set
    if (repo === undefined || repo === null) {
      throw new Error("Missing the required parameter 'repo' when calling reposListContributors");
    }

    let pathParams = {
      'owner': owner,
      'repo': repo
    };
    let queryParams = {
      'anon': opts['anon'],
      'per_page': opts['perPage'],
      'page': opts['page']
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['basicAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = [Contributor];
    return this.apiClient.callApi(
      '/repos/{owner}/{repo}/contributors', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null, callback
    );
  }

  /**
   * List repository languages
   * Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
   * @param {String} owner The account owner of the repository. The name is not case sensitive.
   * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
   * @param {module:api/ReposApi~reposListLanguagesCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Object.<String, {String: Number}>}
   */
  reposListLanguages(owner, repo, callback) {
    let postBody = null;
    // verify the required parameter 'owner' is set
    if (owner === undefined || owner === null) {
      throw new Error("Missing the required parameter 'owner' when calling reposListLanguages");
    }
    // verify the required parameter 'repo' is set
    if (repo === undefined || repo === null) {
      throw new Error("Missing the required parameter 'repo' when calling reposListLanguages");
    }

    let pathParams = {
      'owner': owner,
      'repo': repo
    };
    let queryParams = {
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['basicAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = { 'String': 'Number' };
    return this.apiClient.callApi(
      '/repos/{owner}/{repo}/languages', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null, callback
    );
  }

  /**
   * List releases
   * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/repos/repos#list-repository-tags).  Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
   * @param {String} owner The account owner of the repository. The name is not case sensitive.
   * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
   * @param {Object} opts Optional parameters
   * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
   * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
   * @param {module:api/ReposApi~reposListReleasesCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Array.<module:model/Release>}
   */
  reposListReleases(owner, repo, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'owner' is set
    if (owner === undefined || owner === null) {
      throw new Error("Missing the required parameter 'owner' when calling reposListReleases");
    }
    // verify the required parameter 'repo' is set
    if (repo === undefined || repo === null) {
      throw new Error("Missing the required parameter 'repo' when calling reposListReleases");
    }

    let pathParams = {
      'owner': owner,
      'repo': repo
    };
    let queryParams = {
      'per_page': opts['perPage'],
      'page': opts['page']
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['basicAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = [Release];
    return this.apiClient.callApi(
      '/repos/{owner}/{repo}/releases', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null, callback
    );
  }

  /**
   * List repository tags
   * 
   * @param {String} owner The account owner of the repository. The name is not case sensitive.
   * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
   * @param {Object} opts Optional parameters
   * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
   * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
   * @param {module:api/ReposApi~reposListTagsCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Array.<module:model/Tag>}
   */
  reposListTags(owner, repo, opts, callback) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'owner' is set
    if (owner === undefined || owner === null) {
      throw new Error("Missing the required parameter 'owner' when calling reposListTags");
    }
    // verify the required parameter 'repo' is set
    if (repo === undefined || repo === null) {
      throw new Error("Missing the required parameter 'repo' when calling reposListTags");
    }

    let pathParams = {
      'owner': owner,
      'repo': repo
    };
    let queryParams = {
      'per_page': opts['perPage'],
      'page': opts['page']
    };
    let headerParams = {
    };
    let formParams = {
    };

    let authNames = ['basicAuth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = [Tag];
    return this.apiClient.callApi(
      '/repos/{owner}/{repo}/tags', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null, callback
    );
  }

}
