/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiOverview from '../model/ApiOverview';
import Root from '../model/Root';

/**
* Meta service.
* @module api/MetaApi
* @version 1.1.4
*/
export default class MetaApi {

    /**
    * Constructs a new MetaApi. 
    * @alias module:api/MetaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the metaGet operation.
     * @callback module:api/MetaApi~metaGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiOverview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get GitHub meta information
     * Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see \"[About GitHub's IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/).\"  The API's response also includes a list of GitHub's domain names.  The values shown in the documentation's response are example values. You must always query the API directly to get the latest values.  **Note:** This endpoint returns both IPv4 and IPv6 addresses. However, not all features support IPv6. You should refer to the specific documentation for each feature to determine if IPv6 is supported.
     * @param {module:api/MetaApi~metaGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiOverview}
     */
    metaGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiOverview;
      return this.apiClient.callApi(
        '/meta', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metaGetAllVersions operation.
     * @callback module:api/MetaApi~metaGetAllVersionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Date>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all API versions
     * Get all supported GitHub API versions.
     * @param {module:api/MetaApi~metaGetAllVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Date>}
     */
    metaGetAllVersions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Date'];
      return this.apiClient.callApi(
        '/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metaGetOctocat operation.
     * @callback module:api/MetaApi~metaGetOctocatCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Octocat
     * Get the octocat as ASCII art
     * @param {Object} opts Optional parameters
     * @param {String} [s] The words to show in Octocat's speech bubble
     * @param {module:api/MetaApi~metaGetOctocatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    metaGetOctocat(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        's': opts['s']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octocat-stream'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/octocat', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metaGetZen operation.
     * @callback module:api/MetaApi~metaGetZenCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Zen of GitHub
     * Get a random sentence from the Zen of GitHub
     * @param {module:api/MetaApi~metaGetZenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    metaGetZen(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/zen', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metaRoot operation.
     * @callback module:api/MetaApi~metaRootCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Root} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GitHub API Root
     * Get Hypermedia links to resources accessible in GitHub's REST API
     * @param {module:api/MetaApi~metaRootCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Root}
     */
    metaRoot(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Root;
      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
