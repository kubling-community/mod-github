/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FullRepository from '../model/FullRepository';
import GlobalAdvisory from '../model/GlobalAdvisory';
import RepositoryAdvisory from '../model/RepositoryAdvisory';

/**
* SecurityAdvisories service.
* @module api/SecurityAdvisoriesApi
* @version 1.1.4
*/
export default class SecurityAdvisoriesApi {

    /**
    * Constructs a new SecurityAdvisoriesApi. 
    * @alias module:api/SecurityAdvisoriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the securityAdvisoriesCreateFork operation.
     * @callback module:api/SecurityAdvisoriesApi~securityAdvisoriesCreateForkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FullRepository} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a temporary private fork
     * Create a temporary private fork to collaborate on fixing a security vulnerability in your repository.  **Note**: Forking a repository happens asynchronously. You may have to wait up to 5 minutes before you can access the fork.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} ghsaId The GHSA (GitHub Security Advisory) identifier of the advisory.
     * @param {module:api/SecurityAdvisoriesApi~securityAdvisoriesCreateForkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FullRepository}
     */
    securityAdvisoriesCreateFork(owner, repo, ghsaId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling securityAdvisoriesCreateFork");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling securityAdvisoriesCreateFork");
      }
      // verify the required parameter 'ghsaId' is set
      if (ghsaId === undefined || ghsaId === null) {
        throw new Error("Missing the required parameter 'ghsaId' when calling securityAdvisoriesCreateFork");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'ghsa_id': ghsaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = FullRepository;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityAdvisoriesCreatePrivateVulnerabilityReport operation.
     * @callback module:api/SecurityAdvisoriesApi~securityAdvisoriesCreatePrivateVulnerabilityReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepositoryAdvisory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Privately report a security vulnerability
     * Report a security vulnerability to the maintainers of the repository. See \"[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)\" for more information about private vulnerability reporting.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:model/PrivateVulnerabilityReportCreate} privateVulnerabilityReportCreate 
     * @param {module:api/SecurityAdvisoriesApi~securityAdvisoriesCreatePrivateVulnerabilityReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepositoryAdvisory}
     */
    securityAdvisoriesCreatePrivateVulnerabilityReport(owner, repo, privateVulnerabilityReportCreate, callback) {
      let postBody = privateVulnerabilityReportCreate;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling securityAdvisoriesCreatePrivateVulnerabilityReport");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling securityAdvisoriesCreatePrivateVulnerabilityReport");
      }
      // verify the required parameter 'privateVulnerabilityReportCreate' is set
      if (privateVulnerabilityReportCreate === undefined || privateVulnerabilityReportCreate === null) {
        throw new Error("Missing the required parameter 'privateVulnerabilityReportCreate' when calling securityAdvisoriesCreatePrivateVulnerabilityReport");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RepositoryAdvisory;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/security-advisories/reports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityAdvisoriesCreateRepositoryAdvisory operation.
     * @callback module:api/SecurityAdvisoriesApi~securityAdvisoriesCreateRepositoryAdvisoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepositoryAdvisory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a repository security advisory
     * Creates a new repository security advisory.  In order to create a draft repository security advisory, the authenticated user must be a security manager or administrator of that repository.  OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:model/RepositoryAdvisoryCreate} repositoryAdvisoryCreate 
     * @param {module:api/SecurityAdvisoriesApi~securityAdvisoriesCreateRepositoryAdvisoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepositoryAdvisory}
     */
    securityAdvisoriesCreateRepositoryAdvisory(owner, repo, repositoryAdvisoryCreate, callback) {
      let postBody = repositoryAdvisoryCreate;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling securityAdvisoriesCreateRepositoryAdvisory");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling securityAdvisoriesCreateRepositoryAdvisory");
      }
      // verify the required parameter 'repositoryAdvisoryCreate' is set
      if (repositoryAdvisoryCreate === undefined || repositoryAdvisoryCreate === null) {
        throw new Error("Missing the required parameter 'repositoryAdvisoryCreate' when calling securityAdvisoriesCreateRepositoryAdvisory");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RepositoryAdvisory;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/security-advisories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityAdvisoriesCreateRepositoryAdvisoryCveRequest operation.
     * @callback module:api/SecurityAdvisoriesApi~securityAdvisoriesCreateRepositoryAdvisoryCveRequestCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request a CVE for a repository security advisory
     * If you want a CVE identification number for the security vulnerability in your project, and don't already have one, you can request a CVE identification number from GitHub. For more information see \"[Requesting a CVE identification number](https://docs.github.com/code-security/security-advisories/repository-security-advisories/publishing-a-repository-security-advisory#requesting-a-cve-identification-number-optional).\"  You may request a CVE for public repositories, but cannot do so for private repositories.  In order to request a CVE for a repository security advisory, the authenticated user must be a security manager or administrator of that repository.  OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} ghsaId The GHSA (GitHub Security Advisory) identifier of the advisory.
     * @param {module:api/SecurityAdvisoriesApi~securityAdvisoriesCreateRepositoryAdvisoryCveRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    securityAdvisoriesCreateRepositoryAdvisoryCveRequest(owner, repo, ghsaId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling securityAdvisoriesCreateRepositoryAdvisoryCveRequest");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling securityAdvisoriesCreateRepositoryAdvisoryCveRequest");
      }
      // verify the required parameter 'ghsaId' is set
      if (ghsaId === undefined || ghsaId === null) {
        throw new Error("Missing the required parameter 'ghsaId' when calling securityAdvisoriesCreateRepositoryAdvisoryCveRequest");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'ghsa_id': ghsaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityAdvisoriesGetGlobalAdvisory operation.
     * @callback module:api/SecurityAdvisoriesApi~securityAdvisoriesGetGlobalAdvisoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GlobalAdvisory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a global security advisory
     * Gets a global security advisory using its GitHub Security Advisory (GHSA) identifier.
     * @param {String} ghsaId The GHSA (GitHub Security Advisory) identifier of the advisory.
     * @param {module:api/SecurityAdvisoriesApi~securityAdvisoriesGetGlobalAdvisoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GlobalAdvisory}
     */
    securityAdvisoriesGetGlobalAdvisory(ghsaId, callback) {
      let postBody = null;
      // verify the required parameter 'ghsaId' is set
      if (ghsaId === undefined || ghsaId === null) {
        throw new Error("Missing the required parameter 'ghsaId' when calling securityAdvisoriesGetGlobalAdvisory");
      }

      let pathParams = {
        'ghsa_id': ghsaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GlobalAdvisory;
      return this.apiClient.callApi(
        '/advisories/{ghsa_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityAdvisoriesGetRepositoryAdvisory operation.
     * @callback module:api/SecurityAdvisoriesApi~securityAdvisoriesGetRepositoryAdvisoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepositoryAdvisory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a repository security advisory
     * Get a repository security advisory using its GitHub Security Advisory (GHSA) identifier.  Anyone can access any published security advisory on a public repository.  The authenticated user can access an unpublished security advisory from a repository if they are a security manager or administrator of that repository, or if they are a collaborator on the security advisory.  OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} ghsaId The GHSA (GitHub Security Advisory) identifier of the advisory.
     * @param {module:api/SecurityAdvisoriesApi~securityAdvisoriesGetRepositoryAdvisoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepositoryAdvisory}
     */
    securityAdvisoriesGetRepositoryAdvisory(owner, repo, ghsaId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling securityAdvisoriesGetRepositoryAdvisory");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling securityAdvisoriesGetRepositoryAdvisory");
      }
      // verify the required parameter 'ghsaId' is set
      if (ghsaId === undefined || ghsaId === null) {
        throw new Error("Missing the required parameter 'ghsaId' when calling securityAdvisoriesGetRepositoryAdvisory");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'ghsa_id': ghsaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepositoryAdvisory;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/security-advisories/{ghsa_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityAdvisoriesListGlobalAdvisories operation.
     * @callback module:api/SecurityAdvisoriesApi~securityAdvisoriesListGlobalAdvisoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GlobalAdvisory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List global security advisories
     * Lists all global security advisories that match the specified parameters. If no other parameters are defined, the request will return only GitHub-reviewed advisories that are not malware.  By default, all responses will exclude advisories for malware, because malware are not standard vulnerabilities. To list advisories for malware, you must include the `type` parameter in your request, with the value `malware`. For more information about the different types of security advisories, see \"[About the GitHub Advisory database](https://docs.github.com/code-security/security-advisories/global-security-advisories/about-the-github-advisory-database#about-types-of-security-advisories).\"
     * @param {Object} opts Optional parameters
     * @param {String} [ghsaId] If specified, only advisories with this GHSA (GitHub Security Advisory) identifier will be returned.
     * @param {module:model/String} [type = 'reviewed')] If specified, only advisories of this type will be returned. By default, a request with no other parameters defined will only return reviewed advisories that are not malware.
     * @param {String} [cveId] If specified, only advisories with this CVE (Common Vulnerabilities and Exposures) identifier will be returned.
     * @param {module:model/SecurityAdvisoryEcosystems} [ecosystem] If specified, only advisories for these ecosystems will be returned.
     * @param {module:model/String} [severity] If specified, only advisories with these severities will be returned.
     * @param {module:model/SecurityAdvisoriesListGlobalAdvisoriesCwesParameter} [cwes] If specified, only advisories with these Common Weakness Enumerations (CWEs) will be returned.  Example: `cwes=79,284,22` or `cwes[]=79&cwes[]=284&cwes[]=22`
     * @param {Boolean} [isWithdrawn] Whether to only return advisories that have been withdrawn.
     * @param {module:model/SecurityAdvisoriesListGlobalAdvisoriesAffectsParameter} [affects] If specified, only return advisories that affect any of `package` or `package@version`. A maximum of 1000 packages can be specified. If the query parameter causes the URL to exceed the maximum URL length supported by your client, you must specify fewer packages.  Example: `affects=package1,package2@1.0.0,package3@^2.0.0` or `affects[]=package1&affects[]=package2@1.0.0`
     * @param {String} [published] If specified, only return advisories that were published on a date or date range.  For more information on the syntax of the date range, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\"
     * @param {String} [updated] If specified, only return advisories that were updated on a date or date range.  For more information on the syntax of the date range, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\"
     * @param {String} [modified] If specified, only show advisories that were updated or published on a date or date range.  For more information on the syntax of the date range, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\"
     * @param {String} [before] A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {String} [after] A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:model/String} [direction = 'desc')] The direction to sort the results by.
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:model/String} [sort = 'published')] The property to sort the results by.
     * @param {module:api/SecurityAdvisoriesApi~securityAdvisoriesListGlobalAdvisoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GlobalAdvisory>}
     */
    securityAdvisoriesListGlobalAdvisories(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ghsa_id': opts['ghsaId'],
        'type': opts['type'],
        'cve_id': opts['cveId'],
        'ecosystem': opts['ecosystem'],
        'severity': opts['severity'],
        'cwes': opts['cwes'],
        'is_withdrawn': opts['isWithdrawn'],
        'affects': opts['affects'],
        'published': opts['published'],
        'updated': opts['updated'],
        'modified': opts['modified'],
        'before': opts['before'],
        'after': opts['after'],
        'direction': opts['direction'],
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GlobalAdvisory];
      return this.apiClient.callApi(
        '/advisories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityAdvisoriesListOrgRepositoryAdvisories operation.
     * @callback module:api/SecurityAdvisoriesApi~securityAdvisoriesListOrgRepositoryAdvisoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RepositoryAdvisory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repository security advisories for an organization
     * Lists repository security advisories for an organization.  The authenticated user must be an owner or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction = 'desc')] The direction to sort the results by.
     * @param {module:model/String} [sort = 'created')] The property to sort the results by.
     * @param {String} [before] A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {String} [after] A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [perPage = 30)] The number of advisories to return per page. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:model/String} [state] Filter by the state of the repository advisories. Only advisories of this state will be returned.
     * @param {module:api/SecurityAdvisoriesApi~securityAdvisoriesListOrgRepositoryAdvisoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RepositoryAdvisory>}
     */
    securityAdvisoriesListOrgRepositoryAdvisories(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling securityAdvisoriesListOrgRepositoryAdvisories");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'direction': opts['direction'],
        'sort': opts['sort'],
        'before': opts['before'],
        'after': opts['after'],
        'per_page': opts['perPage'],
        'state': opts['state']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = [RepositoryAdvisory];
      return this.apiClient.callApi(
        '/orgs/{org}/security-advisories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityAdvisoriesListRepositoryAdvisories operation.
     * @callback module:api/SecurityAdvisoriesApi~securityAdvisoriesListRepositoryAdvisoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RepositoryAdvisory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repository security advisories
     * Lists security advisories in a repository.  The authenticated user can access unpublished security advisories from a repository if they are a security manager or administrator of that repository, or if they are a collaborator on any security advisory.  OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [direction = 'desc')] The direction to sort the results by.
     * @param {module:model/String} [sort = 'created')] The property to sort the results by.
     * @param {String} [before] A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {String} [after] A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [perPage = 30)] The number of advisories to return per page. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:model/String} [state] Filter by state of the repository advisories. Only advisories of this state will be returned.
     * @param {module:api/SecurityAdvisoriesApi~securityAdvisoriesListRepositoryAdvisoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RepositoryAdvisory>}
     */
    securityAdvisoriesListRepositoryAdvisories(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling securityAdvisoriesListRepositoryAdvisories");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling securityAdvisoriesListRepositoryAdvisories");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'direction': opts['direction'],
        'sort': opts['sort'],
        'before': opts['before'],
        'after': opts['after'],
        'per_page': opts['perPage'],
        'state': opts['state']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = [RepositoryAdvisory];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/security-advisories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityAdvisoriesUpdateRepositoryAdvisory operation.
     * @callback module:api/SecurityAdvisoriesApi~securityAdvisoriesUpdateRepositoryAdvisoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepositoryAdvisory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a repository security advisory
     * Update a repository security advisory using its GitHub Security Advisory (GHSA) identifier.  In order to update any security advisory, the authenticated user must be a security manager or administrator of that repository, or a collaborator on the repository security advisory.  OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} ghsaId The GHSA (GitHub Security Advisory) identifier of the advisory.
     * @param {module:model/RepositoryAdvisoryUpdate} repositoryAdvisoryUpdate 
     * @param {module:api/SecurityAdvisoriesApi~securityAdvisoriesUpdateRepositoryAdvisoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepositoryAdvisory}
     */
    securityAdvisoriesUpdateRepositoryAdvisory(owner, repo, ghsaId, repositoryAdvisoryUpdate, callback) {
      let postBody = repositoryAdvisoryUpdate;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling securityAdvisoriesUpdateRepositoryAdvisory");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling securityAdvisoriesUpdateRepositoryAdvisory");
      }
      // verify the required parameter 'ghsaId' is set
      if (ghsaId === undefined || ghsaId === null) {
        throw new Error("Missing the required parameter 'ghsaId' when calling securityAdvisoriesUpdateRepositoryAdvisory");
      }
      // verify the required parameter 'repositoryAdvisoryUpdate' is set
      if (repositoryAdvisoryUpdate === undefined || repositoryAdvisoryUpdate === null) {
        throw new Error("Missing the required parameter 'repositoryAdvisoryUpdate' when calling securityAdvisoriesUpdateRepositoryAdvisory");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'ghsa_id': ghsaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RepositoryAdvisory;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/security-advisories/{ghsa_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
