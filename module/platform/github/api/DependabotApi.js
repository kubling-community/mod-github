/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActionsListSelectedReposForOrgSecret200Response from '../model/ActionsListSelectedReposForOrgSecret200Response';
import DependabotAlert from '../model/DependabotAlert';
import DependabotAlertWithRepository from '../model/DependabotAlertWithRepository';
import DependabotListOrgSecrets200Response from '../model/DependabotListOrgSecrets200Response';
import DependabotListRepoSecrets200Response from '../model/DependabotListRepoSecrets200Response';
import DependabotPublicKey from '../model/DependabotPublicKey';
import DependabotSecret from '../model/DependabotSecret';
import OrganizationDependabotSecret from '../model/OrganizationDependabotSecret';

/**
* Dependabot service.
* @module api/DependabotApi
* @version 1.1.4
*/
export default class DependabotApi {

    /**
    * Constructs a new DependabotApi. 
    * @alias module:api/DependabotApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dependabotAddSelectedRepoToOrgSecret operation.
     * @callback module:api/DependabotApi~dependabotAddSelectedRepoToOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add selected repository to an organization secret
     * Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {Number} repositoryId 
     * @param {module:api/DependabotApi~dependabotAddSelectedRepoToOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dependabotAddSelectedRepoToOrgSecret(org, secretName, repositoryId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling dependabotAddSelectedRepoToOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling dependabotAddSelectedRepoToOrgSecret");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling dependabotAddSelectedRepoToOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName,
        'repository_id': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotCreateOrUpdateOrgSecret operation.
     * @callback module:api/DependabotApi~dependabotCreateOrUpdateOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an organization secret
     * Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:model/DependabotCreateOrUpdateOrgSecretRequest} dependabotCreateOrUpdateOrgSecretRequest 
     * @param {module:api/DependabotApi~dependabotCreateOrUpdateOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    dependabotCreateOrUpdateOrgSecret(org, secretName, dependabotCreateOrUpdateOrgSecretRequest, callback) {
      let postBody = dependabotCreateOrUpdateOrgSecretRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling dependabotCreateOrUpdateOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling dependabotCreateOrUpdateOrgSecret");
      }
      // verify the required parameter 'dependabotCreateOrUpdateOrgSecretRequest' is set
      if (dependabotCreateOrUpdateOrgSecretRequest === undefined || dependabotCreateOrUpdateOrgSecretRequest === null) {
        throw new Error("Missing the required parameter 'dependabotCreateOrUpdateOrgSecretRequest' when calling dependabotCreateOrUpdateOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/orgs/{org}/dependabot/secrets/{secret_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotCreateOrUpdateRepoSecret operation.
     * @callback module:api/DependabotApi~dependabotCreateOrUpdateRepoSecretCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a repository secret
     * Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:model/DependabotCreateOrUpdateRepoSecretRequest} dependabotCreateOrUpdateRepoSecretRequest 
     * @param {module:api/DependabotApi~dependabotCreateOrUpdateRepoSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    dependabotCreateOrUpdateRepoSecret(owner, repo, secretName, dependabotCreateOrUpdateRepoSecretRequest, callback) {
      let postBody = dependabotCreateOrUpdateRepoSecretRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling dependabotCreateOrUpdateRepoSecret");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling dependabotCreateOrUpdateRepoSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling dependabotCreateOrUpdateRepoSecret");
      }
      // verify the required parameter 'dependabotCreateOrUpdateRepoSecretRequest' is set
      if (dependabotCreateOrUpdateRepoSecretRequest === undefined || dependabotCreateOrUpdateRepoSecretRequest === null) {
        throw new Error("Missing the required parameter 'dependabotCreateOrUpdateRepoSecretRequest' when calling dependabotCreateOrUpdateRepoSecret");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/dependabot/secrets/{secret_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotDeleteOrgSecret operation.
     * @callback module:api/DependabotApi~dependabotDeleteOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an organization secret
     * Deletes a secret in an organization using the secret name.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:api/DependabotApi~dependabotDeleteOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dependabotDeleteOrgSecret(org, secretName, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling dependabotDeleteOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling dependabotDeleteOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/dependabot/secrets/{secret_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotDeleteRepoSecret operation.
     * @callback module:api/DependabotApi~dependabotDeleteRepoSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a repository secret
     * Deletes a secret in a repository using the secret name.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:api/DependabotApi~dependabotDeleteRepoSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dependabotDeleteRepoSecret(owner, repo, secretName, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling dependabotDeleteRepoSecret");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling dependabotDeleteRepoSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling dependabotDeleteRepoSecret");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/dependabot/secrets/{secret_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotGetAlert operation.
     * @callback module:api/DependabotApi~dependabotGetAlertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DependabotAlert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Dependabot alert
     * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} alertNumber The number that identifies a Dependabot alert in its repository. You can find this at the end of the URL for a Dependabot alert within GitHub, or in `number` fields in the response from the `GET /repos/{owner}/{repo}/dependabot/alerts` operation.
     * @param {module:api/DependabotApi~dependabotGetAlertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DependabotAlert}
     */
    dependabotGetAlert(owner, repo, alertNumber, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling dependabotGetAlert");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling dependabotGetAlert");
      }
      // verify the required parameter 'alertNumber' is set
      if (alertNumber === undefined || alertNumber === null) {
        throw new Error("Missing the required parameter 'alertNumber' when calling dependabotGetAlert");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'alert_number': alertNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DependabotAlert;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/dependabot/alerts/{alert_number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotGetOrgPublicKey operation.
     * @callback module:api/DependabotApi~dependabotGetOrgPublicKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DependabotPublicKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an organization public key
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/DependabotApi~dependabotGetOrgPublicKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DependabotPublicKey}
     */
    dependabotGetOrgPublicKey(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling dependabotGetOrgPublicKey");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DependabotPublicKey;
      return this.apiClient.callApi(
        '/orgs/{org}/dependabot/secrets/public-key', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotGetOrgSecret operation.
     * @callback module:api/DependabotApi~dependabotGetOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationDependabotSecret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an organization secret
     * Gets a single organization secret without revealing its encrypted value.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:api/DependabotApi~dependabotGetOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationDependabotSecret}
     */
    dependabotGetOrgSecret(org, secretName, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling dependabotGetOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling dependabotGetOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrganizationDependabotSecret;
      return this.apiClient.callApi(
        '/orgs/{org}/dependabot/secrets/{secret_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotGetRepoPublicKey operation.
     * @callback module:api/DependabotApi~dependabotGetRepoPublicKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DependabotPublicKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a repository public key
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint if the repository is private.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:api/DependabotApi~dependabotGetRepoPublicKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DependabotPublicKey}
     */
    dependabotGetRepoPublicKey(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling dependabotGetRepoPublicKey");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling dependabotGetRepoPublicKey");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DependabotPublicKey;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/dependabot/secrets/public-key', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotGetRepoSecret operation.
     * @callback module:api/DependabotApi~dependabotGetRepoSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DependabotSecret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a repository secret
     * Gets a single repository secret without revealing its encrypted value.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:api/DependabotApi~dependabotGetRepoSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DependabotSecret}
     */
    dependabotGetRepoSecret(owner, repo, secretName, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling dependabotGetRepoSecret");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling dependabotGetRepoSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling dependabotGetRepoSecret");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DependabotSecret;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/dependabot/secrets/{secret_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotListAlertsForEnterprise operation.
     * @callback module:api/DependabotApi~dependabotListAlertsForEnterpriseCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DependabotAlertWithRepository>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Dependabot alerts for an enterprise
     * Lists Dependabot alerts for repositories that are owned by the specified enterprise.  The authenticated user must be a member of the enterprise to use this endpoint.  Alerts are only returned for organizations in the enterprise for which you are an organization owner or a security manager. For more information about security managers, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"  OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint.
     * @param {String} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param {Object} opts Optional parameters
     * @param {String} [state] A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`
     * @param {String} [severity] A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: `low`, `medium`, `high`, `critical`
     * @param {String} [ecosystem] A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
     * @param {String} [_package] A comma-separated list of package names. If specified, only alerts for these packages will be returned.
     * @param {module:model/String} [scope] The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
     * @param {module:model/String} [sort = 'created')] The property by which to sort the results. `created` means when the alert was created. `updated` means when the alert's state last changed.
     * @param {module:model/String} [direction = 'desc')] The direction to sort the results by.
     * @param {String} [before] A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {String} [after] A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [first = 30)] **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with `last`. Instead, use `per_page` in combination with `after` to fetch the first page of results.
     * @param {Number} [last] **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with `first`. Instead, use `per_page` in combination with `before` to fetch the last page of results.
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/DependabotApi~dependabotListAlertsForEnterpriseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DependabotAlertWithRepository>}
     */
    dependabotListAlertsForEnterprise(enterprise, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'enterprise' is set
      if (enterprise === undefined || enterprise === null) {
        throw new Error("Missing the required parameter 'enterprise' when calling dependabotListAlertsForEnterprise");
      }

      let pathParams = {
        'enterprise': enterprise
      };
      let queryParams = {
        'state': opts['state'],
        'severity': opts['severity'],
        'ecosystem': opts['ecosystem'],
        'package': opts['_package'],
        'scope': opts['scope'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'before': opts['before'],
        'after': opts['after'],
        'first': opts['first'],
        'last': opts['last'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DependabotAlertWithRepository];
      return this.apiClient.callApi(
        '/enterprises/{enterprise}/dependabot/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotListAlertsForOrg operation.
     * @callback module:api/DependabotApi~dependabotListAlertsForOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DependabotAlertWithRepository>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Dependabot alerts for an organization
     * Lists Dependabot alerts for an organization.  The authenticated user must be an owner or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {String} [state] A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`
     * @param {String} [severity] A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: `low`, `medium`, `high`, `critical`
     * @param {String} [ecosystem] A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
     * @param {String} [_package] A comma-separated list of package names. If specified, only alerts for these packages will be returned.
     * @param {module:model/String} [scope] The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
     * @param {module:model/String} [sort = 'created')] The property by which to sort the results. `created` means when the alert was created. `updated` means when the alert's state last changed.
     * @param {module:model/String} [direction = 'desc')] The direction to sort the results by.
     * @param {String} [before] A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {String} [after] A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [first = 30)] **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with `last`. Instead, use `per_page` in combination with `after` to fetch the first page of results.
     * @param {Number} [last] **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with `first`. Instead, use `per_page` in combination with `before` to fetch the last page of results.
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/DependabotApi~dependabotListAlertsForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DependabotAlertWithRepository>}
     */
    dependabotListAlertsForOrg(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling dependabotListAlertsForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'state': opts['state'],
        'severity': opts['severity'],
        'ecosystem': opts['ecosystem'],
        'package': opts['_package'],
        'scope': opts['scope'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'before': opts['before'],
        'after': opts['after'],
        'first': opts['first'],
        'last': opts['last'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = [DependabotAlertWithRepository];
      return this.apiClient.callApi(
        '/orgs/{org}/dependabot/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotListAlertsForRepo operation.
     * @callback module:api/DependabotApi~dependabotListAlertsForRepoCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DependabotAlert>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Dependabot alerts for a repository
     * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {String} [state] A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`
     * @param {String} [severity] A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: `low`, `medium`, `high`, `critical`
     * @param {String} [ecosystem] A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`
     * @param {String} [_package] A comma-separated list of package names. If specified, only alerts for these packages will be returned.
     * @param {String} [manifest] A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned.
     * @param {module:model/String} [scope] The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.
     * @param {module:model/String} [sort = 'created')] The property by which to sort the results. `created` means when the alert was created. `updated` means when the alert's state last changed.
     * @param {module:model/String} [direction = 'desc')] The direction to sort the results by.
     * @param {Number} [page = 1)] **Deprecated**. Page number of the results to fetch. Use cursor-based pagination with `before` or `after` instead.
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {String} [before] A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {String} [after] A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [first = 30)] **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with `last`. Instead, use `per_page` in combination with `after` to fetch the first page of results.
     * @param {Number} [last] **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with `first`. Instead, use `per_page` in combination with `before` to fetch the last page of results.
     * @param {module:api/DependabotApi~dependabotListAlertsForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DependabotAlert>}
     */
    dependabotListAlertsForRepo(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling dependabotListAlertsForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling dependabotListAlertsForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'state': opts['state'],
        'severity': opts['severity'],
        'ecosystem': opts['ecosystem'],
        'package': opts['_package'],
        'manifest': opts['manifest'],
        'scope': opts['scope'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'before': opts['before'],
        'after': opts['after'],
        'first': opts['first'],
        'last': opts['last']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = [DependabotAlert];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/dependabot/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotListOrgSecrets operation.
     * @callback module:api/DependabotApi~dependabotListOrgSecretsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DependabotListOrgSecrets200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organization secrets
     * Lists all secrets available in an organization without revealing their encrypted values.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/DependabotApi~dependabotListOrgSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DependabotListOrgSecrets200Response}
     */
    dependabotListOrgSecrets(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling dependabotListOrgSecrets");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DependabotListOrgSecrets200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/dependabot/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotListRepoSecrets operation.
     * @callback module:api/DependabotApi~dependabotListRepoSecretsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DependabotListRepoSecrets200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repository secrets
     * Lists all secrets available in a repository without revealing their encrypted values.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/DependabotApi~dependabotListRepoSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DependabotListRepoSecrets200Response}
     */
    dependabotListRepoSecrets(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling dependabotListRepoSecrets");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling dependabotListRepoSecrets");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DependabotListRepoSecrets200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/dependabot/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotListSelectedReposForOrgSecret operation.
     * @callback module:api/DependabotApi~dependabotListSelectedReposForOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListSelectedReposForOrgSecret200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List selected repositories for an organization secret
     * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/DependabotApi~dependabotListSelectedReposForOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListSelectedReposForOrgSecret200Response}
     */
    dependabotListSelectedReposForOrgSecret(org, secretName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling dependabotListSelectedReposForOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling dependabotListSelectedReposForOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListSelectedReposForOrgSecret200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/dependabot/secrets/{secret_name}/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotRemoveSelectedRepoFromOrgSecret operation.
     * @callback module:api/DependabotApi~dependabotRemoveSelectedRepoFromOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove selected repository from an organization secret
     * Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {Number} repositoryId 
     * @param {module:api/DependabotApi~dependabotRemoveSelectedRepoFromOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dependabotRemoveSelectedRepoFromOrgSecret(org, secretName, repositoryId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling dependabotRemoveSelectedRepoFromOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling dependabotRemoveSelectedRepoFromOrgSecret");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling dependabotRemoveSelectedRepoFromOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName,
        'repository_id': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotSetSelectedReposForOrgSecret operation.
     * @callback module:api/DependabotApi~dependabotSetSelectedReposForOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set selected repositories for an organization secret
     * Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:model/DependabotSetSelectedReposForOrgSecretRequest} dependabotSetSelectedReposForOrgSecretRequest 
     * @param {module:api/DependabotApi~dependabotSetSelectedReposForOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dependabotSetSelectedReposForOrgSecret(org, secretName, dependabotSetSelectedReposForOrgSecretRequest, callback) {
      let postBody = dependabotSetSelectedReposForOrgSecretRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling dependabotSetSelectedReposForOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling dependabotSetSelectedReposForOrgSecret");
      }
      // verify the required parameter 'dependabotSetSelectedReposForOrgSecretRequest' is set
      if (dependabotSetSelectedReposForOrgSecretRequest === undefined || dependabotSetSelectedReposForOrgSecretRequest === null) {
        throw new Error("Missing the required parameter 'dependabotSetSelectedReposForOrgSecretRequest' when calling dependabotSetSelectedReposForOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/dependabot/secrets/{secret_name}/repositories', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dependabotUpdateAlert operation.
     * @callback module:api/DependabotApi~dependabotUpdateAlertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DependabotAlert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Dependabot alert
     * The authenticated user must have access to security alerts for the repository to use this endpoint. For more information, see \"[Granting access to security alerts](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository#granting-access-to-security-alerts).\"  OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} alertNumber The number that identifies a Dependabot alert in its repository. You can find this at the end of the URL for a Dependabot alert within GitHub, or in `number` fields in the response from the `GET /repos/{owner}/{repo}/dependabot/alerts` operation.
     * @param {module:model/DependabotUpdateAlertRequest} dependabotUpdateAlertRequest 
     * @param {module:api/DependabotApi~dependabotUpdateAlertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DependabotAlert}
     */
    dependabotUpdateAlert(owner, repo, alertNumber, dependabotUpdateAlertRequest, callback) {
      let postBody = dependabotUpdateAlertRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling dependabotUpdateAlert");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling dependabotUpdateAlert");
      }
      // verify the required parameter 'alertNumber' is set
      if (alertNumber === undefined || alertNumber === null) {
        throw new Error("Missing the required parameter 'alertNumber' when calling dependabotUpdateAlert");
      }
      // verify the required parameter 'dependabotUpdateAlertRequest' is set
      if (dependabotUpdateAlertRequest === undefined || dependabotUpdateAlertRequest === null) {
        throw new Error("Missing the required parameter 'dependabotUpdateAlertRequest' when calling dependabotUpdateAlert");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'alert_number': alertNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = DependabotAlert;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/dependabot/alerts/{alert_number}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
