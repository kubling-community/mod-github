/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import License from '../model/License';
import LicenseContent from '../model/LicenseContent';
import LicenseSimple from '../model/LicenseSimple';

/**
* Licenses service.
* @module api/LicensesApi
* @version 1.1.4
*/
export default class LicensesApi {

    /**
    * Constructs a new LicensesApi. 
    * @alias module:api/LicensesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the licensesGet operation.
     * @callback module:api/LicensesApi~licensesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/License} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a license
     * Gets information about a specific license. For more information, see \"[Licensing a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository).\"
     * @param {String} license 
     * @param {module:api/LicensesApi~licensesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/License}
     */
    licensesGet(license, callback) {
      let postBody = null;
      // verify the required parameter 'license' is set
      if (license === undefined || license === null) {
        throw new Error("Missing the required parameter 'license' when calling licensesGet");
      }

      let pathParams = {
        'license': license
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = License;
      return this.apiClient.callApi(
        '/licenses/{license}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licensesGetAllCommonlyUsed operation.
     * @callback module:api/LicensesApi~licensesGetAllCommonlyUsedCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LicenseSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all commonly used licenses
     * Lists the most commonly used licenses on GitHub. For more information, see \"[Licensing a repository ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository).\"
     * @param {Object} opts Optional parameters
     * @param {Boolean} [featured] 
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/LicensesApi~licensesGetAllCommonlyUsedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LicenseSimple>}
     */
    licensesGetAllCommonlyUsed(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'featured': opts['featured'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LicenseSimple];
      return this.apiClient.callApi(
        '/licenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licensesGetForRepo operation.
     * @callback module:api/LicensesApi~licensesGetForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LicenseContent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the license for a repository
     * This method returns the contents of the repository's license file, if one is detected.  This endpoint supports the following custom media types. For more information, see \"[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\"  - **`application/vnd.github.raw+json`**: Returns the raw contents of the license. - **`application/vnd.github.html+json`**: Returns the license contents in HTML. Markup languages are rendered to HTML using GitHub's open-source [Markup library](https://github.com/github/markup).
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {String} [ref] The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
     * @param {module:api/LicensesApi~licensesGetForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LicenseContent}
     */
    licensesGetForRepo(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling licensesGetForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling licensesGetForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'ref': opts['ref']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LicenseContent;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/license', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
