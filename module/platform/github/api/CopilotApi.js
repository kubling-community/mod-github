/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CopilotAddCopilotSeatsForTeams201Response from '../model/CopilotAddCopilotSeatsForTeams201Response';
import CopilotCancelCopilotSeatAssignmentForTeams200Response from '../model/CopilotCancelCopilotSeatAssignmentForTeams200Response';
import CopilotListCopilotSeats200Response from '../model/CopilotListCopilotSeats200Response';
import CopilotOrganizationDetails from '../model/CopilotOrganizationDetails';
import CopilotSeatDetails from '../model/CopilotSeatDetails';
import CopilotUsageMetrics from '../model/CopilotUsageMetrics';

/**
* Copilot service.
* @module api/CopilotApi
* @version 1.1.4
*/
export default class CopilotApi {

    /**
    * Constructs a new CopilotApi. 
    * @alias module:api/CopilotApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the copilotAddCopilotSeatsForTeams operation.
     * @callback module:api/CopilotApi~copilotAddCopilotSeatsForTeamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CopilotAddCopilotSeatsForTeams201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add teams to the Copilot subscription for an organization
     * **Note**: This endpoint is in beta and is subject to change.  Purchases a GitHub Copilot seat for all users within each specified team. The organization will be billed accordingly. For more information about Copilot pricing, see \"[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)\".  Only organization owners can configure GitHub Copilot in their organization.  In order for an admin to use this endpoint, the organization must have a Copilot Business or Enterprise subscription and a configured suggestion matching policy. For more information about setting up a Copilot subscription, see \"[Setting up a Copilot subscription for your organization](https://docs.github.com/billing/managing-billing-for-github-copilot/managing-your-github-copilot-subscription-for-your-organization-or-enterprise)\". For more information about setting a suggestion matching policy, see \"[Configuring suggestion matching policies for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-github-copilot-in-your-organization#configuring-suggestion-matching-policies-for-github-copilot-in-your-organization)\".  OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/CopilotAddCopilotSeatsForTeamsRequest} copilotAddCopilotSeatsForTeamsRequest 
     * @param {module:api/CopilotApi~copilotAddCopilotSeatsForTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CopilotAddCopilotSeatsForTeams201Response}
     */
    copilotAddCopilotSeatsForTeams(org, copilotAddCopilotSeatsForTeamsRequest, callback) {
      let postBody = copilotAddCopilotSeatsForTeamsRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling copilotAddCopilotSeatsForTeams");
      }
      // verify the required parameter 'copilotAddCopilotSeatsForTeamsRequest' is set
      if (copilotAddCopilotSeatsForTeamsRequest === undefined || copilotAddCopilotSeatsForTeamsRequest === null) {
        throw new Error("Missing the required parameter 'copilotAddCopilotSeatsForTeamsRequest' when calling copilotAddCopilotSeatsForTeams");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CopilotAddCopilotSeatsForTeams201Response;
      return this.apiClient.callApi(
        '/orgs/{org}/copilot/billing/selected_teams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copilotAddCopilotSeatsForUsers operation.
     * @callback module:api/CopilotApi~copilotAddCopilotSeatsForUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CopilotAddCopilotSeatsForTeams201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add users to the Copilot subscription for an organization
     * **Note**: This endpoint is in beta and is subject to change.  Purchases a GitHub Copilot seat for each user specified. The organization will be billed accordingly. For more information about Copilot pricing, see \"[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)\".  Only organization owners can configure GitHub Copilot in their organization.  In order for an admin to use this endpoint, the organization must have a Copilot Business or Enterprise subscription and a configured suggestion matching policy. For more information about setting up a Copilot subscription, see \"[Setting up a Copilot subscription for your organization](https://docs.github.com/billing/managing-billing-for-github-copilot/managing-your-github-copilot-subscription-for-your-organization-or-enterprise)\". For more information about setting a suggestion matching policy, see \"[Configuring suggestion matching policies for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-github-copilot-in-your-organization#configuring-suggestion-matching-policies-for-github-copilot-in-your-organization)\".  OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/CopilotAddCopilotSeatsForUsersRequest} copilotAddCopilotSeatsForUsersRequest 
     * @param {module:api/CopilotApi~copilotAddCopilotSeatsForUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CopilotAddCopilotSeatsForTeams201Response}
     */
    copilotAddCopilotSeatsForUsers(org, copilotAddCopilotSeatsForUsersRequest, callback) {
      let postBody = copilotAddCopilotSeatsForUsersRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling copilotAddCopilotSeatsForUsers");
      }
      // verify the required parameter 'copilotAddCopilotSeatsForUsersRequest' is set
      if (copilotAddCopilotSeatsForUsersRequest === undefined || copilotAddCopilotSeatsForUsersRequest === null) {
        throw new Error("Missing the required parameter 'copilotAddCopilotSeatsForUsersRequest' when calling copilotAddCopilotSeatsForUsers");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CopilotAddCopilotSeatsForTeams201Response;
      return this.apiClient.callApi(
        '/orgs/{org}/copilot/billing/selected_users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copilotCancelCopilotSeatAssignmentForTeams operation.
     * @callback module:api/CopilotApi~copilotCancelCopilotSeatAssignmentForTeamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CopilotCancelCopilotSeatAssignmentForTeams200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove teams from the Copilot subscription for an organization
     * **Note**: This endpoint is in beta and is subject to change.  Cancels the Copilot seat assignment for all members of each team specified. This will cause the members of the specified team(s) to lose access to GitHub Copilot at the end of the current billing cycle, and the organization will not be billed further for those users.  For more information about Copilot pricing, see \"[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)\".  For more information about disabling access to Copilot Business or Enterprise, see \"[Revoking access to GitHub Copilot for specific users in your organization](https://docs.github.com/copilot/managing-copilot/managing-access-for-copilot-in-your-organization#revoking-access-to-github-copilot-for-specific-users-in-your-organization)\".  Only organization owners can configure GitHub Copilot in their organization.  OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/CopilotCancelCopilotSeatAssignmentForTeamsRequest} copilotCancelCopilotSeatAssignmentForTeamsRequest 
     * @param {module:api/CopilotApi~copilotCancelCopilotSeatAssignmentForTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CopilotCancelCopilotSeatAssignmentForTeams200Response}
     */
    copilotCancelCopilotSeatAssignmentForTeams(org, copilotCancelCopilotSeatAssignmentForTeamsRequest, callback) {
      let postBody = copilotCancelCopilotSeatAssignmentForTeamsRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling copilotCancelCopilotSeatAssignmentForTeams");
      }
      // verify the required parameter 'copilotCancelCopilotSeatAssignmentForTeamsRequest' is set
      if (copilotCancelCopilotSeatAssignmentForTeamsRequest === undefined || copilotCancelCopilotSeatAssignmentForTeamsRequest === null) {
        throw new Error("Missing the required parameter 'copilotCancelCopilotSeatAssignmentForTeamsRequest' when calling copilotCancelCopilotSeatAssignmentForTeams");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CopilotCancelCopilotSeatAssignmentForTeams200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/copilot/billing/selected_teams', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copilotCancelCopilotSeatAssignmentForUsers operation.
     * @callback module:api/CopilotApi~copilotCancelCopilotSeatAssignmentForUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CopilotCancelCopilotSeatAssignmentForTeams200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove users from the Copilot subscription for an organization
     * **Note**: This endpoint is in beta and is subject to change.  Cancels the Copilot seat assignment for each user specified. This will cause the specified users to lose access to GitHub Copilot at the end of the current billing cycle, and the organization will not be billed further for those users.  For more information about Copilot pricing, see \"[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)\".  For more information about disabling access to Copilot Business or Enterprise, see \"[Revoking access to GitHub Copilot for specific users in your organization](https://docs.github.com/copilot/managing-copilot/managing-access-for-copilot-in-your-organization#revoking-access-to-github-copilot-for-specific-users-in-your-organization)\".  Only organization owners can configure GitHub Copilot in their organization.  OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/CopilotCancelCopilotSeatAssignmentForUsersRequest} copilotCancelCopilotSeatAssignmentForUsersRequest 
     * @param {module:api/CopilotApi~copilotCancelCopilotSeatAssignmentForUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CopilotCancelCopilotSeatAssignmentForTeams200Response}
     */
    copilotCancelCopilotSeatAssignmentForUsers(org, copilotCancelCopilotSeatAssignmentForUsersRequest, callback) {
      let postBody = copilotCancelCopilotSeatAssignmentForUsersRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling copilotCancelCopilotSeatAssignmentForUsers");
      }
      // verify the required parameter 'copilotCancelCopilotSeatAssignmentForUsersRequest' is set
      if (copilotCancelCopilotSeatAssignmentForUsersRequest === undefined || copilotCancelCopilotSeatAssignmentForUsersRequest === null) {
        throw new Error("Missing the required parameter 'copilotCancelCopilotSeatAssignmentForUsersRequest' when calling copilotCancelCopilotSeatAssignmentForUsers");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CopilotCancelCopilotSeatAssignmentForTeams200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/copilot/billing/selected_users', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copilotGetCopilotOrganizationDetails operation.
     * @callback module:api/CopilotApi~copilotGetCopilotOrganizationDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CopilotOrganizationDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Copilot seat information and settings for an organization
     * **Note**: This endpoint is in beta and is subject to change.  Gets information about an organization's Copilot subscription, including seat breakdown and code matching policies. To configure these settings, go to your organization's settings on GitHub.com. For more information, see \"[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-copilot-business-in-your-organization)\".  Only organization owners can configure and view details about the organization's Copilot Business subscription.  OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/CopilotApi~copilotGetCopilotOrganizationDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CopilotOrganizationDetails}
     */
    copilotGetCopilotOrganizationDetails(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling copilotGetCopilotOrganizationDetails");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CopilotOrganizationDetails;
      return this.apiClient.callApi(
        '/orgs/{org}/copilot/billing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copilotGetCopilotSeatDetailsForUser operation.
     * @callback module:api/CopilotApi~copilotGetCopilotSeatDetailsForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CopilotSeatDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Copilot seat assignment details for a user
     * **Note**: This endpoint is in beta and is subject to change.  Gets the GitHub Copilot seat assignment details for a member of an organization who currently has access to GitHub Copilot.  Organization owners can view GitHub Copilot seat assignment details for members in their organization.  OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} username The handle for the GitHub user account.
     * @param {module:api/CopilotApi~copilotGetCopilotSeatDetailsForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CopilotSeatDetails}
     */
    copilotGetCopilotSeatDetailsForUser(org, username, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling copilotGetCopilotSeatDetailsForUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling copilotGetCopilotSeatDetailsForUser");
      }

      let pathParams = {
        'org': org,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CopilotSeatDetails;
      return this.apiClient.callApi(
        '/orgs/{org}/members/{username}/copilot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copilotListCopilotSeats operation.
     * @callback module:api/CopilotApi~copilotListCopilotSeatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CopilotListCopilotSeats200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Copilot seat assignments for an organization
     * **Note**: This endpoint is in beta and is subject to change.  Lists all Copilot seat assignments for an organization that are currently being billed (either active or pending cancellation at the start of the next billing cycle).  Only organization owners can configure and view details about the organization's Copilot Business or Enterprise subscription.  OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [perPage = 50)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/CopilotApi~copilotListCopilotSeatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CopilotListCopilotSeats200Response}
     */
    copilotListCopilotSeats(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling copilotListCopilotSeats");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CopilotListCopilotSeats200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/copilot/billing/seats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copilotUsageMetricsForEnterprise operation.
     * @callback module:api/CopilotApi~copilotUsageMetricsForEnterpriseCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CopilotUsageMetrics>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a summary of Copilot usage for enterprise members
     * **Note**: This endpoint is in beta and is subject to change.  You can use this endpoint to see a daily breakdown of aggregated usage metrics for Copilot completions and Copilot Chat in the IDE for all users across organizations with access to Copilot within your enterprise, with a further breakdown of suggestions, acceptances, and number of active users by editor and language for each day. See the response schema tab for detailed metrics definitions.  The response contains metrics for the prior 28 days. Usage metrics are processed once per day for the previous day, and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics, they must have telemetry enabled in their IDE.  Only owners and billing managers can view Copilot usage metrics for the enterprise.  OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot` or `read:enterprise` scopes to use this endpoint.
     * @param {String} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param {Object} opts Optional parameters
     * @param {String} [since] Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 28 days ago.
     * @param {String} [until] Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed.
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [perPage = 28)] The number of days of metrics to display per page (max 28). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/CopilotApi~copilotUsageMetricsForEnterpriseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CopilotUsageMetrics>}
     */
    copilotUsageMetricsForEnterprise(enterprise, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'enterprise' is set
      if (enterprise === undefined || enterprise === null) {
        throw new Error("Missing the required parameter 'enterprise' when calling copilotUsageMetricsForEnterprise");
      }

      let pathParams = {
        'enterprise': enterprise
      };
      let queryParams = {
        'since': opts['since'],
        'until': opts['until'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CopilotUsageMetrics];
      return this.apiClient.callApi(
        '/enterprises/{enterprise}/copilot/usage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copilotUsageMetricsForOrg operation.
     * @callback module:api/CopilotApi~copilotUsageMetricsForOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CopilotUsageMetrics>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a summary of Copilot usage for organization members
     * **Note**: This endpoint is in beta and is subject to change.  You can use this endpoint to see a daily breakdown of aggregated usage metrics for Copilot completions and Copilot Chat in the IDE across an organization, with a further breakdown of suggestions, acceptances, and number of active users by editor and language for each day. See the response schema tab for detailed metrics definitions.  The response contains metrics for the prior 28 days. Usage metrics are processed once per day for the previous day, and the response will only include data up until yesterday. In order for an end user to be counted towards these metrics, they must have telemetry enabled in their IDE.  Organization owners, and owners and billing managers of the parent enterprise, can view Copilot usage metrics.  OAuth app tokens and personal access tokens (classic) need either the `manage_billing:copilot`, `read:org`, or `read:enterprise` scopes to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {String} [since] Show usage metrics since this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`). Maximum value is 28 days ago.
     * @param {String} [until] Show usage metrics until this date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:MM:SSZ`) and should not preceed the `since` date if it is passed.
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [perPage = 28)] The number of days of metrics to display per page (max 28). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/CopilotApi~copilotUsageMetricsForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CopilotUsageMetrics>}
     */
    copilotUsageMetricsForOrg(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling copilotUsageMetricsForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'since': opts['since'],
        'until': opts['until'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CopilotUsageMetrics];
      return this.apiClient.callApi(
        '/orgs/{org}/copilot/usage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
