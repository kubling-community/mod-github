/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActionsCacheList from '../model/ActionsCacheList';
import ActionsCacheUsageByRepository from '../model/ActionsCacheUsageByRepository';
import ActionsCacheUsageOrgEnterprise from '../model/ActionsCacheUsageOrgEnterprise';
import ActionsGenerateRunnerJitconfigForOrg201Response from '../model/ActionsGenerateRunnerJitconfigForOrg201Response';
import ActionsGetActionsCacheUsageByRepoForOrg200Response from '../model/ActionsGetActionsCacheUsageByRepoForOrg200Response';
import ActionsGetDefaultWorkflowPermissions from '../model/ActionsGetDefaultWorkflowPermissions';
import ActionsListArtifactsForRepo200Response from '../model/ActionsListArtifactsForRepo200Response';
import ActionsListJobsForWorkflowRunAttempt200Response from '../model/ActionsListJobsForWorkflowRunAttempt200Response';
import ActionsListLabelsForSelfHostedRunnerForOrg200Response from '../model/ActionsListLabelsForSelfHostedRunnerForOrg200Response';
import ActionsListOrgSecrets200Response from '../model/ActionsListOrgSecrets200Response';
import ActionsListOrgVariables200Response from '../model/ActionsListOrgVariables200Response';
import ActionsListRepoOrganizationSecrets200Response from '../model/ActionsListRepoOrganizationSecrets200Response';
import ActionsListRepoOrganizationVariables200Response from '../model/ActionsListRepoOrganizationVariables200Response';
import ActionsListRepoWorkflows200Response from '../model/ActionsListRepoWorkflows200Response';
import ActionsListSelectedReposForOrgSecret200Response from '../model/ActionsListSelectedReposForOrgSecret200Response';
import ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response from '../model/ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response';
import ActionsListSelfHostedRunnersForOrg200Response from '../model/ActionsListSelfHostedRunnersForOrg200Response';
import ActionsListWorkflowRunsForRepo200Response from '../model/ActionsListWorkflowRunsForRepo200Response';
import ActionsOrganizationPermissions from '../model/ActionsOrganizationPermissions';
import ActionsPublicKey from '../model/ActionsPublicKey';
import ActionsRepositoryPermissions from '../model/ActionsRepositoryPermissions';
import ActionsSecret from '../model/ActionsSecret';
import ActionsVariable from '../model/ActionsVariable';
import ActionsWorkflowAccessToRepository from '../model/ActionsWorkflowAccessToRepository';
import Artifact from '../model/Artifact';
import AuthenticationToken from '../model/AuthenticationToken';
import Deployment from '../model/Deployment';
import EnvironmentApprovals from '../model/EnvironmentApprovals';
import Job from '../model/Job';
import OidcCustomSubRepo from '../model/OidcCustomSubRepo';
import OrganizationActionsSecret from '../model/OrganizationActionsSecret';
import OrganizationActionsVariable from '../model/OrganizationActionsVariable';
import PendingDeployment from '../model/PendingDeployment';
import Runner from '../model/Runner';
import RunnerApplication from '../model/RunnerApplication';
import SelectedActions from '../model/SelectedActions';
import Workflow from '../model/Workflow';
import WorkflowRun from '../model/WorkflowRun';
import WorkflowRunUsage from '../model/WorkflowRunUsage';
import WorkflowUsage from '../model/WorkflowUsage';

/**
* Actions service.
* @module api/ActionsApi
* @version 1.1.4
*/
export default class ActionsApi {

    /**
    * Constructs a new ActionsApi. 
    * @alias module:api/ActionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the actionsAddCustomLabelsToSelfHostedRunnerForOrg operation.
     * @callback module:api/ActionsApi~actionsAddCustomLabelsToSelfHostedRunnerForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListLabelsForSelfHostedRunnerForOrg200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add custom labels to a self-hosted runner for an organization
     * Adds custom labels to a self-hosted runner configured in an organization.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} runnerId Unique identifier of the self-hosted runner.
     * @param {module:model/ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest} actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest 
     * @param {module:api/ActionsApi~actionsAddCustomLabelsToSelfHostedRunnerForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListLabelsForSelfHostedRunnerForOrg200Response}
     */
    actionsAddCustomLabelsToSelfHostedRunnerForOrg(org, runnerId, actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest, callback) {
      let postBody = actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsAddCustomLabelsToSelfHostedRunnerForOrg");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling actionsAddCustomLabelsToSelfHostedRunnerForOrg");
      }
      // verify the required parameter 'actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest' is set
      if (actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest === undefined || actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest === null) {
        throw new Error("Missing the required parameter 'actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest' when calling actionsAddCustomLabelsToSelfHostedRunnerForOrg");
      }

      let pathParams = {
        'org': org,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActionsListLabelsForSelfHostedRunnerForOrg200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runners/{runner_id}/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsAddCustomLabelsToSelfHostedRunnerForRepo operation.
     * @callback module:api/ActionsApi~actionsAddCustomLabelsToSelfHostedRunnerForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListLabelsForSelfHostedRunnerForOrg200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add custom labels to a self-hosted runner for a repository
     * Adds custom labels to a self-hosted runner configured in a repository.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runnerId Unique identifier of the self-hosted runner.
     * @param {module:model/ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest} actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest 
     * @param {module:api/ActionsApi~actionsAddCustomLabelsToSelfHostedRunnerForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListLabelsForSelfHostedRunnerForOrg200Response}
     */
    actionsAddCustomLabelsToSelfHostedRunnerForRepo(owner, repo, runnerId, actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest, callback) {
      let postBody = actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsAddCustomLabelsToSelfHostedRunnerForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsAddCustomLabelsToSelfHostedRunnerForRepo");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling actionsAddCustomLabelsToSelfHostedRunnerForRepo");
      }
      // verify the required parameter 'actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest' is set
      if (actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest === undefined || actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest === null) {
        throw new Error("Missing the required parameter 'actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest' when calling actionsAddCustomLabelsToSelfHostedRunnerForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActionsListLabelsForSelfHostedRunnerForOrg200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsAddSelectedRepoToOrgSecret operation.
     * @callback module:api/ActionsApi~actionsAddSelectedRepoToOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add selected repository to an organization secret
     * Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. For more information about setting the visibility, see [Create or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {Number} repositoryId 
     * @param {module:api/ActionsApi~actionsAddSelectedRepoToOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsAddSelectedRepoToOrgSecret(org, secretName, repositoryId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsAddSelectedRepoToOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsAddSelectedRepoToOrgSecret");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling actionsAddSelectedRepoToOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName,
        'repository_id': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsAddSelectedRepoToOrgVariable operation.
     * @callback module:api/ActionsApi~actionsAddSelectedRepoToOrgVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add selected repository to an organization variable
     * Adds a repository to an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} name The name of the variable.
     * @param {Number} repositoryId 
     * @param {module:api/ActionsApi~actionsAddSelectedRepoToOrgVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsAddSelectedRepoToOrgVariable(org, name, repositoryId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsAddSelectedRepoToOrgVariable");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling actionsAddSelectedRepoToOrgVariable");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling actionsAddSelectedRepoToOrgVariable");
      }

      let pathParams = {
        'org': org,
        'name': name,
        'repository_id': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/variables/{name}/repositories/{repository_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsApproveWorkflowRun operation.
     * @callback module:api/ActionsApi~actionsApproveWorkflowRunCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Approve a workflow run for a fork pull request
     * Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see [\"Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks).\"  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {module:api/ActionsApi~actionsApproveWorkflowRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    actionsApproveWorkflowRun(owner, repo, runId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsApproveWorkflowRun");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsApproveWorkflowRun");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsApproveWorkflowRun");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/approve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsCancelWorkflowRun operation.
     * @callback module:api/ActionsApi~actionsCancelWorkflowRunCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a workflow run
     * Cancels a workflow run using its `id`.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {module:api/ActionsApi~actionsCancelWorkflowRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    actionsCancelWorkflowRun(owner, repo, runId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsCancelWorkflowRun");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsCancelWorkflowRun");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsCancelWorkflowRun");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsCreateEnvironmentVariable operation.
     * @callback module:api/ActionsApi~actionsCreateEnvironmentVariableCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an environment variable
     * Create an environment variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
     * @param {module:model/ActionsCreateRepoVariableRequest} actionsCreateRepoVariableRequest 
     * @param {module:api/ActionsApi~actionsCreateEnvironmentVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    actionsCreateEnvironmentVariable(owner, repo, environmentName, actionsCreateRepoVariableRequest, callback) {
      let postBody = actionsCreateRepoVariableRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsCreateEnvironmentVariable");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsCreateEnvironmentVariable");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling actionsCreateEnvironmentVariable");
      }
      // verify the required parameter 'actionsCreateRepoVariableRequest' is set
      if (actionsCreateRepoVariableRequest === undefined || actionsCreateRepoVariableRequest === null) {
        throw new Error("Missing the required parameter 'actionsCreateRepoVariableRequest' when calling actionsCreateEnvironmentVariable");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'environment_name': environmentName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/environments/{environment_name}/variables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsCreateOrUpdateEnvironmentSecret operation.
     * @callback module:api/ActionsApi~actionsCreateOrUpdateEnvironmentSecretCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an environment secret
     * Creates or updates an environment secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
     * @param {String} secretName The name of the secret.
     * @param {module:model/ActionsCreateOrUpdateEnvironmentSecretRequest} actionsCreateOrUpdateEnvironmentSecretRequest 
     * @param {module:api/ActionsApi~actionsCreateOrUpdateEnvironmentSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    actionsCreateOrUpdateEnvironmentSecret(owner, repo, environmentName, secretName, actionsCreateOrUpdateEnvironmentSecretRequest, callback) {
      let postBody = actionsCreateOrUpdateEnvironmentSecretRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsCreateOrUpdateEnvironmentSecret");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsCreateOrUpdateEnvironmentSecret");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling actionsCreateOrUpdateEnvironmentSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsCreateOrUpdateEnvironmentSecret");
      }
      // verify the required parameter 'actionsCreateOrUpdateEnvironmentSecretRequest' is set
      if (actionsCreateOrUpdateEnvironmentSecretRequest === undefined || actionsCreateOrUpdateEnvironmentSecretRequest === null) {
        throw new Error("Missing the required parameter 'actionsCreateOrUpdateEnvironmentSecretRequest' when calling actionsCreateOrUpdateEnvironmentSecret");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'environment_name': environmentName,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsCreateOrUpdateOrgSecret operation.
     * @callback module:api/ActionsApi~actionsCreateOrUpdateOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an organization secret
     * Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:model/ActionsCreateOrUpdateOrgSecretRequest} actionsCreateOrUpdateOrgSecretRequest 
     * @param {module:api/ActionsApi~actionsCreateOrUpdateOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    actionsCreateOrUpdateOrgSecret(org, secretName, actionsCreateOrUpdateOrgSecretRequest, callback) {
      let postBody = actionsCreateOrUpdateOrgSecretRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsCreateOrUpdateOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsCreateOrUpdateOrgSecret");
      }
      // verify the required parameter 'actionsCreateOrUpdateOrgSecretRequest' is set
      if (actionsCreateOrUpdateOrgSecretRequest === undefined || actionsCreateOrUpdateOrgSecretRequest === null) {
        throw new Error("Missing the required parameter 'actionsCreateOrUpdateOrgSecretRequest' when calling actionsCreateOrUpdateOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/secrets/{secret_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsCreateOrUpdateRepoSecret operation.
     * @callback module:api/ActionsApi~actionsCreateOrUpdateRepoSecretCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a repository secret
     * Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:model/ActionsCreateOrUpdateRepoSecretRequest} actionsCreateOrUpdateRepoSecretRequest 
     * @param {module:api/ActionsApi~actionsCreateOrUpdateRepoSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    actionsCreateOrUpdateRepoSecret(owner, repo, secretName, actionsCreateOrUpdateRepoSecretRequest, callback) {
      let postBody = actionsCreateOrUpdateRepoSecretRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsCreateOrUpdateRepoSecret");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsCreateOrUpdateRepoSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsCreateOrUpdateRepoSecret");
      }
      // verify the required parameter 'actionsCreateOrUpdateRepoSecretRequest' is set
      if (actionsCreateOrUpdateRepoSecretRequest === undefined || actionsCreateOrUpdateRepoSecretRequest === null) {
        throw new Error("Missing the required parameter 'actionsCreateOrUpdateRepoSecretRequest' when calling actionsCreateOrUpdateRepoSecret");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/secrets/{secret_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsCreateOrgVariable operation.
     * @callback module:api/ActionsApi~actionsCreateOrgVariableCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an organization variable
     * Creates an organization variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/ActionsCreateOrgVariableRequest} actionsCreateOrgVariableRequest 
     * @param {module:api/ActionsApi~actionsCreateOrgVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    actionsCreateOrgVariable(org, actionsCreateOrgVariableRequest, callback) {
      let postBody = actionsCreateOrgVariableRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsCreateOrgVariable");
      }
      // verify the required parameter 'actionsCreateOrgVariableRequest' is set
      if (actionsCreateOrgVariableRequest === undefined || actionsCreateOrgVariableRequest === null) {
        throw new Error("Missing the required parameter 'actionsCreateOrgVariableRequest' when calling actionsCreateOrgVariable");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/variables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsCreateRegistrationTokenForOrg operation.
     * @callback module:api/ActionsApi~actionsCreateRegistrationTokenForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticationToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a registration token for an organization
     * Returns a token that you can pass to the `config` script. The token expires after one hour.  For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:  ``` ./config.sh --url https://github.com/octo-org --token TOKEN ```  Authenticated users must have admin access to the organization to use this endpoint.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsCreateRegistrationTokenForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthenticationToken}
     */
    actionsCreateRegistrationTokenForOrg(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsCreateRegistrationTokenForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthenticationToken;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runners/registration-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsCreateRegistrationTokenForRepo operation.
     * @callback module:api/ActionsApi~actionsCreateRegistrationTokenForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticationToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a registration token for a repository
     * Returns a token that you can pass to the `config` script. The token expires after one hour.  For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your self-hosted runner:  ``` ./config.sh --url https://github.com/octo-org --token TOKEN ```  Authenticated users must have admin access to the repository to use this endpoint.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsCreateRegistrationTokenForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthenticationToken}
     */
    actionsCreateRegistrationTokenForRepo(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsCreateRegistrationTokenForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsCreateRegistrationTokenForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthenticationToken;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runners/registration-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsCreateRemoveTokenForOrg operation.
     * @callback module:api/ActionsApi~actionsCreateRemoveTokenForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticationToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a remove token for an organization
     * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.  For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:  ``` ./config.sh remove --token TOKEN ```  Authenticated users must have admin access to the organization to use this endpoint.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsCreateRemoveTokenForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthenticationToken}
     */
    actionsCreateRemoveTokenForOrg(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsCreateRemoveTokenForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthenticationToken;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runners/remove-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsCreateRemoveTokenForRepo operation.
     * @callback module:api/ActionsApi~actionsCreateRemoveTokenForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticationToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a remove token for a repository
     * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an repository. The token expires after one hour.  For example, you can replace `TOKEN` in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:  ``` ./config.sh remove --token TOKEN ```  Authenticated users must have admin access to the repository to use this endpoint.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsCreateRemoveTokenForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthenticationToken}
     */
    actionsCreateRemoveTokenForRepo(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsCreateRemoveTokenForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsCreateRemoveTokenForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthenticationToken;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runners/remove-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsCreateRepoVariable operation.
     * @callback module:api/ActionsApi~actionsCreateRepoVariableCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a repository variable
     * Creates a repository variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:model/ActionsCreateRepoVariableRequest} actionsCreateRepoVariableRequest 
     * @param {module:api/ActionsApi~actionsCreateRepoVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    actionsCreateRepoVariable(owner, repo, actionsCreateRepoVariableRequest, callback) {
      let postBody = actionsCreateRepoVariableRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsCreateRepoVariable");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsCreateRepoVariable");
      }
      // verify the required parameter 'actionsCreateRepoVariableRequest' is set
      if (actionsCreateRepoVariableRequest === undefined || actionsCreateRepoVariableRequest === null) {
        throw new Error("Missing the required parameter 'actionsCreateRepoVariableRequest' when calling actionsCreateRepoVariable");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/variables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsCreateWorkflowDispatch operation.
     * @callback module:api/ActionsApi~actionsCreateWorkflowDispatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a workflow dispatch event
     * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see \"[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\"  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:model/ActionsGetWorkflowWorkflowIdParameter} workflowId The ID of the workflow. You can also pass the workflow file name as a string.
     * @param {module:model/ActionsCreateWorkflowDispatchRequest} actionsCreateWorkflowDispatchRequest 
     * @param {module:api/ActionsApi~actionsCreateWorkflowDispatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsCreateWorkflowDispatch(owner, repo, workflowId, actionsCreateWorkflowDispatchRequest, callback) {
      let postBody = actionsCreateWorkflowDispatchRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsCreateWorkflowDispatch");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsCreateWorkflowDispatch");
      }
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling actionsCreateWorkflowDispatch");
      }
      // verify the required parameter 'actionsCreateWorkflowDispatchRequest' is set
      if (actionsCreateWorkflowDispatchRequest === undefined || actionsCreateWorkflowDispatchRequest === null) {
        throw new Error("Missing the required parameter 'actionsCreateWorkflowDispatchRequest' when calling actionsCreateWorkflowDispatch");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'workflow_id': workflowId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDeleteActionsCacheById operation.
     * @callback module:api/ActionsApi~actionsDeleteActionsCacheByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a GitHub Actions cache for a repository (using a cache ID)
     * Deletes a GitHub Actions cache for a repository, using a cache ID.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} cacheId The unique identifier of the GitHub Actions cache.
     * @param {module:api/ActionsApi~actionsDeleteActionsCacheByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDeleteActionsCacheById(owner, repo, cacheId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsDeleteActionsCacheById");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsDeleteActionsCacheById");
      }
      // verify the required parameter 'cacheId' is set
      if (cacheId === undefined || cacheId === null) {
        throw new Error("Missing the required parameter 'cacheId' when calling actionsDeleteActionsCacheById");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'cache_id': cacheId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/caches/{cache_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDeleteActionsCacheByKey operation.
     * @callback module:api/ActionsApi~actionsDeleteActionsCacheByKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsCacheList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete GitHub Actions caches for a repository (using a cache key)
     * Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} key A key for identifying the cache.
     * @param {Object} opts Optional parameters
     * @param {String} [ref] The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
     * @param {module:api/ActionsApi~actionsDeleteActionsCacheByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsCacheList}
     */
    actionsDeleteActionsCacheByKey(owner, repo, key, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsDeleteActionsCacheByKey");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsDeleteActionsCacheByKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling actionsDeleteActionsCacheByKey");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'key': key,
        'ref': opts['ref']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsCacheList;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/caches', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDeleteArtifact operation.
     * @callback module:api/ActionsApi~actionsDeleteArtifactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an artifact
     * Deletes an artifact for a workflow run. OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} artifactId The unique identifier of the artifact.
     * @param {module:api/ActionsApi~actionsDeleteArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDeleteArtifact(owner, repo, artifactId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsDeleteArtifact");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsDeleteArtifact");
      }
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling actionsDeleteArtifact");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'artifact_id': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDeleteEnvironmentSecret operation.
     * @callback module:api/ActionsApi~actionsDeleteEnvironmentSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an environment secret
     * Deletes a secret in an environment using the secret name.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
     * @param {String} secretName The name of the secret.
     * @param {module:api/ActionsApi~actionsDeleteEnvironmentSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDeleteEnvironmentSecret(owner, repo, environmentName, secretName, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsDeleteEnvironmentSecret");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsDeleteEnvironmentSecret");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling actionsDeleteEnvironmentSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsDeleteEnvironmentSecret");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'environment_name': environmentName,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDeleteEnvironmentVariable operation.
     * @callback module:api/ActionsApi~actionsDeleteEnvironmentVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an environment variable
     * Deletes an environment variable using the variable name.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} name The name of the variable.
     * @param {String} environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
     * @param {module:api/ActionsApi~actionsDeleteEnvironmentVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDeleteEnvironmentVariable(owner, repo, name, environmentName, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsDeleteEnvironmentVariable");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsDeleteEnvironmentVariable");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling actionsDeleteEnvironmentVariable");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling actionsDeleteEnvironmentVariable");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'name': name,
        'environment_name': environmentName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDeleteOrgSecret operation.
     * @callback module:api/ActionsApi~actionsDeleteOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an organization secret
     * Deletes a secret in an organization using the secret name.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:api/ActionsApi~actionsDeleteOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDeleteOrgSecret(org, secretName, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsDeleteOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsDeleteOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/secrets/{secret_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDeleteOrgVariable operation.
     * @callback module:api/ActionsApi~actionsDeleteOrgVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an organization variable
     * Deletes an organization variable using the variable name.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} name The name of the variable.
     * @param {module:api/ActionsApi~actionsDeleteOrgVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDeleteOrgVariable(org, name, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsDeleteOrgVariable");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling actionsDeleteOrgVariable");
      }

      let pathParams = {
        'org': org,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/variables/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDeleteRepoSecret operation.
     * @callback module:api/ActionsApi~actionsDeleteRepoSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a repository secret
     * Deletes a secret in a repository using the secret name.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:api/ActionsApi~actionsDeleteRepoSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDeleteRepoSecret(owner, repo, secretName, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsDeleteRepoSecret");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsDeleteRepoSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsDeleteRepoSecret");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/secrets/{secret_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDeleteRepoVariable operation.
     * @callback module:api/ActionsApi~actionsDeleteRepoVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a repository variable
     * Deletes a repository variable using the variable name.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} name The name of the variable.
     * @param {module:api/ActionsApi~actionsDeleteRepoVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDeleteRepoVariable(owner, repo, name, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsDeleteRepoVariable");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsDeleteRepoVariable");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling actionsDeleteRepoVariable");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/variables/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDeleteSelfHostedRunnerFromOrg operation.
     * @callback module:api/ActionsApi~actionsDeleteSelfHostedRunnerFromOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a self-hosted runner from an organization
     * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} runnerId Unique identifier of the self-hosted runner.
     * @param {module:api/ActionsApi~actionsDeleteSelfHostedRunnerFromOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDeleteSelfHostedRunnerFromOrg(org, runnerId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsDeleteSelfHostedRunnerFromOrg");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling actionsDeleteSelfHostedRunnerFromOrg");
      }

      let pathParams = {
        'org': org,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runners/{runner_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDeleteSelfHostedRunnerFromRepo operation.
     * @callback module:api/ActionsApi~actionsDeleteSelfHostedRunnerFromRepoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a self-hosted runner from a repository
     * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runnerId Unique identifier of the self-hosted runner.
     * @param {module:api/ActionsApi~actionsDeleteSelfHostedRunnerFromRepoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDeleteSelfHostedRunnerFromRepo(owner, repo, runnerId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsDeleteSelfHostedRunnerFromRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsDeleteSelfHostedRunnerFromRepo");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling actionsDeleteSelfHostedRunnerFromRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runners/{runner_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDeleteWorkflowRun operation.
     * @callback module:api/ActionsApi~actionsDeleteWorkflowRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a workflow run
     * Deletes a specific workflow run.  Anyone with write access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {module:api/ActionsApi~actionsDeleteWorkflowRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDeleteWorkflowRun(owner, repo, runId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsDeleteWorkflowRun");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsDeleteWorkflowRun");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsDeleteWorkflowRun");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDeleteWorkflowRunLogs operation.
     * @callback module:api/ActionsApi~actionsDeleteWorkflowRunLogsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete workflow run logs
     * Deletes all logs for a workflow run.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {module:api/ActionsApi~actionsDeleteWorkflowRunLogsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDeleteWorkflowRunLogs(owner, repo, runId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsDeleteWorkflowRunLogs");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsDeleteWorkflowRunLogs");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsDeleteWorkflowRunLogs");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/logs', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDisableSelectedRepositoryGithubActionsOrganization operation.
     * @callback module:api/ActionsApi~actionsDisableSelectedRepositoryGithubActionsOrganizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a selected repository for GitHub Actions in an organization
     * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} repositoryId The unique identifier of the repository.
     * @param {module:api/ActionsApi~actionsDisableSelectedRepositoryGithubActionsOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDisableSelectedRepositoryGithubActionsOrganization(org, repositoryId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsDisableSelectedRepositoryGithubActionsOrganization");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling actionsDisableSelectedRepositoryGithubActionsOrganization");
      }

      let pathParams = {
        'org': org,
        'repository_id': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/permissions/repositories/{repository_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDisableWorkflow operation.
     * @callback module:api/ActionsApi~actionsDisableWorkflowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a workflow
     * Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:model/ActionsGetWorkflowWorkflowIdParameter} workflowId The ID of the workflow. You can also pass the workflow file name as a string.
     * @param {module:api/ActionsApi~actionsDisableWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDisableWorkflow(owner, repo, workflowId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsDisableWorkflow");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsDisableWorkflow");
      }
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling actionsDisableWorkflow");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'workflow_id': workflowId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDownloadArtifact operation.
     * @callback module:api/ActionsApi~actionsDownloadArtifactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download an artifact
     * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in the response header to find the URL for the download. The `:archive_format` must be `zip`.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} artifactId The unique identifier of the artifact.
     * @param {String} archiveFormat 
     * @param {module:api/ActionsApi~actionsDownloadArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDownloadArtifact(owner, repo, artifactId, archiveFormat, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsDownloadArtifact");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsDownloadArtifact");
      }
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling actionsDownloadArtifact");
      }
      // verify the required parameter 'archiveFormat' is set
      if (archiveFormat === undefined || archiveFormat === null) {
        throw new Error("Missing the required parameter 'archiveFormat' when calling actionsDownloadArtifact");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'artifact_id': artifactId,
        'archive_format': archiveFormat
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDownloadJobLogsForWorkflowRun operation.
     * @callback module:api/ActionsApi~actionsDownloadJobLogsForWorkflowRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download job logs for a workflow run
     * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look for `Location:` in the response header to find the URL for the download.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} jobId The unique identifier of the job.
     * @param {module:api/ActionsApi~actionsDownloadJobLogsForWorkflowRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDownloadJobLogsForWorkflowRun(owner, repo, jobId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsDownloadJobLogsForWorkflowRun");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsDownloadJobLogsForWorkflowRun");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling actionsDownloadJobLogsForWorkflowRun");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/jobs/{job_id}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDownloadWorkflowRunAttemptLogs operation.
     * @callback module:api/ActionsApi~actionsDownloadWorkflowRunAttemptLogsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download workflow run attempt logs
     * Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after 1 minute. Look for `Location:` in the response header to find the URL for the download.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {Number} attemptNumber The attempt number of the workflow run.
     * @param {module:api/ActionsApi~actionsDownloadWorkflowRunAttemptLogsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDownloadWorkflowRunAttemptLogs(owner, repo, runId, attemptNumber, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsDownloadWorkflowRunAttemptLogs");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsDownloadWorkflowRunAttemptLogs");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsDownloadWorkflowRunAttemptLogs");
      }
      // verify the required parameter 'attemptNumber' is set
      if (attemptNumber === undefined || attemptNumber === null) {
        throw new Error("Missing the required parameter 'attemptNumber' when calling actionsDownloadWorkflowRunAttemptLogs");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId,
        'attempt_number': attemptNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsDownloadWorkflowRunLogs operation.
     * @callback module:api/ActionsApi~actionsDownloadWorkflowRunLogsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download workflow run logs
     * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for `Location:` in the response header to find the URL for the download.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {module:api/ActionsApi~actionsDownloadWorkflowRunLogsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsDownloadWorkflowRunLogs(owner, repo, runId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsDownloadWorkflowRunLogs");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsDownloadWorkflowRunLogs");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsDownloadWorkflowRunLogs");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsEnableSelectedRepositoryGithubActionsOrganization operation.
     * @callback module:api/ActionsApi~actionsEnableSelectedRepositoryGithubActionsOrganizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a selected repository for GitHub Actions in an organization
     * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} repositoryId The unique identifier of the repository.
     * @param {module:api/ActionsApi~actionsEnableSelectedRepositoryGithubActionsOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsEnableSelectedRepositoryGithubActionsOrganization(org, repositoryId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsEnableSelectedRepositoryGithubActionsOrganization");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling actionsEnableSelectedRepositoryGithubActionsOrganization");
      }

      let pathParams = {
        'org': org,
        'repository_id': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/permissions/repositories/{repository_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsEnableWorkflow operation.
     * @callback module:api/ActionsApi~actionsEnableWorkflowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a workflow
     * Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:model/ActionsGetWorkflowWorkflowIdParameter} workflowId The ID of the workflow. You can also pass the workflow file name as a string.
     * @param {module:api/ActionsApi~actionsEnableWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsEnableWorkflow(owner, repo, workflowId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsEnableWorkflow");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsEnableWorkflow");
      }
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling actionsEnableWorkflow");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'workflow_id': workflowId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsForceCancelWorkflowRun operation.
     * @callback module:api/ActionsApi~actionsForceCancelWorkflowRunCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Force cancel a workflow run
     * Cancels a workflow run and bypasses conditions that would otherwise cause a workflow execution to continue, such as an `always()` condition on a job. You should only use this endpoint to cancel a workflow run when the workflow run is not responding to [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel`](/rest/actions/workflow-runs#cancel-a-workflow-run).  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {module:api/ActionsApi~actionsForceCancelWorkflowRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    actionsForceCancelWorkflowRun(owner, repo, runId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsForceCancelWorkflowRun");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsForceCancelWorkflowRun");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsForceCancelWorkflowRun");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGenerateRunnerJitconfigForOrg operation.
     * @callback module:api/ActionsApi~actionsGenerateRunnerJitconfigForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsGenerateRunnerJitconfigForOrg201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create configuration for a just-in-time runner for an organization
     * Generates a configuration that can be passed to the runner application at startup.  The authenticated user must have admin access to the organization.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/ActionsGenerateRunnerJitconfigForOrgRequest} actionsGenerateRunnerJitconfigForOrgRequest 
     * @param {module:api/ActionsApi~actionsGenerateRunnerJitconfigForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsGenerateRunnerJitconfigForOrg201Response}
     */
    actionsGenerateRunnerJitconfigForOrg(org, actionsGenerateRunnerJitconfigForOrgRequest, callback) {
      let postBody = actionsGenerateRunnerJitconfigForOrgRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsGenerateRunnerJitconfigForOrg");
      }
      // verify the required parameter 'actionsGenerateRunnerJitconfigForOrgRequest' is set
      if (actionsGenerateRunnerJitconfigForOrgRequest === undefined || actionsGenerateRunnerJitconfigForOrgRequest === null) {
        throw new Error("Missing the required parameter 'actionsGenerateRunnerJitconfigForOrgRequest' when calling actionsGenerateRunnerJitconfigForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActionsGenerateRunnerJitconfigForOrg201Response;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runners/generate-jitconfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGenerateRunnerJitconfigForRepo operation.
     * @callback module:api/ActionsApi~actionsGenerateRunnerJitconfigForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsGenerateRunnerJitconfigForOrg201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create configuration for a just-in-time runner for a repository
     * Generates a configuration that can be passed to the runner application at startup.  The authenticated user must have admin access to the repository.  OAuth tokens and personal access tokens (classic) need the`repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:model/ActionsGenerateRunnerJitconfigForOrgRequest} actionsGenerateRunnerJitconfigForOrgRequest 
     * @param {module:api/ActionsApi~actionsGenerateRunnerJitconfigForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsGenerateRunnerJitconfigForOrg201Response}
     */
    actionsGenerateRunnerJitconfigForRepo(owner, repo, actionsGenerateRunnerJitconfigForOrgRequest, callback) {
      let postBody = actionsGenerateRunnerJitconfigForOrgRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGenerateRunnerJitconfigForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGenerateRunnerJitconfigForRepo");
      }
      // verify the required parameter 'actionsGenerateRunnerJitconfigForOrgRequest' is set
      if (actionsGenerateRunnerJitconfigForOrgRequest === undefined || actionsGenerateRunnerJitconfigForOrgRequest === null) {
        throw new Error("Missing the required parameter 'actionsGenerateRunnerJitconfigForOrgRequest' when calling actionsGenerateRunnerJitconfigForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActionsGenerateRunnerJitconfigForOrg201Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runners/generate-jitconfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetActionsCacheList operation.
     * @callback module:api/ActionsApi~actionsGetActionsCacheListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsCacheList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List GitHub Actions caches for a repository
     * Lists the GitHub Actions caches for a repository.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {String} [ref] The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
     * @param {String} [key] An explicit key or prefix for identifying the cache
     * @param {module:model/String} [sort = 'last_accessed_at')] The property to sort the results by. `created_at` means when the cache was created. `last_accessed_at` means when the cache was last accessed. `size_in_bytes` is the size of the cache in bytes.
     * @param {module:model/String} [direction = 'desc')] The direction to sort the results by.
     * @param {module:api/ActionsApi~actionsGetActionsCacheListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsCacheList}
     */
    actionsGetActionsCacheList(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetActionsCacheList");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetActionsCacheList");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page'],
        'ref': opts['ref'],
        'key': opts['key'],
        'sort': opts['sort'],
        'direction': opts['direction']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsCacheList;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/caches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetActionsCacheUsage operation.
     * @callback module:api/ActionsApi~actionsGetActionsCacheUsageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsCacheUsageByRepository} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get GitHub Actions cache usage for a repository
     * Gets GitHub Actions cache usage for a repository. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsGetActionsCacheUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsCacheUsageByRepository}
     */
    actionsGetActionsCacheUsage(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetActionsCacheUsage");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetActionsCacheUsage");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsCacheUsageByRepository;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/cache/usage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetActionsCacheUsageByRepoForOrg operation.
     * @callback module:api/ActionsApi~actionsGetActionsCacheUsageByRepoForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsGetActionsCacheUsageByRepoForOrg200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repositories with GitHub Actions cache usage for an organization
     * Lists repositories and their GitHub Actions cache usage for an organization. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.  OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/ActionsApi~actionsGetActionsCacheUsageByRepoForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsGetActionsCacheUsageByRepoForOrg200Response}
     */
    actionsGetActionsCacheUsageByRepoForOrg(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsGetActionsCacheUsageByRepoForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsGetActionsCacheUsageByRepoForOrg200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/cache/usage-by-repository', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetActionsCacheUsageForOrg operation.
     * @callback module:api/ActionsApi~actionsGetActionsCacheUsageForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsCacheUsageOrgEnterprise} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get GitHub Actions cache usage for an organization
     * Gets the total GitHub Actions cache usage for an organization. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.  OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsGetActionsCacheUsageForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsCacheUsageOrgEnterprise}
     */
    actionsGetActionsCacheUsageForOrg(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsGetActionsCacheUsageForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsCacheUsageOrgEnterprise;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/cache/usage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetAllowedActionsOrganization operation.
     * @callback module:api/ActionsApi~actionsGetAllowedActionsOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SelectedActions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get allowed actions and reusable workflows for an organization
     * Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsGetAllowedActionsOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SelectedActions}
     */
    actionsGetAllowedActionsOrganization(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsGetAllowedActionsOrganization");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SelectedActions;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/permissions/selected-actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetAllowedActionsRepository operation.
     * @callback module:api/ActionsApi~actionsGetAllowedActionsRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SelectedActions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get allowed actions and reusable workflows for a repository
     * Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsGetAllowedActionsRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SelectedActions}
     */
    actionsGetAllowedActionsRepository(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetAllowedActionsRepository");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetAllowedActionsRepository");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SelectedActions;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/permissions/selected-actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetArtifact operation.
     * @callback module:api/ActionsApi~actionsGetArtifactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Artifact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an artifact
     * Gets a specific artifact for a workflow run.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} artifactId The unique identifier of the artifact.
     * @param {module:api/ActionsApi~actionsGetArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Artifact}
     */
    actionsGetArtifact(owner, repo, artifactId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetArtifact");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetArtifact");
      }
      // verify the required parameter 'artifactId' is set
      if (artifactId === undefined || artifactId === null) {
        throw new Error("Missing the required parameter 'artifactId' when calling actionsGetArtifact");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'artifact_id': artifactId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Artifact;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetCustomOidcSubClaimForRepo operation.
     * @callback module:api/ActionsApi~actionsGetCustomOidcSubClaimForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OidcCustomSubRepo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the customization template for an OIDC subject claim for a repository
     * Gets the customization template for an OpenID Connect (OIDC) subject claim.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsGetCustomOidcSubClaimForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OidcCustomSubRepo}
     */
    actionsGetCustomOidcSubClaimForRepo(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetCustomOidcSubClaimForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetCustomOidcSubClaimForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = OidcCustomSubRepo;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/oidc/customization/sub', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetEnvironmentPublicKey operation.
     * @callback module:api/ActionsApi~actionsGetEnvironmentPublicKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsPublicKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an environment public key
     * Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
     * @param {module:api/ActionsApi~actionsGetEnvironmentPublicKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsPublicKey}
     */
    actionsGetEnvironmentPublicKey(owner, repo, environmentName, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetEnvironmentPublicKey");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetEnvironmentPublicKey");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling actionsGetEnvironmentPublicKey");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'environment_name': environmentName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsPublicKey;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetEnvironmentSecret operation.
     * @callback module:api/ActionsApi~actionsGetEnvironmentSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsSecret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an environment secret
     * Gets a single environment secret without revealing its encrypted value.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
     * @param {String} secretName The name of the secret.
     * @param {module:api/ActionsApi~actionsGetEnvironmentSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsSecret}
     */
    actionsGetEnvironmentSecret(owner, repo, environmentName, secretName, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetEnvironmentSecret");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetEnvironmentSecret");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling actionsGetEnvironmentSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsGetEnvironmentSecret");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'environment_name': environmentName,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsSecret;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetEnvironmentVariable operation.
     * @callback module:api/ActionsApi~actionsGetEnvironmentVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an environment variable
     * Gets a specific variable in an environment.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
     * @param {String} name The name of the variable.
     * @param {module:api/ActionsApi~actionsGetEnvironmentVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsVariable}
     */
    actionsGetEnvironmentVariable(owner, repo, environmentName, name, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetEnvironmentVariable");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetEnvironmentVariable");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling actionsGetEnvironmentVariable");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling actionsGetEnvironmentVariable");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'environment_name': environmentName,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsVariable;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetGithubActionsDefaultWorkflowPermissionsOrganization operation.
     * @callback module:api/ActionsApi~actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsGetDefaultWorkflowPermissions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get default workflow permissions for an organization
     * Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, as well as whether GitHub Actions can submit approving pull request reviews. For more information, see \"[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\"  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsGetDefaultWorkflowPermissions}
     */
    actionsGetGithubActionsDefaultWorkflowPermissionsOrganization(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsGetGithubActionsDefaultWorkflowPermissionsOrganization");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsGetDefaultWorkflowPermissions;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/permissions/workflow', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetGithubActionsDefaultWorkflowPermissionsRepository operation.
     * @callback module:api/ActionsApi~actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsGetDefaultWorkflowPermissions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get default workflow permissions for a repository
     * Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, as well as if GitHub Actions can submit approving pull request reviews. For more information, see \"[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\"  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsGetDefaultWorkflowPermissions}
     */
    actionsGetGithubActionsDefaultWorkflowPermissionsRepository(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetGithubActionsDefaultWorkflowPermissionsRepository");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetGithubActionsDefaultWorkflowPermissionsRepository");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsGetDefaultWorkflowPermissions;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/permissions/workflow', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetGithubActionsPermissionsOrganization operation.
     * @callback module:api/ActionsApi~actionsGetGithubActionsPermissionsOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsOrganizationPermissions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get GitHub Actions permissions for an organization
     * Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.  OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsGetGithubActionsPermissionsOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsOrganizationPermissions}
     */
    actionsGetGithubActionsPermissionsOrganization(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsGetGithubActionsPermissionsOrganization");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsOrganizationPermissions;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetGithubActionsPermissionsRepository operation.
     * @callback module:api/ActionsApi~actionsGetGithubActionsPermissionsRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsRepositoryPermissions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get GitHub Actions permissions for a repository
     * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.  OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsGetGithubActionsPermissionsRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsRepositoryPermissions}
     */
    actionsGetGithubActionsPermissionsRepository(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetGithubActionsPermissionsRepository");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetGithubActionsPermissionsRepository");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsRepositoryPermissions;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetJobForWorkflowRun operation.
     * @callback module:api/ActionsApi~actionsGetJobForWorkflowRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a job for a workflow run
     * Gets a specific job in a workflow run.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} jobId The unique identifier of the job.
     * @param {module:api/ActionsApi~actionsGetJobForWorkflowRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Job}
     */
    actionsGetJobForWorkflowRun(owner, repo, jobId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetJobForWorkflowRun");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetJobForWorkflowRun");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling actionsGetJobForWorkflowRun");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Job;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/jobs/{job_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetOrgPublicKey operation.
     * @callback module:api/ActionsApi~actionsGetOrgPublicKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsPublicKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an organization public key
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.  The authenticated user must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsGetOrgPublicKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsPublicKey}
     */
    actionsGetOrgPublicKey(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsGetOrgPublicKey");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsPublicKey;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/secrets/public-key', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetOrgSecret operation.
     * @callback module:api/ActionsApi~actionsGetOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationActionsSecret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an organization secret
     * Gets a single organization secret without revealing its encrypted value.  The authenticated user must have collaborator access to a repository to create, update, or read secrets  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:api/ActionsApi~actionsGetOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationActionsSecret}
     */
    actionsGetOrgSecret(org, secretName, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsGetOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsGetOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrganizationActionsSecret;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/secrets/{secret_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetOrgVariable operation.
     * @callback module:api/ActionsApi~actionsGetOrgVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationActionsVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an organization variable
     * Gets a specific variable in an organization.  The authenticated user must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} name The name of the variable.
     * @param {module:api/ActionsApi~actionsGetOrgVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationActionsVariable}
     */
    actionsGetOrgVariable(org, name, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsGetOrgVariable");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling actionsGetOrgVariable");
      }

      let pathParams = {
        'org': org,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrganizationActionsVariable;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/variables/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetPendingDeploymentsForRun operation.
     * @callback module:api/ActionsApi~actionsGetPendingDeploymentsForRunCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PendingDeployment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pending deployments for a workflow run
     * Get all deployment environments for a workflow run that are waiting for protection rules to pass.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {module:api/ActionsApi~actionsGetPendingDeploymentsForRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PendingDeployment>}
     */
    actionsGetPendingDeploymentsForRun(owner, repo, runId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetPendingDeploymentsForRun");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetPendingDeploymentsForRun");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsGetPendingDeploymentsForRun");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PendingDeployment];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetRepoPublicKey operation.
     * @callback module:api/ActionsApi~actionsGetRepoPublicKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsPublicKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a repository public key
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsGetRepoPublicKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsPublicKey}
     */
    actionsGetRepoPublicKey(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetRepoPublicKey");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetRepoPublicKey");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsPublicKey;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/secrets/public-key', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetRepoSecret operation.
     * @callback module:api/ActionsApi~actionsGetRepoSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsSecret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a repository secret
     * Gets a single repository secret without revealing its encrypted value.  The authenticated user must have collaborator access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:api/ActionsApi~actionsGetRepoSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsSecret}
     */
    actionsGetRepoSecret(owner, repo, secretName, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetRepoSecret");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetRepoSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsGetRepoSecret");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsSecret;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/secrets/{secret_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetRepoVariable operation.
     * @callback module:api/ActionsApi~actionsGetRepoVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a repository variable
     * Gets a specific variable in a repository.  The authenticated user must have collaborator access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} name The name of the variable.
     * @param {module:api/ActionsApi~actionsGetRepoVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsVariable}
     */
    actionsGetRepoVariable(owner, repo, name, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetRepoVariable");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetRepoVariable");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling actionsGetRepoVariable");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsVariable;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/variables/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetReviewsForRun operation.
     * @callback module:api/ActionsApi~actionsGetReviewsForRunCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EnvironmentApprovals>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the review history for a workflow run
     * Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {module:api/ActionsApi~actionsGetReviewsForRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EnvironmentApprovals>}
     */
    actionsGetReviewsForRun(owner, repo, runId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetReviewsForRun");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetReviewsForRun");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsGetReviewsForRun");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [EnvironmentApprovals];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/approvals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetSelfHostedRunnerForOrg operation.
     * @callback module:api/ActionsApi~actionsGetSelfHostedRunnerForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Runner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a self-hosted runner for an organization
     * Gets a specific self-hosted runner configured in an organization.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} runnerId Unique identifier of the self-hosted runner.
     * @param {module:api/ActionsApi~actionsGetSelfHostedRunnerForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Runner}
     */
    actionsGetSelfHostedRunnerForOrg(org, runnerId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsGetSelfHostedRunnerForOrg");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling actionsGetSelfHostedRunnerForOrg");
      }

      let pathParams = {
        'org': org,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Runner;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runners/{runner_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetSelfHostedRunnerForRepo operation.
     * @callback module:api/ActionsApi~actionsGetSelfHostedRunnerForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Runner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a self-hosted runner for a repository
     * Gets a specific self-hosted runner configured in a repository.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runnerId Unique identifier of the self-hosted runner.
     * @param {module:api/ActionsApi~actionsGetSelfHostedRunnerForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Runner}
     */
    actionsGetSelfHostedRunnerForRepo(owner, repo, runnerId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetSelfHostedRunnerForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetSelfHostedRunnerForRepo");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling actionsGetSelfHostedRunnerForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Runner;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runners/{runner_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetWorkflow operation.
     * @callback module:api/ActionsApi~actionsGetWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Workflow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a workflow
     * Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:model/ActionsGetWorkflowWorkflowIdParameter} workflowId The ID of the workflow. You can also pass the workflow file name as a string.
     * @param {module:api/ActionsApi~actionsGetWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Workflow}
     */
    actionsGetWorkflow(owner, repo, workflowId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetWorkflow");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetWorkflow");
      }
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling actionsGetWorkflow");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'workflow_id': workflowId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Workflow;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/workflows/{workflow_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetWorkflowAccessToRepository operation.
     * @callback module:api/ActionsApi~actionsGetWorkflowAccessToRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsWorkflowAccessToRepository} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the level of access for workflows outside of the repository
     * Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository. This endpoint only applies to private repositories. For more information, see \"[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository).\"  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsGetWorkflowAccessToRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsWorkflowAccessToRepository}
     */
    actionsGetWorkflowAccessToRepository(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetWorkflowAccessToRepository");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetWorkflowAccessToRepository");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsWorkflowAccessToRepository;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/permissions/access', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetWorkflowRun operation.
     * @callback module:api/ActionsApi~actionsGetWorkflowRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a workflow run
     * Gets a specific workflow run.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [excludePullRequests = false)] If `true` pull requests are omitted from the response (empty array).
     * @param {module:api/ActionsApi~actionsGetWorkflowRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowRun}
     */
    actionsGetWorkflowRun(owner, repo, runId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetWorkflowRun");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetWorkflowRun");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsGetWorkflowRun");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
        'exclude_pull_requests': opts['excludePullRequests']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowRun;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetWorkflowRunAttempt operation.
     * @callback module:api/ActionsApi~actionsGetWorkflowRunAttemptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowRun} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a workflow run attempt
     * Gets a specific workflow run attempt.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {Number} attemptNumber The attempt number of the workflow run.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [excludePullRequests = false)] If `true` pull requests are omitted from the response (empty array).
     * @param {module:api/ActionsApi~actionsGetWorkflowRunAttemptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowRun}
     */
    actionsGetWorkflowRunAttempt(owner, repo, runId, attemptNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetWorkflowRunAttempt");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetWorkflowRunAttempt");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsGetWorkflowRunAttempt");
      }
      // verify the required parameter 'attemptNumber' is set
      if (attemptNumber === undefined || attemptNumber === null) {
        throw new Error("Missing the required parameter 'attemptNumber' when calling actionsGetWorkflowRunAttempt");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId,
        'attempt_number': attemptNumber
      };
      let queryParams = {
        'exclude_pull_requests': opts['excludePullRequests']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowRun;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetWorkflowRunUsage operation.
     * @callback module:api/ActionsApi~actionsGetWorkflowRunUsageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowRunUsage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get workflow run usage
     * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {module:api/ActionsApi~actionsGetWorkflowRunUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowRunUsage}
     */
    actionsGetWorkflowRunUsage(owner, repo, runId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetWorkflowRunUsage");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetWorkflowRunUsage");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsGetWorkflowRunUsage");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowRunUsage;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/timing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetWorkflowUsage operation.
     * @callback module:api/ActionsApi~actionsGetWorkflowUsageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowUsage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get workflow usage
     * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \"[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\".  You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:model/ActionsGetWorkflowWorkflowIdParameter} workflowId The ID of the workflow. You can also pass the workflow file name as a string.
     * @param {module:api/ActionsApi~actionsGetWorkflowUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowUsage}
     */
    actionsGetWorkflowUsage(owner, repo, workflowId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsGetWorkflowUsage");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsGetWorkflowUsage");
      }
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling actionsGetWorkflowUsage");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'workflow_id': workflowId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowUsage;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListArtifactsForRepo operation.
     * @callback module:api/ActionsApi~actionsListArtifactsForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListArtifactsForRepo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List artifacts for a repository
     * Lists all artifacts for a repository.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {String} [name] The name field of an artifact. When specified, only artifacts with this name will be returned.
     * @param {module:api/ActionsApi~actionsListArtifactsForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListArtifactsForRepo200Response}
     */
    actionsListArtifactsForRepo(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsListArtifactsForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsListArtifactsForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListArtifactsForRepo200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/artifacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListEnvironmentSecrets operation.
     * @callback module:api/ActionsApi~actionsListEnvironmentSecretsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListRepoOrganizationSecrets200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List environment secrets
     * Lists all secrets available in an environment without revealing their encrypted values.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/ActionsApi~actionsListEnvironmentSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListRepoOrganizationSecrets200Response}
     */
    actionsListEnvironmentSecrets(owner, repo, environmentName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsListEnvironmentSecrets");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsListEnvironmentSecrets");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling actionsListEnvironmentSecrets");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'environment_name': environmentName
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListRepoOrganizationSecrets200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/environments/{environment_name}/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListEnvironmentVariables operation.
     * @callback module:api/ActionsApi~actionsListEnvironmentVariablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListRepoOrganizationVariables200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List environment variables
     * Lists all environment variables.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 10)] The number of results per page (max 30). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/ActionsApi~actionsListEnvironmentVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListRepoOrganizationVariables200Response}
     */
    actionsListEnvironmentVariables(owner, repo, environmentName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsListEnvironmentVariables");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsListEnvironmentVariables");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling actionsListEnvironmentVariables");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'environment_name': environmentName
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListRepoOrganizationVariables200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/environments/{environment_name}/variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListJobsForWorkflowRun operation.
     * @callback module:api/ActionsApi~actionsListJobsForWorkflowRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListJobsForWorkflowRunAttempt200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List jobs for a workflow run
     * Lists jobs for a workflow run. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [filter = 'latest')] Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run.
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/ActionsApi~actionsListJobsForWorkflowRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListJobsForWorkflowRunAttempt200Response}
     */
    actionsListJobsForWorkflowRun(owner, repo, runId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsListJobsForWorkflowRun");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsListJobsForWorkflowRun");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsListJobsForWorkflowRun");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
        'filter': opts['filter'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListJobsForWorkflowRunAttempt200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListJobsForWorkflowRunAttempt operation.
     * @callback module:api/ActionsApi~actionsListJobsForWorkflowRunAttemptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListJobsForWorkflowRunAttempt200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List jobs for a workflow run attempt
     * Lists jobs for a specific workflow run attempt. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint  with a private repository.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {Number} attemptNumber The attempt number of the workflow run.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/ActionsApi~actionsListJobsForWorkflowRunAttemptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListJobsForWorkflowRunAttempt200Response}
     */
    actionsListJobsForWorkflowRunAttempt(owner, repo, runId, attemptNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsListJobsForWorkflowRunAttempt");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsListJobsForWorkflowRunAttempt");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsListJobsForWorkflowRunAttempt");
      }
      // verify the required parameter 'attemptNumber' is set
      if (attemptNumber === undefined || attemptNumber === null) {
        throw new Error("Missing the required parameter 'attemptNumber' when calling actionsListJobsForWorkflowRunAttempt");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId,
        'attempt_number': attemptNumber
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListJobsForWorkflowRunAttempt200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListLabelsForSelfHostedRunnerForOrg operation.
     * @callback module:api/ActionsApi~actionsListLabelsForSelfHostedRunnerForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListLabelsForSelfHostedRunnerForOrg200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List labels for a self-hosted runner for an organization
     * Lists all labels for a self-hosted runner configured in an organization.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} runnerId Unique identifier of the self-hosted runner.
     * @param {module:api/ActionsApi~actionsListLabelsForSelfHostedRunnerForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListLabelsForSelfHostedRunnerForOrg200Response}
     */
    actionsListLabelsForSelfHostedRunnerForOrg(org, runnerId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsListLabelsForSelfHostedRunnerForOrg");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling actionsListLabelsForSelfHostedRunnerForOrg");
      }

      let pathParams = {
        'org': org,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListLabelsForSelfHostedRunnerForOrg200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runners/{runner_id}/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListLabelsForSelfHostedRunnerForRepo operation.
     * @callback module:api/ActionsApi~actionsListLabelsForSelfHostedRunnerForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListLabelsForSelfHostedRunnerForOrg200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List labels for a self-hosted runner for a repository
     * Lists all labels for a self-hosted runner configured in a repository.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runnerId Unique identifier of the self-hosted runner.
     * @param {module:api/ActionsApi~actionsListLabelsForSelfHostedRunnerForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListLabelsForSelfHostedRunnerForOrg200Response}
     */
    actionsListLabelsForSelfHostedRunnerForRepo(owner, repo, runnerId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsListLabelsForSelfHostedRunnerForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsListLabelsForSelfHostedRunnerForRepo");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling actionsListLabelsForSelfHostedRunnerForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListLabelsForSelfHostedRunnerForOrg200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListOrgSecrets operation.
     * @callback module:api/ActionsApi~actionsListOrgSecretsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListOrgSecrets200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organization secrets
     * Lists all secrets available in an organization without revealing their encrypted values.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/ActionsApi~actionsListOrgSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListOrgSecrets200Response}
     */
    actionsListOrgSecrets(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsListOrgSecrets");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListOrgSecrets200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListOrgVariables operation.
     * @callback module:api/ActionsApi~actionsListOrgVariablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListOrgVariables200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organization variables
     * Lists all organization variables.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 10)] The number of results per page (max 30). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/ActionsApi~actionsListOrgVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListOrgVariables200Response}
     */
    actionsListOrgVariables(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsListOrgVariables");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListOrgVariables200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListRepoOrganizationSecrets operation.
     * @callback module:api/ActionsApi~actionsListRepoOrganizationSecretsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListRepoOrganizationSecrets200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repository organization secrets
     * Lists all organization secrets shared with a repository without revealing their encrypted values.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/ActionsApi~actionsListRepoOrganizationSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListRepoOrganizationSecrets200Response}
     */
    actionsListRepoOrganizationSecrets(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsListRepoOrganizationSecrets");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsListRepoOrganizationSecrets");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListRepoOrganizationSecrets200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/organization-secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListRepoOrganizationVariables operation.
     * @callback module:api/ActionsApi~actionsListRepoOrganizationVariablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListRepoOrganizationVariables200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repository organization variables
     * Lists all organization variables shared with a repository.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 10)] The number of results per page (max 30). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/ActionsApi~actionsListRepoOrganizationVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListRepoOrganizationVariables200Response}
     */
    actionsListRepoOrganizationVariables(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsListRepoOrganizationVariables");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsListRepoOrganizationVariables");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListRepoOrganizationVariables200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/organization-variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListRepoSecrets operation.
     * @callback module:api/ActionsApi~actionsListRepoSecretsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListRepoOrganizationSecrets200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repository secrets
     * Lists all secrets available in a repository without revealing their encrypted values.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/ActionsApi~actionsListRepoSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListRepoOrganizationSecrets200Response}
     */
    actionsListRepoSecrets(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsListRepoSecrets");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsListRepoSecrets");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListRepoOrganizationSecrets200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListRepoVariables operation.
     * @callback module:api/ActionsApi~actionsListRepoVariablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListRepoOrganizationVariables200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repository variables
     * Lists all repository variables.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 10)] The number of results per page (max 30). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/ActionsApi~actionsListRepoVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListRepoOrganizationVariables200Response}
     */
    actionsListRepoVariables(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsListRepoVariables");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsListRepoVariables");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListRepoOrganizationVariables200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListRepoWorkflows operation.
     * @callback module:api/ActionsApi~actionsListRepoWorkflowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListRepoWorkflows200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repository workflows
     * Lists the workflows in a repository.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/ActionsApi~actionsListRepoWorkflowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListRepoWorkflows200Response}
     */
    actionsListRepoWorkflows(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsListRepoWorkflows");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsListRepoWorkflows");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListRepoWorkflows200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/workflows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListRunnerApplicationsForOrg operation.
     * @callback module:api/ActionsApi~actionsListRunnerApplicationsForOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RunnerApplication>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List runner applications for an organization
     * Lists binaries for the runner application that you can download and run.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.  If the repository is private, the `repo` scope is also required.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsListRunnerApplicationsForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RunnerApplication>}
     */
    actionsListRunnerApplicationsForOrg(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsListRunnerApplicationsForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RunnerApplication];
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runners/downloads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListRunnerApplicationsForRepo operation.
     * @callback module:api/ActionsApi~actionsListRunnerApplicationsForRepoCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RunnerApplication>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List runner applications for a repository
     * Lists binaries for the runner application that you can download and run.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:api/ActionsApi~actionsListRunnerApplicationsForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RunnerApplication>}
     */
    actionsListRunnerApplicationsForRepo(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsListRunnerApplicationsForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsListRunnerApplicationsForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RunnerApplication];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runners/downloads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListSelectedReposForOrgSecret operation.
     * @callback module:api/ActionsApi~actionsListSelectedReposForOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListSelectedReposForOrgSecret200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List selected repositories for an organization secret
     * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/ActionsApi~actionsListSelectedReposForOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListSelectedReposForOrgSecret200Response}
     */
    actionsListSelectedReposForOrgSecret(org, secretName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsListSelectedReposForOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsListSelectedReposForOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListSelectedReposForOrgSecret200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/secrets/{secret_name}/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListSelectedReposForOrgVariable operation.
     * @callback module:api/ActionsApi~actionsListSelectedReposForOrgVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListSelectedReposForOrgSecret200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List selected repositories for an organization variable
     * Lists all repositories that can access an organization variable that is available to selected repositories.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} name The name of the variable.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/ActionsApi~actionsListSelectedReposForOrgVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListSelectedReposForOrgSecret200Response}
     */
    actionsListSelectedReposForOrgVariable(org, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsListSelectedReposForOrgVariable");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling actionsListSelectedReposForOrgVariable");
      }

      let pathParams = {
        'org': org,
        'name': name
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListSelectedReposForOrgSecret200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/variables/{name}/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListSelectedRepositoriesEnabledGithubActionsOrganization operation.
     * @callback module:api/ActionsApi~actionsListSelectedRepositoriesEnabledGithubActionsOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List selected repositories enabled for GitHub Actions in an organization
     * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/ActionsApi~actionsListSelectedRepositoriesEnabledGithubActionsOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response}
     */
    actionsListSelectedRepositoriesEnabledGithubActionsOrganization(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsListSelectedRepositoriesEnabledGithubActionsOrganization");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/permissions/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListSelfHostedRunnersForOrg operation.
     * @callback module:api/ActionsApi~actionsListSelfHostedRunnersForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListSelfHostedRunnersForOrg200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List self-hosted runners for an organization
     * Lists all self-hosted runners configured in an organization.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {String} [name] The name of a self-hosted runner.
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/ActionsApi~actionsListSelfHostedRunnersForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListSelfHostedRunnersForOrg200Response}
     */
    actionsListSelfHostedRunnersForOrg(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsListSelfHostedRunnersForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'name': opts['name'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListSelfHostedRunnersForOrg200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runners', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListSelfHostedRunnersForRepo operation.
     * @callback module:api/ActionsApi~actionsListSelfHostedRunnersForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListSelfHostedRunnersForOrg200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List self-hosted runners for a repository
     * Lists all self-hosted runners configured in a repository.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {String} [name] The name of a self-hosted runner.
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/ActionsApi~actionsListSelfHostedRunnersForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListSelfHostedRunnersForOrg200Response}
     */
    actionsListSelfHostedRunnersForRepo(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsListSelfHostedRunnersForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsListSelfHostedRunnersForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'name': opts['name'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListSelfHostedRunnersForOrg200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runners', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListWorkflowRunArtifacts operation.
     * @callback module:api/ActionsApi~actionsListWorkflowRunArtifactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListArtifactsForRepo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List workflow run artifacts
     * Lists artifacts for a workflow run.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {String} [name] The name field of an artifact. When specified, only artifacts with this name will be returned.
     * @param {module:api/ActionsApi~actionsListWorkflowRunArtifactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListArtifactsForRepo200Response}
     */
    actionsListWorkflowRunArtifacts(owner, repo, runId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsListWorkflowRunArtifacts");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsListWorkflowRunArtifacts");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsListWorkflowRunArtifacts");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListArtifactsForRepo200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListWorkflowRuns operation.
     * @callback module:api/ActionsApi~actionsListWorkflowRunsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListWorkflowRunsForRepo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List workflow runs for a workflow
     * List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:model/ActionsGetWorkflowWorkflowIdParameter} workflowId The ID of the workflow. You can also pass the workflow file name as a string.
     * @param {Object} opts Optional parameters
     * @param {String} [actor] Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
     * @param {String} [branch] Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
     * @param {String} [event] Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\"
     * @param {module:model/String} [status] Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Date} [created] Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\"
     * @param {Boolean} [excludePullRequests = false)] If `true` pull requests are omitted from the response (empty array).
     * @param {Number} [checkSuiteId] Returns workflow runs with the `check_suite_id` that you specify.
     * @param {String} [headSha] Only returns workflow runs that are associated with the specified `head_sha`.
     * @param {module:api/ActionsApi~actionsListWorkflowRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListWorkflowRunsForRepo200Response}
     */
    actionsListWorkflowRuns(owner, repo, workflowId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsListWorkflowRuns");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsListWorkflowRuns");
      }
      // verify the required parameter 'workflowId' is set
      if (workflowId === undefined || workflowId === null) {
        throw new Error("Missing the required parameter 'workflowId' when calling actionsListWorkflowRuns");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'workflow_id': workflowId
      };
      let queryParams = {
        'actor': opts['actor'],
        'branch': opts['branch'],
        'event': opts['event'],
        'status': opts['status'],
        'per_page': opts['perPage'],
        'page': opts['page'],
        'created': opts['created'],
        'exclude_pull_requests': opts['excludePullRequests'],
        'check_suite_id': opts['checkSuiteId'],
        'head_sha': opts['headSha']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListWorkflowRunsForRepo200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsListWorkflowRunsForRepo operation.
     * @callback module:api/ActionsApi~actionsListWorkflowRunsForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListWorkflowRunsForRepo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List workflow runs for a repository
     * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.  This API will return up to 1,000 results for each search when using the following parameters: `actor`, `branch`, `check_suite_id`, `created`, `event`, `head_sha`, `status`.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {String} [actor] Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
     * @param {String} [branch] Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
     * @param {String} [event] Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\"
     * @param {module:model/String} [status] Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Date} [created] Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\"
     * @param {Boolean} [excludePullRequests = false)] If `true` pull requests are omitted from the response (empty array).
     * @param {Number} [checkSuiteId] Returns workflow runs with the `check_suite_id` that you specify.
     * @param {String} [headSha] Only returns workflow runs that are associated with the specified `head_sha`.
     * @param {module:api/ActionsApi~actionsListWorkflowRunsForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListWorkflowRunsForRepo200Response}
     */
    actionsListWorkflowRunsForRepo(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsListWorkflowRunsForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsListWorkflowRunsForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'actor': opts['actor'],
        'branch': opts['branch'],
        'event': opts['event'],
        'status': opts['status'],
        'per_page': opts['perPage'],
        'page': opts['page'],
        'created': opts['created'],
        'exclude_pull_requests': opts['excludePullRequests'],
        'check_suite_id': opts['checkSuiteId'],
        'head_sha': opts['headSha']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListWorkflowRunsForRepo200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsReRunJobForWorkflowRun operation.
     * @callback module:api/ActionsApi~actionsReRunJobForWorkflowRunCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Re-run a job from a workflow run
     * Re-run a job and its dependent jobs in a workflow run.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} jobId The unique identifier of the job.
     * @param {Object} opts Optional parameters
     * @param {module:model/ActionsReRunJobForWorkflowRunRequest} [actionsReRunJobForWorkflowRunRequest] 
     * @param {module:api/ActionsApi~actionsReRunJobForWorkflowRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    actionsReRunJobForWorkflowRun(owner, repo, jobId, opts, callback) {
      opts = opts || {};
      let postBody = opts['actionsReRunJobForWorkflowRunRequest'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsReRunJobForWorkflowRun");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsReRunJobForWorkflowRun");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling actionsReRunJobForWorkflowRun");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'job_id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsReRunWorkflow operation.
     * @callback module:api/ActionsApi~actionsReRunWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Re-run a workflow
     * Re-runs your workflow run using its `id`.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {Object} opts Optional parameters
     * @param {module:model/ActionsReRunJobForWorkflowRunRequest} [actionsReRunJobForWorkflowRunRequest] 
     * @param {module:api/ActionsApi~actionsReRunWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    actionsReRunWorkflow(owner, repo, runId, opts, callback) {
      opts = opts || {};
      let postBody = opts['actionsReRunJobForWorkflowRunRequest'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsReRunWorkflow");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsReRunWorkflow");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsReRunWorkflow");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/rerun', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsReRunWorkflowFailedJobs operation.
     * @callback module:api/ActionsApi~actionsReRunWorkflowFailedJobsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Re-run failed jobs from a workflow run
     * Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {Object} opts Optional parameters
     * @param {module:model/ActionsReRunJobForWorkflowRunRequest} [actionsReRunJobForWorkflowRunRequest] 
     * @param {module:api/ActionsApi~actionsReRunWorkflowFailedJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    actionsReRunWorkflowFailedJobs(owner, repo, runId, opts, callback) {
      opts = opts || {};
      let postBody = opts['actionsReRunJobForWorkflowRunRequest'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsReRunWorkflowFailedJobs");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsReRunWorkflowFailedJobs");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsReRunWorkflowFailedJobs");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg operation.
     * @callback module:api/ActionsApi~actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListLabelsForSelfHostedRunnerForOrg200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove all custom labels from a self-hosted runner for an organization
     * Remove all custom labels from a self-hosted runner configured in an organization. Returns the remaining read-only labels from the runner.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} runnerId Unique identifier of the self-hosted runner.
     * @param {module:api/ActionsApi~actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListLabelsForSelfHostedRunnerForOrg200Response}
     */
    actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg(org, runnerId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg");
      }

      let pathParams = {
        'org': org,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListLabelsForSelfHostedRunnerForOrg200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runners/{runner_id}/labels', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo operation.
     * @callback module:api/ActionsApi~actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListLabelsForSelfHostedRunnerForOrg200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove all custom labels from a self-hosted runner for a repository
     * Remove all custom labels from a self-hosted runner configured in a repository. Returns the remaining read-only labels from the runner.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runnerId Unique identifier of the self-hosted runner.
     * @param {module:api/ActionsApi~actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListLabelsForSelfHostedRunnerForOrg200Response}
     */
    actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo(owner, repo, runnerId, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListLabelsForSelfHostedRunnerForOrg200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsRemoveCustomLabelFromSelfHostedRunnerForOrg operation.
     * @callback module:api/ActionsApi~actionsRemoveCustomLabelFromSelfHostedRunnerForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListLabelsForSelfHostedRunnerForOrg200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a custom label from a self-hosted runner for an organization
     * Remove a custom label from a self-hosted runner configured in an organization. Returns the remaining labels from the runner.  This endpoint returns a `404 Not Found` status if the custom label is not present on the runner.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} runnerId Unique identifier of the self-hosted runner.
     * @param {String} name The name of a self-hosted runner's custom label.
     * @param {module:api/ActionsApi~actionsRemoveCustomLabelFromSelfHostedRunnerForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListLabelsForSelfHostedRunnerForOrg200Response}
     */
    actionsRemoveCustomLabelFromSelfHostedRunnerForOrg(org, runnerId, name, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsRemoveCustomLabelFromSelfHostedRunnerForOrg");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling actionsRemoveCustomLabelFromSelfHostedRunnerForOrg");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling actionsRemoveCustomLabelFromSelfHostedRunnerForOrg");
      }

      let pathParams = {
        'org': org,
        'runner_id': runnerId,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListLabelsForSelfHostedRunnerForOrg200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runners/{runner_id}/labels/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsRemoveCustomLabelFromSelfHostedRunnerForRepo operation.
     * @callback module:api/ActionsApi~actionsRemoveCustomLabelFromSelfHostedRunnerForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListLabelsForSelfHostedRunnerForOrg200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a custom label from a self-hosted runner for a repository
     * Remove a custom label from a self-hosted runner configured in a repository. Returns the remaining labels from the runner.  This endpoint returns a `404 Not Found` status if the custom label is not present on the runner.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runnerId Unique identifier of the self-hosted runner.
     * @param {String} name The name of a self-hosted runner's custom label.
     * @param {module:api/ActionsApi~actionsRemoveCustomLabelFromSelfHostedRunnerForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListLabelsForSelfHostedRunnerForOrg200Response}
     */
    actionsRemoveCustomLabelFromSelfHostedRunnerForRepo(owner, repo, runnerId, name, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsRemoveCustomLabelFromSelfHostedRunnerForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsRemoveCustomLabelFromSelfHostedRunnerForRepo");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling actionsRemoveCustomLabelFromSelfHostedRunnerForRepo");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling actionsRemoveCustomLabelFromSelfHostedRunnerForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'runner_id': runnerId,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListLabelsForSelfHostedRunnerForOrg200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsRemoveSelectedRepoFromOrgSecret operation.
     * @callback module:api/ActionsApi~actionsRemoveSelectedRepoFromOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove selected repository from an organization secret
     * Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {Number} repositoryId 
     * @param {module:api/ActionsApi~actionsRemoveSelectedRepoFromOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsRemoveSelectedRepoFromOrgSecret(org, secretName, repositoryId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsRemoveSelectedRepoFromOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsRemoveSelectedRepoFromOrgSecret");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling actionsRemoveSelectedRepoFromOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName,
        'repository_id': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsRemoveSelectedRepoFromOrgVariable operation.
     * @callback module:api/ActionsApi~actionsRemoveSelectedRepoFromOrgVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove selected repository from an organization variable
     * Removes a repository from an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} name The name of the variable.
     * @param {Number} repositoryId 
     * @param {module:api/ActionsApi~actionsRemoveSelectedRepoFromOrgVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsRemoveSelectedRepoFromOrgVariable(org, name, repositoryId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsRemoveSelectedRepoFromOrgVariable");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling actionsRemoveSelectedRepoFromOrgVariable");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling actionsRemoveSelectedRepoFromOrgVariable");
      }

      let pathParams = {
        'org': org,
        'name': name,
        'repository_id': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/variables/{name}/repositories/{repository_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsReviewCustomGatesForRun operation.
     * @callback module:api/ActionsApi~actionsReviewCustomGatesForRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Review custom deployment protection rules for a workflow run
     * Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see \"[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment).\"  **Note:** GitHub Apps can only review their own custom deployment protection rules. To approve or reject pending deployments that are waiting for review from a specific person or team, see [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run).  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {module:model/ActionsReviewCustomGatesForRunRequest} actionsReviewCustomGatesForRunRequest 
     * @param {module:api/ActionsApi~actionsReviewCustomGatesForRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsReviewCustomGatesForRun(owner, repo, runId, actionsReviewCustomGatesForRunRequest, callback) {
      let postBody = actionsReviewCustomGatesForRunRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsReviewCustomGatesForRun");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsReviewCustomGatesForRun");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsReviewCustomGatesForRun");
      }
      // verify the required parameter 'actionsReviewCustomGatesForRunRequest' is set
      if (actionsReviewCustomGatesForRunRequest === undefined || actionsReviewCustomGatesForRunRequest === null) {
        throw new Error("Missing the required parameter 'actionsReviewCustomGatesForRunRequest' when calling actionsReviewCustomGatesForRun");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsReviewPendingDeploymentsForRun operation.
     * @callback module:api/ActionsApi~actionsReviewPendingDeploymentsForRunCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Deployment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Review pending deployments for a workflow run
     * Approve or reject pending deployments that are waiting on approval by a required reviewer.  Required reviewers with read access to the repository contents and deployments can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runId The unique identifier of the workflow run.
     * @param {module:model/ActionsReviewPendingDeploymentsForRunRequest} actionsReviewPendingDeploymentsForRunRequest 
     * @param {module:api/ActionsApi~actionsReviewPendingDeploymentsForRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Deployment>}
     */
    actionsReviewPendingDeploymentsForRun(owner, repo, runId, actionsReviewPendingDeploymentsForRunRequest, callback) {
      let postBody = actionsReviewPendingDeploymentsForRunRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsReviewPendingDeploymentsForRun");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsReviewPendingDeploymentsForRun");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling actionsReviewPendingDeploymentsForRun");
      }
      // verify the required parameter 'actionsReviewPendingDeploymentsForRunRequest' is set
      if (actionsReviewPendingDeploymentsForRunRequest === undefined || actionsReviewPendingDeploymentsForRunRequest === null) {
        throw new Error("Missing the required parameter 'actionsReviewPendingDeploymentsForRunRequest' when calling actionsReviewPendingDeploymentsForRun");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'run_id': runId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Deployment];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsSetAllowedActionsOrganization operation.
     * @callback module:api/ActionsApi~actionsSetAllowedActionsOrganizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set allowed actions and reusable workflows for an organization
     * Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {module:model/SelectedActions} [selectedActions] 
     * @param {module:api/ActionsApi~actionsSetAllowedActionsOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsSetAllowedActionsOrganization(org, opts, callback) {
      opts = opts || {};
      let postBody = opts['selectedActions'];
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsSetAllowedActionsOrganization");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/permissions/selected-actions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsSetAllowedActionsRepository operation.
     * @callback module:api/ActionsApi~actionsSetAllowedActionsRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set allowed actions and reusable workflows for a repository
     * Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\"  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {module:model/SelectedActions} [selectedActions] 
     * @param {module:api/ActionsApi~actionsSetAllowedActionsRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsSetAllowedActionsRepository(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['selectedActions'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsSetAllowedActionsRepository");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsSetAllowedActionsRepository");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/permissions/selected-actions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsSetCustomLabelsForSelfHostedRunnerForOrg operation.
     * @callback module:api/ActionsApi~actionsSetCustomLabelsForSelfHostedRunnerForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListLabelsForSelfHostedRunnerForOrg200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set custom labels for a self-hosted runner for an organization
     * Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in an organization.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} runnerId Unique identifier of the self-hosted runner.
     * @param {module:model/ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest} actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest 
     * @param {module:api/ActionsApi~actionsSetCustomLabelsForSelfHostedRunnerForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListLabelsForSelfHostedRunnerForOrg200Response}
     */
    actionsSetCustomLabelsForSelfHostedRunnerForOrg(org, runnerId, actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest, callback) {
      let postBody = actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsSetCustomLabelsForSelfHostedRunnerForOrg");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling actionsSetCustomLabelsForSelfHostedRunnerForOrg");
      }
      // verify the required parameter 'actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest' is set
      if (actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest === undefined || actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest === null) {
        throw new Error("Missing the required parameter 'actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest' when calling actionsSetCustomLabelsForSelfHostedRunnerForOrg");
      }

      let pathParams = {
        'org': org,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActionsListLabelsForSelfHostedRunnerForOrg200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/runners/{runner_id}/labels', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsSetCustomLabelsForSelfHostedRunnerForRepo operation.
     * @callback module:api/ActionsApi~actionsSetCustomLabelsForSelfHostedRunnerForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListLabelsForSelfHostedRunnerForOrg200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set custom labels for a self-hosted runner for a repository
     * Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in a repository.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} runnerId Unique identifier of the self-hosted runner.
     * @param {module:model/ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest} actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest 
     * @param {module:api/ActionsApi~actionsSetCustomLabelsForSelfHostedRunnerForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListLabelsForSelfHostedRunnerForOrg200Response}
     */
    actionsSetCustomLabelsForSelfHostedRunnerForRepo(owner, repo, runnerId, actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest, callback) {
      let postBody = actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsSetCustomLabelsForSelfHostedRunnerForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsSetCustomLabelsForSelfHostedRunnerForRepo");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling actionsSetCustomLabelsForSelfHostedRunnerForRepo");
      }
      // verify the required parameter 'actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest' is set
      if (actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest === undefined || actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest === null) {
        throw new Error("Missing the required parameter 'actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest' when calling actionsSetCustomLabelsForSelfHostedRunnerForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActionsListLabelsForSelfHostedRunnerForOrg200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsSetCustomOidcSubClaimForRepo operation.
     * @callback module:api/ActionsApi~actionsSetCustomOidcSubClaimForRepoCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the customization template for an OIDC subject claim for a repository
     * Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a repository.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:model/ActionsOIDCSubjectCustomizationForARepository} actionsOIDCSubjectCustomizationForARepository 
     * @param {module:api/ActionsApi~actionsSetCustomOidcSubClaimForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    actionsSetCustomOidcSubClaimForRepo(owner, repo, actionsOIDCSubjectCustomizationForARepository, callback) {
      let postBody = actionsOIDCSubjectCustomizationForARepository;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsSetCustomOidcSubClaimForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsSetCustomOidcSubClaimForRepo");
      }
      // verify the required parameter 'actionsOIDCSubjectCustomizationForARepository' is set
      if (actionsOIDCSubjectCustomizationForARepository === undefined || actionsOIDCSubjectCustomizationForARepository === null) {
        throw new Error("Missing the required parameter 'actionsOIDCSubjectCustomizationForARepository' when calling actionsSetCustomOidcSubClaimForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/oidc/customization/sub', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsSetGithubActionsDefaultWorkflowPermissionsOrganization operation.
     * @callback module:api/ActionsApi~actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set default workflow permissions for an organization
     * Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions can submit approving pull request reviews. For more information, see \"[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\"  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {module:model/ActionsSetDefaultWorkflowPermissions} [actionsSetDefaultWorkflowPermissions] 
     * @param {module:api/ActionsApi~actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsSetGithubActionsDefaultWorkflowPermissionsOrganization(org, opts, callback) {
      opts = opts || {};
      let postBody = opts['actionsSetDefaultWorkflowPermissions'];
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsSetGithubActionsDefaultWorkflowPermissionsOrganization");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/permissions/workflow', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsSetGithubActionsDefaultWorkflowPermissionsRepository operation.
     * @callback module:api/ActionsApi~actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set default workflow permissions for a repository
     * Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions can submit approving pull request reviews. For more information, see \"[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\"  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:model/ActionsSetDefaultWorkflowPermissions} actionsSetDefaultWorkflowPermissions 
     * @param {module:api/ActionsApi~actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsSetGithubActionsDefaultWorkflowPermissionsRepository(owner, repo, actionsSetDefaultWorkflowPermissions, callback) {
      let postBody = actionsSetDefaultWorkflowPermissions;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsSetGithubActionsDefaultWorkflowPermissionsRepository");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsSetGithubActionsDefaultWorkflowPermissionsRepository");
      }
      // verify the required parameter 'actionsSetDefaultWorkflowPermissions' is set
      if (actionsSetDefaultWorkflowPermissions === undefined || actionsSetDefaultWorkflowPermissions === null) {
        throw new Error("Missing the required parameter 'actionsSetDefaultWorkflowPermissions' when calling actionsSetGithubActionsDefaultWorkflowPermissionsRepository");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/permissions/workflow', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsSetGithubActionsPermissionsOrganization operation.
     * @callback module:api/ActionsApi~actionsSetGithubActionsPermissionsOrganizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set GitHub Actions permissions for an organization
     * Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/ActionsSetGithubActionsPermissionsOrganizationRequest} actionsSetGithubActionsPermissionsOrganizationRequest 
     * @param {module:api/ActionsApi~actionsSetGithubActionsPermissionsOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsSetGithubActionsPermissionsOrganization(org, actionsSetGithubActionsPermissionsOrganizationRequest, callback) {
      let postBody = actionsSetGithubActionsPermissionsOrganizationRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsSetGithubActionsPermissionsOrganization");
      }
      // verify the required parameter 'actionsSetGithubActionsPermissionsOrganizationRequest' is set
      if (actionsSetGithubActionsPermissionsOrganizationRequest === undefined || actionsSetGithubActionsPermissionsOrganizationRequest === null) {
        throw new Error("Missing the required parameter 'actionsSetGithubActionsPermissionsOrganizationRequest' when calling actionsSetGithubActionsPermissionsOrganization");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/permissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsSetGithubActionsPermissionsRepository operation.
     * @callback module:api/ActionsApi~actionsSetGithubActionsPermissionsRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set GitHub Actions permissions for a repository
     * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:model/ActionsSetGithubActionsPermissionsRepositoryRequest} actionsSetGithubActionsPermissionsRepositoryRequest 
     * @param {module:api/ActionsApi~actionsSetGithubActionsPermissionsRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsSetGithubActionsPermissionsRepository(owner, repo, actionsSetGithubActionsPermissionsRepositoryRequest, callback) {
      let postBody = actionsSetGithubActionsPermissionsRepositoryRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsSetGithubActionsPermissionsRepository");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsSetGithubActionsPermissionsRepository");
      }
      // verify the required parameter 'actionsSetGithubActionsPermissionsRepositoryRequest' is set
      if (actionsSetGithubActionsPermissionsRepositoryRequest === undefined || actionsSetGithubActionsPermissionsRepositoryRequest === null) {
        throw new Error("Missing the required parameter 'actionsSetGithubActionsPermissionsRepositoryRequest' when calling actionsSetGithubActionsPermissionsRepository");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/permissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsSetSelectedReposForOrgSecret operation.
     * @callback module:api/ActionsApi~actionsSetSelectedReposForOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set selected repositories for an organization secret
     * Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:model/ActionsSetSelectedReposForOrgSecretRequest} actionsSetSelectedReposForOrgSecretRequest 
     * @param {module:api/ActionsApi~actionsSetSelectedReposForOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsSetSelectedReposForOrgSecret(org, secretName, actionsSetSelectedReposForOrgSecretRequest, callback) {
      let postBody = actionsSetSelectedReposForOrgSecretRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsSetSelectedReposForOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling actionsSetSelectedReposForOrgSecret");
      }
      // verify the required parameter 'actionsSetSelectedReposForOrgSecretRequest' is set
      if (actionsSetSelectedReposForOrgSecretRequest === undefined || actionsSetSelectedReposForOrgSecretRequest === null) {
        throw new Error("Missing the required parameter 'actionsSetSelectedReposForOrgSecretRequest' when calling actionsSetSelectedReposForOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/secrets/{secret_name}/repositories', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsSetSelectedReposForOrgVariable operation.
     * @callback module:api/ActionsApi~actionsSetSelectedReposForOrgVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set selected repositories for an organization variable
     * Replaces all repositories for an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} name The name of the variable.
     * @param {module:model/ActionsSetSelectedReposForOrgVariableRequest} actionsSetSelectedReposForOrgVariableRequest 
     * @param {module:api/ActionsApi~actionsSetSelectedReposForOrgVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsSetSelectedReposForOrgVariable(org, name, actionsSetSelectedReposForOrgVariableRequest, callback) {
      let postBody = actionsSetSelectedReposForOrgVariableRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsSetSelectedReposForOrgVariable");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling actionsSetSelectedReposForOrgVariable");
      }
      // verify the required parameter 'actionsSetSelectedReposForOrgVariableRequest' is set
      if (actionsSetSelectedReposForOrgVariableRequest === undefined || actionsSetSelectedReposForOrgVariableRequest === null) {
        throw new Error("Missing the required parameter 'actionsSetSelectedReposForOrgVariableRequest' when calling actionsSetSelectedReposForOrgVariable");
      }

      let pathParams = {
        'org': org,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/variables/{name}/repositories', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsSetSelectedRepositoriesEnabledGithubActionsOrganization operation.
     * @callback module:api/ActionsApi~actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set selected repositories enabled for GitHub Actions in an organization
     * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\"   OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest} actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest 
     * @param {module:api/ActionsApi~actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsSetSelectedRepositoriesEnabledGithubActionsOrganization(org, actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest, callback) {
      let postBody = actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsSetSelectedRepositoriesEnabledGithubActionsOrganization");
      }
      // verify the required parameter 'actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest' is set
      if (actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest === undefined || actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest === null) {
        throw new Error("Missing the required parameter 'actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest' when calling actionsSetSelectedRepositoriesEnabledGithubActionsOrganization");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/permissions/repositories', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsSetWorkflowAccessToRepository operation.
     * @callback module:api/ActionsApi~actionsSetWorkflowAccessToRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the level of access for workflows outside of the repository
     * Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository. This endpoint only applies to private repositories. For more information, see \"[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)\".  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:model/ActionsWorkflowAccessToRepository} actionsWorkflowAccessToRepository 
     * @param {module:api/ActionsApi~actionsSetWorkflowAccessToRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsSetWorkflowAccessToRepository(owner, repo, actionsWorkflowAccessToRepository, callback) {
      let postBody = actionsWorkflowAccessToRepository;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsSetWorkflowAccessToRepository");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsSetWorkflowAccessToRepository");
      }
      // verify the required parameter 'actionsWorkflowAccessToRepository' is set
      if (actionsWorkflowAccessToRepository === undefined || actionsWorkflowAccessToRepository === null) {
        throw new Error("Missing the required parameter 'actionsWorkflowAccessToRepository' when calling actionsSetWorkflowAccessToRepository");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/permissions/access', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsUpdateEnvironmentVariable operation.
     * @callback module:api/ActionsApi~actionsUpdateEnvironmentVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an environment variable
     * Updates an environment variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} name The name of the variable.
     * @param {String} environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.
     * @param {module:model/ActionsUpdateRepoVariableRequest} actionsUpdateRepoVariableRequest 
     * @param {module:api/ActionsApi~actionsUpdateEnvironmentVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsUpdateEnvironmentVariable(owner, repo, name, environmentName, actionsUpdateRepoVariableRequest, callback) {
      let postBody = actionsUpdateRepoVariableRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsUpdateEnvironmentVariable");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsUpdateEnvironmentVariable");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling actionsUpdateEnvironmentVariable");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling actionsUpdateEnvironmentVariable");
      }
      // verify the required parameter 'actionsUpdateRepoVariableRequest' is set
      if (actionsUpdateRepoVariableRequest === undefined || actionsUpdateRepoVariableRequest === null) {
        throw new Error("Missing the required parameter 'actionsUpdateRepoVariableRequest' when calling actionsUpdateEnvironmentVariable");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'name': name,
        'environment_name': environmentName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsUpdateOrgVariable operation.
     * @callback module:api/ActionsApi~actionsUpdateOrgVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an organization variable
     * Updates an organization variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also required.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} name The name of the variable.
     * @param {module:model/ActionsUpdateOrgVariableRequest} actionsUpdateOrgVariableRequest 
     * @param {module:api/ActionsApi~actionsUpdateOrgVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsUpdateOrgVariable(org, name, actionsUpdateOrgVariableRequest, callback) {
      let postBody = actionsUpdateOrgVariableRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling actionsUpdateOrgVariable");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling actionsUpdateOrgVariable");
      }
      // verify the required parameter 'actionsUpdateOrgVariableRequest' is set
      if (actionsUpdateOrgVariableRequest === undefined || actionsUpdateOrgVariableRequest === null) {
        throw new Error("Missing the required parameter 'actionsUpdateOrgVariableRequest' when calling actionsUpdateOrgVariable");
      }

      let pathParams = {
        'org': org,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/actions/variables/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsUpdateRepoVariable operation.
     * @callback module:api/ActionsApi~actionsUpdateRepoVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a repository variable
     * Updates a repository variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} name The name of the variable.
     * @param {module:model/ActionsUpdateRepoVariableRequest} actionsUpdateRepoVariableRequest 
     * @param {module:api/ActionsApi~actionsUpdateRepoVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    actionsUpdateRepoVariable(owner, repo, name, actionsUpdateRepoVariableRequest, callback) {
      let postBody = actionsUpdateRepoVariableRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling actionsUpdateRepoVariable");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling actionsUpdateRepoVariable");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling actionsUpdateRepoVariable");
      }
      // verify the required parameter 'actionsUpdateRepoVariableRequest' is set
      if (actionsUpdateRepoVariableRequest === undefined || actionsUpdateRepoVariableRequest === null) {
        throw new Error("Missing the required parameter 'actionsUpdateRepoVariableRequest' when calling actionsUpdateRepoVariable");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/actions/variables/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
