/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OrganizationSecretScanningAlert from '../model/OrganizationSecretScanningAlert';
import SecretScanningAlert from '../model/SecretScanningAlert';
import SecretScanningLocation from '../model/SecretScanningLocation';

/**
* SecretScanning service.
* @module api/SecretScanningApi
* @version 1.1.4
*/
export default class SecretScanningApi {

    /**
    * Constructs a new SecretScanningApi. 
    * @alias module:api/SecretScanningApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the secretScanningGetAlert operation.
     * @callback module:api/SecretScanningApi~secretScanningGetAlertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretScanningAlert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a secret scanning alert
     * Gets a single secret scanning alert detected in an eligible repository.  The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} alertNumber The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
     * @param {module:api/SecretScanningApi~secretScanningGetAlertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecretScanningAlert}
     */
    secretScanningGetAlert(owner, repo, alertNumber, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling secretScanningGetAlert");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling secretScanningGetAlert");
      }
      // verify the required parameter 'alertNumber' is set
      if (alertNumber === undefined || alertNumber === null) {
        throw new Error("Missing the required parameter 'alertNumber' when calling secretScanningGetAlert");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'alert_number': alertNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecretScanningAlert;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretScanningListAlertsForEnterprise operation.
     * @callback module:api/SecretScanningApi~secretScanningListAlertsForEnterpriseCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrganizationSecretScanningAlert>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List secret scanning alerts for an enterprise
     * Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.  Alerts are only returned for organizations in the enterprise for which the authenticated user is an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).  The authenticated user must be a member of the enterprise in order to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` scope or `security_events` scope to use this endpoint.
     * @param {String} enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [state] Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
     * @param {String} [secretType] A comma-separated list of secret types to return. By default all secret types are returned. See \"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\" for a complete list of secret types.
     * @param {String} [resolution] A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
     * @param {module:model/String} [sort = 'created')] The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
     * @param {module:model/String} [direction = 'desc')] The direction to sort the results by.
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {String} [before] A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {String} [after] A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {String} [validity] A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`.
     * @param {module:api/SecretScanningApi~secretScanningListAlertsForEnterpriseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrganizationSecretScanningAlert>}
     */
    secretScanningListAlertsForEnterprise(enterprise, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'enterprise' is set
      if (enterprise === undefined || enterprise === null) {
        throw new Error("Missing the required parameter 'enterprise' when calling secretScanningListAlertsForEnterprise");
      }

      let pathParams = {
        'enterprise': enterprise
      };
      let queryParams = {
        'state': opts['state'],
        'secret_type': opts['secretType'],
        'resolution': opts['resolution'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'per_page': opts['perPage'],
        'before': opts['before'],
        'after': opts['after'],
        'validity': opts['validity']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrganizationSecretScanningAlert];
      return this.apiClient.callApi(
        '/enterprises/{enterprise}/secret-scanning/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretScanningListAlertsForOrg operation.
     * @callback module:api/SecretScanningApi~secretScanningListAlertsForOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrganizationSecretScanningAlert>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List secret scanning alerts for an organization
     * Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.  The authenticated user must be an administrator or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [state] Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
     * @param {String} [secretType] A comma-separated list of secret types to return. By default all secret types are returned. See \"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\" for a complete list of secret types.
     * @param {String} [resolution] A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
     * @param {module:model/String} [sort = 'created')] The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
     * @param {module:model/String} [direction = 'desc')] The direction to sort the results by.
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {String} [before] A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty \"before\" query string.
     * @param {String} [after] A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty \"after\" query string.
     * @param {String} [validity] A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`.
     * @param {module:api/SecretScanningApi~secretScanningListAlertsForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrganizationSecretScanningAlert>}
     */
    secretScanningListAlertsForOrg(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling secretScanningListAlertsForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'state': opts['state'],
        'secret_type': opts['secretType'],
        'resolution': opts['resolution'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'before': opts['before'],
        'after': opts['after'],
        'validity': opts['validity']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrganizationSecretScanningAlert];
      return this.apiClient.callApi(
        '/orgs/{org}/secret-scanning/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretScanningListAlertsForRepo operation.
     * @callback module:api/SecretScanningApi~secretScanningListAlertsForRepoCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SecretScanningAlert>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List secret scanning alerts for a repository
     * Lists secret scanning alerts for an eligible repository, from newest to oldest.  The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [state] Set to `open` or `resolved` to only list secret scanning alerts in a specific state.
     * @param {String} [secretType] A comma-separated list of secret types to return. By default all secret types are returned. See \"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\" for a complete list of secret types.
     * @param {String} [resolution] A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.
     * @param {module:model/String} [sort = 'created')] The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.
     * @param {module:model/String} [direction = 'desc')] The direction to sort the results by.
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {String} [before] A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty \"before\" query string.
     * @param {String} [after] A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty \"after\" query string.
     * @param {String} [validity] A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`.
     * @param {module:api/SecretScanningApi~secretScanningListAlertsForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SecretScanningAlert>}
     */
    secretScanningListAlertsForRepo(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling secretScanningListAlertsForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling secretScanningListAlertsForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'state': opts['state'],
        'secret_type': opts['secretType'],
        'resolution': opts['resolution'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'before': opts['before'],
        'after': opts['after'],
        'validity': opts['validity']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SecretScanningAlert];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/secret-scanning/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretScanningListLocationsForAlert operation.
     * @callback module:api/SecretScanningApi~secretScanningListLocationsForAlertCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SecretScanningLocation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List locations for a secret scanning alert
     * Lists all locations for a given secret scanning alert for an eligible repository.  The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} alertNumber The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/SecretScanningApi~secretScanningListLocationsForAlertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SecretScanningLocation>}
     */
    secretScanningListLocationsForAlert(owner, repo, alertNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling secretScanningListLocationsForAlert");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling secretScanningListLocationsForAlert");
      }
      // verify the required parameter 'alertNumber' is set
      if (alertNumber === undefined || alertNumber === null) {
        throw new Error("Missing the required parameter 'alertNumber' when calling secretScanningListLocationsForAlert");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'alert_number': alertNumber
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SecretScanningLocation];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secretScanningUpdateAlert operation.
     * @callback module:api/SecretScanningApi~secretScanningUpdateAlertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretScanningAlert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a secret scanning alert
     * Updates the status of a secret scanning alert in an eligible repository.  The authenticated user must be an administrator for the repository or for the organization that owns the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} alertNumber The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
     * @param {module:model/SecretScanningUpdateAlertRequest} secretScanningUpdateAlertRequest 
     * @param {module:api/SecretScanningApi~secretScanningUpdateAlertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecretScanningAlert}
     */
    secretScanningUpdateAlert(owner, repo, alertNumber, secretScanningUpdateAlertRequest, callback) {
      let postBody = secretScanningUpdateAlertRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling secretScanningUpdateAlert");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling secretScanningUpdateAlert");
      }
      // verify the required parameter 'alertNumber' is set
      if (alertNumber === undefined || alertNumber === null) {
        throw new Error("Missing the required parameter 'alertNumber' when calling secretScanningUpdateAlert");
      }
      // verify the required parameter 'secretScanningUpdateAlertRequest' is set
      if (secretScanningUpdateAlertRequest === undefined || secretScanningUpdateAlertRequest === null) {
        throw new Error("Missing the required parameter 'secretScanningUpdateAlertRequest' when calling secretScanningUpdateAlert");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'alert_number': alertNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SecretScanningAlert;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
