/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActionsListSelectedReposForOrgSecret200Response from '../model/ActionsListSelectedReposForOrgSecret200Response';
import Codespace from '../model/Codespace';
import CodespaceExportDetails from '../model/CodespaceExportDetails';
import CodespaceWithFullRepository from '../model/CodespaceWithFullRepository';
import CodespacesListDevcontainersInRepositoryForAuthenticatedUser200Response from '../model/CodespacesListDevcontainersInRepositoryForAuthenticatedUser200Response';
import CodespacesListInOrganization200Response from '../model/CodespacesListInOrganization200Response';
import CodespacesListOrgSecrets200Response from '../model/CodespacesListOrgSecrets200Response';
import CodespacesListRepoSecrets200Response from '../model/CodespacesListRepoSecrets200Response';
import CodespacesListSecretsForAuthenticatedUser200Response from '../model/CodespacesListSecretsForAuthenticatedUser200Response';
import CodespacesOrgSecret from '../model/CodespacesOrgSecret';
import CodespacesPermissionsCheckForDevcontainer from '../model/CodespacesPermissionsCheckForDevcontainer';
import CodespacesPreFlightWithRepoForAuthenticatedUser200Response from '../model/CodespacesPreFlightWithRepoForAuthenticatedUser200Response';
import CodespacesPublicKey from '../model/CodespacesPublicKey';
import CodespacesRepoMachinesForAuthenticatedUser200Response from '../model/CodespacesRepoMachinesForAuthenticatedUser200Response';
import CodespacesSecret from '../model/CodespacesSecret';
import CodespacesUserPublicKey from '../model/CodespacesUserPublicKey';
import RepoCodespacesSecret from '../model/RepoCodespacesSecret';

/**
* Codespaces service.
* @module api/CodespacesApi
* @version 1.1.4
*/
export default class CodespacesApi {

    /**
    * Constructs a new CodespacesApi. 
    * @alias module:api/CodespacesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the codespacesAddRepositoryForSecretForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesAddRepositoryForSecretForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a selected repository to a user secret
     * Adds a repository to the selected repositories for a user's development environment secret.  The authenticated user must have Codespaces access to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
     * @param {String} secretName The name of the secret.
     * @param {Number} repositoryId 
     * @param {module:api/CodespacesApi~codespacesAddRepositoryForSecretForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codespacesAddRepositoryForSecretForAuthenticatedUser(secretName, repositoryId, callback) {
      let postBody = null;
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling codespacesAddRepositoryForSecretForAuthenticatedUser");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling codespacesAddRepositoryForSecretForAuthenticatedUser");
      }

      let pathParams = {
        'secret_name': secretName,
        'repository_id': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/codespaces/secrets/{secret_name}/repositories/{repository_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesAddSelectedRepoToOrgSecret operation.
     * @callback module:api/CodespacesApi~codespacesAddSelectedRepoToOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add selected repository to an organization secret
     * Adds a repository to an organization development environment secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret). OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {Number} repositoryId 
     * @param {module:api/CodespacesApi~codespacesAddSelectedRepoToOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codespacesAddSelectedRepoToOrgSecret(org, secretName, repositoryId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling codespacesAddSelectedRepoToOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling codespacesAddSelectedRepoToOrgSecret");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling codespacesAddSelectedRepoToOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName,
        'repository_id': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesCheckPermissionsForDevcontainer operation.
     * @callback module:api/CodespacesApi~codespacesCheckPermissionsForDevcontainerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodespacesPermissionsCheckForDevcontainer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if permissions defined by a devcontainer have been accepted by the authenticated user
     * Checks whether the permissions defined by a given devcontainer configuration have been accepted by the authenticated user.  OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} ref The git reference that points to the location of the devcontainer configuration to use for the permission check. The value of `ref` will typically be a branch name (`heads/BRANCH_NAME`). For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.
     * @param {String} devcontainerPath Path to the devcontainer.json configuration to use for the permission check.
     * @param {module:api/CodespacesApi~codespacesCheckPermissionsForDevcontainerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodespacesPermissionsCheckForDevcontainer}
     */
    codespacesCheckPermissionsForDevcontainer(owner, repo, ref, devcontainerPath, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling codespacesCheckPermissionsForDevcontainer");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling codespacesCheckPermissionsForDevcontainer");
      }
      // verify the required parameter 'ref' is set
      if (ref === undefined || ref === null) {
        throw new Error("Missing the required parameter 'ref' when calling codespacesCheckPermissionsForDevcontainer");
      }
      // verify the required parameter 'devcontainerPath' is set
      if (devcontainerPath === undefined || devcontainerPath === null) {
        throw new Error("Missing the required parameter 'devcontainerPath' when calling codespacesCheckPermissionsForDevcontainer");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'ref': ref,
        'devcontainer_path': devcontainerPath
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CodespacesPermissionsCheckForDevcontainer;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/codespaces/permissions_check', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesCodespaceMachinesForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesCodespaceMachinesForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodespacesRepoMachinesForAuthenticatedUser200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List machine types for a codespace
     * List the machine types a codespace can transition to use.  OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     * @param {String} codespaceName The name of the codespace.
     * @param {module:api/CodespacesApi~codespacesCodespaceMachinesForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodespacesRepoMachinesForAuthenticatedUser200Response}
     */
    codespacesCodespaceMachinesForAuthenticatedUser(codespaceName, callback) {
      let postBody = null;
      // verify the required parameter 'codespaceName' is set
      if (codespaceName === undefined || codespaceName === null) {
        throw new Error("Missing the required parameter 'codespaceName' when calling codespacesCodespaceMachinesForAuthenticatedUser");
      }

      let pathParams = {
        'codespace_name': codespaceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CodespacesRepoMachinesForAuthenticatedUser200Response;
      return this.apiClient.callApi(
        '/user/codespaces/{codespace_name}/machines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesCreateForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesCreateForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Codespace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a codespace for the authenticated user
     * Creates a new codespace, owned by the authenticated user.  This endpoint requires either a `repository_id` OR a `pull_request` but not both.  OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     * @param {module:model/CodespacesCreateForAuthenticatedUserRequest} codespacesCreateForAuthenticatedUserRequest 
     * @param {module:api/CodespacesApi~codespacesCreateForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Codespace}
     */
    codespacesCreateForAuthenticatedUser(codespacesCreateForAuthenticatedUserRequest, callback) {
      let postBody = codespacesCreateForAuthenticatedUserRequest;
      // verify the required parameter 'codespacesCreateForAuthenticatedUserRequest' is set
      if (codespacesCreateForAuthenticatedUserRequest === undefined || codespacesCreateForAuthenticatedUserRequest === null) {
        throw new Error("Missing the required parameter 'codespacesCreateForAuthenticatedUserRequest' when calling codespacesCreateForAuthenticatedUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Codespace;
      return this.apiClient.callApi(
        '/user/codespaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesCreateOrUpdateOrgSecret operation.
     * @callback module:api/CodespacesApi~codespacesCreateOrUpdateOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an organization secret
     * Creates or updates an organization development environment secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:model/CodespacesCreateOrUpdateOrgSecretRequest} codespacesCreateOrUpdateOrgSecretRequest 
     * @param {module:api/CodespacesApi~codespacesCreateOrUpdateOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    codespacesCreateOrUpdateOrgSecret(org, secretName, codespacesCreateOrUpdateOrgSecretRequest, callback) {
      let postBody = codespacesCreateOrUpdateOrgSecretRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling codespacesCreateOrUpdateOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling codespacesCreateOrUpdateOrgSecret");
      }
      // verify the required parameter 'codespacesCreateOrUpdateOrgSecretRequest' is set
      if (codespacesCreateOrUpdateOrgSecretRequest === undefined || codespacesCreateOrUpdateOrgSecretRequest === null) {
        throw new Error("Missing the required parameter 'codespacesCreateOrUpdateOrgSecretRequest' when calling codespacesCreateOrUpdateOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/orgs/{org}/codespaces/secrets/{secret_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesCreateOrUpdateRepoSecret operation.
     * @callback module:api/CodespacesApi~codespacesCreateOrUpdateRepoSecretCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a repository secret
     * Creates or updates a repository development environment secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:model/CodespacesCreateOrUpdateRepoSecretRequest} codespacesCreateOrUpdateRepoSecretRequest 
     * @param {module:api/CodespacesApi~codespacesCreateOrUpdateRepoSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    codespacesCreateOrUpdateRepoSecret(owner, repo, secretName, codespacesCreateOrUpdateRepoSecretRequest, callback) {
      let postBody = codespacesCreateOrUpdateRepoSecretRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling codespacesCreateOrUpdateRepoSecret");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling codespacesCreateOrUpdateRepoSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling codespacesCreateOrUpdateRepoSecret");
      }
      // verify the required parameter 'codespacesCreateOrUpdateRepoSecretRequest' is set
      if (codespacesCreateOrUpdateRepoSecretRequest === undefined || codespacesCreateOrUpdateRepoSecretRequest === null) {
        throw new Error("Missing the required parameter 'codespacesCreateOrUpdateRepoSecretRequest' when calling codespacesCreateOrUpdateRepoSecret");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/codespaces/secrets/{secret_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesCreateOrUpdateSecretForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesCreateOrUpdateSecretForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a secret for the authenticated user
     * Creates or updates a development environment secret for a user's codespace with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \"[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\"  The authenticated user must have Codespaces access to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
     * @param {String} secretName The name of the secret.
     * @param {module:model/CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest} codespacesCreateOrUpdateSecretForAuthenticatedUserRequest 
     * @param {module:api/CodespacesApi~codespacesCreateOrUpdateSecretForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    codespacesCreateOrUpdateSecretForAuthenticatedUser(secretName, codespacesCreateOrUpdateSecretForAuthenticatedUserRequest, callback) {
      let postBody = codespacesCreateOrUpdateSecretForAuthenticatedUserRequest;
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling codespacesCreateOrUpdateSecretForAuthenticatedUser");
      }
      // verify the required parameter 'codespacesCreateOrUpdateSecretForAuthenticatedUserRequest' is set
      if (codespacesCreateOrUpdateSecretForAuthenticatedUserRequest === undefined || codespacesCreateOrUpdateSecretForAuthenticatedUserRequest === null) {
        throw new Error("Missing the required parameter 'codespacesCreateOrUpdateSecretForAuthenticatedUserRequest' when calling codespacesCreateOrUpdateSecretForAuthenticatedUser");
      }

      let pathParams = {
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/user/codespaces/secrets/{secret_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesCreateWithPrForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesCreateWithPrForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Codespace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a codespace from a pull request
     * Creates a codespace owned by the authenticated user for the specified pull request.  OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} pullNumber The number that identifies the pull request.
     * @param {module:model/CodespacesCreateWithPrForAuthenticatedUserRequest} codespacesCreateWithPrForAuthenticatedUserRequest 
     * @param {module:api/CodespacesApi~codespacesCreateWithPrForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Codespace}
     */
    codespacesCreateWithPrForAuthenticatedUser(owner, repo, pullNumber, codespacesCreateWithPrForAuthenticatedUserRequest, callback) {
      let postBody = codespacesCreateWithPrForAuthenticatedUserRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling codespacesCreateWithPrForAuthenticatedUser");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling codespacesCreateWithPrForAuthenticatedUser");
      }
      // verify the required parameter 'pullNumber' is set
      if (pullNumber === undefined || pullNumber === null) {
        throw new Error("Missing the required parameter 'pullNumber' when calling codespacesCreateWithPrForAuthenticatedUser");
      }
      // verify the required parameter 'codespacesCreateWithPrForAuthenticatedUserRequest' is set
      if (codespacesCreateWithPrForAuthenticatedUserRequest === undefined || codespacesCreateWithPrForAuthenticatedUserRequest === null) {
        throw new Error("Missing the required parameter 'codespacesCreateWithPrForAuthenticatedUserRequest' when calling codespacesCreateWithPrForAuthenticatedUser");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'pull_number': pullNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Codespace;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/pulls/{pull_number}/codespaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesCreateWithRepoForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesCreateWithRepoForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Codespace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a codespace in a repository
     * Creates a codespace owned by the authenticated user in the specified repository.  OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:model/CodespacesCreateWithRepoForAuthenticatedUserRequest} codespacesCreateWithRepoForAuthenticatedUserRequest 
     * @param {module:api/CodespacesApi~codespacesCreateWithRepoForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Codespace}
     */
    codespacesCreateWithRepoForAuthenticatedUser(owner, repo, codespacesCreateWithRepoForAuthenticatedUserRequest, callback) {
      let postBody = codespacesCreateWithRepoForAuthenticatedUserRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling codespacesCreateWithRepoForAuthenticatedUser");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling codespacesCreateWithRepoForAuthenticatedUser");
      }
      // verify the required parameter 'codespacesCreateWithRepoForAuthenticatedUserRequest' is set
      if (codespacesCreateWithRepoForAuthenticatedUserRequest === undefined || codespacesCreateWithRepoForAuthenticatedUserRequest === null) {
        throw new Error("Missing the required parameter 'codespacesCreateWithRepoForAuthenticatedUserRequest' when calling codespacesCreateWithRepoForAuthenticatedUser");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = Codespace;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/codespaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesDeleteCodespacesAccessUsers operation.
     * @callback module:api/CodespacesApi~codespacesDeleteCodespacesAccessUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove users from Codespaces access for an organization
     * Codespaces for the specified users will no longer be billed to the organization.  To use this endpoint, the access settings for the organization must be set to `selected_members`. For information on how to change this setting, see \"[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces).\"  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/CodespacesDeleteCodespacesAccessUsersRequest} codespacesDeleteCodespacesAccessUsersRequest 
     * @param {module:api/CodespacesApi~codespacesDeleteCodespacesAccessUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codespacesDeleteCodespacesAccessUsers(org, codespacesDeleteCodespacesAccessUsersRequest, callback) {
      let postBody = codespacesDeleteCodespacesAccessUsersRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling codespacesDeleteCodespacesAccessUsers");
      }
      // verify the required parameter 'codespacesDeleteCodespacesAccessUsersRequest' is set
      if (codespacesDeleteCodespacesAccessUsersRequest === undefined || codespacesDeleteCodespacesAccessUsersRequest === null) {
        throw new Error("Missing the required parameter 'codespacesDeleteCodespacesAccessUsersRequest' when calling codespacesDeleteCodespacesAccessUsers");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/codespaces/access/selected_users', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesDeleteForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesDeleteForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a codespace for the authenticated user
     * Deletes a user's codespace.  OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     * @param {String} codespaceName The name of the codespace.
     * @param {module:api/CodespacesApi~codespacesDeleteForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    codespacesDeleteForAuthenticatedUser(codespaceName, callback) {
      let postBody = null;
      // verify the required parameter 'codespaceName' is set
      if (codespaceName === undefined || codespaceName === null) {
        throw new Error("Missing the required parameter 'codespaceName' when calling codespacesDeleteForAuthenticatedUser");
      }

      let pathParams = {
        'codespace_name': codespaceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/user/codespaces/{codespace_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesDeleteFromOrganization operation.
     * @callback module:api/CodespacesApi~codespacesDeleteFromOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a codespace from the organization
     * Deletes a user's codespace.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} username The handle for the GitHub user account.
     * @param {String} codespaceName The name of the codespace.
     * @param {module:api/CodespacesApi~codespacesDeleteFromOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    codespacesDeleteFromOrganization(org, username, codespaceName, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling codespacesDeleteFromOrganization");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling codespacesDeleteFromOrganization");
      }
      // verify the required parameter 'codespaceName' is set
      if (codespaceName === undefined || codespaceName === null) {
        throw new Error("Missing the required parameter 'codespaceName' when calling codespacesDeleteFromOrganization");
      }

      let pathParams = {
        'org': org,
        'username': username,
        'codespace_name': codespaceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/orgs/{org}/members/{username}/codespaces/{codespace_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesDeleteOrgSecret operation.
     * @callback module:api/CodespacesApi~codespacesDeleteOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an organization secret
     * Deletes an organization development environment secret using the secret name.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:api/CodespacesApi~codespacesDeleteOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codespacesDeleteOrgSecret(org, secretName, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling codespacesDeleteOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling codespacesDeleteOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/codespaces/secrets/{secret_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesDeleteRepoSecret operation.
     * @callback module:api/CodespacesApi~codespacesDeleteRepoSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a repository secret
     * Deletes a development environment secret in a repository using the secret name.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:api/CodespacesApi~codespacesDeleteRepoSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codespacesDeleteRepoSecret(owner, repo, secretName, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling codespacesDeleteRepoSecret");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling codespacesDeleteRepoSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling codespacesDeleteRepoSecret");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/codespaces/secrets/{secret_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesDeleteSecretForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesDeleteSecretForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a secret for the authenticated user
     * Deletes a development environment secret from a user's codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.  The authenticated user must have Codespaces access to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
     * @param {String} secretName The name of the secret.
     * @param {module:api/CodespacesApi~codespacesDeleteSecretForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codespacesDeleteSecretForAuthenticatedUser(secretName, callback) {
      let postBody = null;
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling codespacesDeleteSecretForAuthenticatedUser");
      }

      let pathParams = {
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/codespaces/secrets/{secret_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesExportForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesExportForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodespaceExportDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export a codespace for the authenticated user
     * Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.  If changes cannot be pushed to the codespace's repository, they will be pushed to a new or previously-existing fork instead.  OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     * @param {String} codespaceName The name of the codespace.
     * @param {module:api/CodespacesApi~codespacesExportForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodespaceExportDetails}
     */
    codespacesExportForAuthenticatedUser(codespaceName, callback) {
      let postBody = null;
      // verify the required parameter 'codespaceName' is set
      if (codespaceName === undefined || codespaceName === null) {
        throw new Error("Missing the required parameter 'codespaceName' when calling codespacesExportForAuthenticatedUser");
      }

      let pathParams = {
        'codespace_name': codespaceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CodespaceExportDetails;
      return this.apiClient.callApi(
        '/user/codespaces/{codespace_name}/exports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesGetCodespacesForUserInOrg operation.
     * @callback module:api/CodespacesApi~codespacesGetCodespacesForUserInOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodespacesListInOrganization200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List codespaces for a user in organization
     * Lists the codespaces that a member of an organization has for repositories in that organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} username The handle for the GitHub user account.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/CodespacesApi~codespacesGetCodespacesForUserInOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodespacesListInOrganization200Response}
     */
    codespacesGetCodespacesForUserInOrg(org, username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling codespacesGetCodespacesForUserInOrg");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling codespacesGetCodespacesForUserInOrg");
      }

      let pathParams = {
        'org': org,
        'username': username
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CodespacesListInOrganization200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/members/{username}/codespaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesGetExportDetailsForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesGetExportDetailsForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodespaceExportDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details about a codespace export
     * Gets information about an export of a codespace.  OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     * @param {String} codespaceName The name of the codespace.
     * @param {String} exportId The ID of the export operation, or `latest`. Currently only `latest` is currently supported.
     * @param {module:api/CodespacesApi~codespacesGetExportDetailsForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodespaceExportDetails}
     */
    codespacesGetExportDetailsForAuthenticatedUser(codespaceName, exportId, callback) {
      let postBody = null;
      // verify the required parameter 'codespaceName' is set
      if (codespaceName === undefined || codespaceName === null) {
        throw new Error("Missing the required parameter 'codespaceName' when calling codespacesGetExportDetailsForAuthenticatedUser");
      }
      // verify the required parameter 'exportId' is set
      if (exportId === undefined || exportId === null) {
        throw new Error("Missing the required parameter 'exportId' when calling codespacesGetExportDetailsForAuthenticatedUser");
      }

      let pathParams = {
        'codespace_name': codespaceName,
        'export_id': exportId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CodespaceExportDetails;
      return this.apiClient.callApi(
        '/user/codespaces/{codespace_name}/exports/{export_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesGetForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesGetForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Codespace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a codespace for the authenticated user
     * Gets information about a user's codespace.  OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     * @param {String} codespaceName The name of the codespace.
     * @param {module:api/CodespacesApi~codespacesGetForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Codespace}
     */
    codespacesGetForAuthenticatedUser(codespaceName, callback) {
      let postBody = null;
      // verify the required parameter 'codespaceName' is set
      if (codespaceName === undefined || codespaceName === null) {
        throw new Error("Missing the required parameter 'codespaceName' when calling codespacesGetForAuthenticatedUser");
      }

      let pathParams = {
        'codespace_name': codespaceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Codespace;
      return this.apiClient.callApi(
        '/user/codespaces/{codespace_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesGetOrgPublicKey operation.
     * @callback module:api/CodespacesApi~codespacesGetOrgPublicKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodespacesPublicKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an organization public key
     * Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/CodespacesApi~codespacesGetOrgPublicKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodespacesPublicKey}
     */
    codespacesGetOrgPublicKey(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling codespacesGetOrgPublicKey");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CodespacesPublicKey;
      return this.apiClient.callApi(
        '/orgs/{org}/codespaces/secrets/public-key', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesGetOrgSecret operation.
     * @callback module:api/CodespacesApi~codespacesGetOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodespacesOrgSecret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an organization secret
     * Gets an organization development environment secret without revealing its encrypted value.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:api/CodespacesApi~codespacesGetOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodespacesOrgSecret}
     */
    codespacesGetOrgSecret(org, secretName, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling codespacesGetOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling codespacesGetOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CodespacesOrgSecret;
      return this.apiClient.callApi(
        '/orgs/{org}/codespaces/secrets/{secret_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesGetPublicKeyForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesGetPublicKeyForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodespacesUserPublicKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get public key for the authenticated user
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.  The authenticated user must have Codespaces access to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
     * @param {module:api/CodespacesApi~codespacesGetPublicKeyForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodespacesUserPublicKey}
     */
    codespacesGetPublicKeyForAuthenticatedUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CodespacesUserPublicKey;
      return this.apiClient.callApi(
        '/user/codespaces/secrets/public-key', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesGetRepoPublicKey operation.
     * @callback module:api/CodespacesApi~codespacesGetRepoPublicKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodespacesPublicKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a repository public key
     * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:api/CodespacesApi~codespacesGetRepoPublicKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodespacesPublicKey}
     */
    codespacesGetRepoPublicKey(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling codespacesGetRepoPublicKey");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling codespacesGetRepoPublicKey");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CodespacesPublicKey;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/codespaces/secrets/public-key', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesGetRepoSecret operation.
     * @callback module:api/CodespacesApi~codespacesGetRepoSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoCodespacesSecret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a repository secret
     * Gets a single repository development environment secret without revealing its encrypted value.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:api/CodespacesApi~codespacesGetRepoSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoCodespacesSecret}
     */
    codespacesGetRepoSecret(owner, repo, secretName, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling codespacesGetRepoSecret");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling codespacesGetRepoSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling codespacesGetRepoSecret");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepoCodespacesSecret;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/codespaces/secrets/{secret_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesGetSecretForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesGetSecretForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodespacesSecret} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a secret for the authenticated user
     * Gets a development environment secret available to a user's codespaces without revealing its encrypted value.  The authenticated user must have Codespaces access to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
     * @param {String} secretName The name of the secret.
     * @param {module:api/CodespacesApi~codespacesGetSecretForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodespacesSecret}
     */
    codespacesGetSecretForAuthenticatedUser(secretName, callback) {
      let postBody = null;
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling codespacesGetSecretForAuthenticatedUser");
      }

      let pathParams = {
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CodespacesSecret;
      return this.apiClient.callApi(
        '/user/codespaces/secrets/{secret_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesListDevcontainersInRepositoryForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesListDevcontainersInRepositoryForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodespacesListDevcontainersInRepositoryForAuthenticatedUser200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List devcontainer configurations in a repository for the authenticated user
     * Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files specify launchpoint configurations for codespaces created within the repository.  OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/CodespacesApi~codespacesListDevcontainersInRepositoryForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodespacesListDevcontainersInRepositoryForAuthenticatedUser200Response}
     */
    codespacesListDevcontainersInRepositoryForAuthenticatedUser(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling codespacesListDevcontainersInRepositoryForAuthenticatedUser");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling codespacesListDevcontainersInRepositoryForAuthenticatedUser");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = CodespacesListDevcontainersInRepositoryForAuthenticatedUser200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/codespaces/devcontainers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesListForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesListForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodespacesListInOrganization200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List codespaces for the authenticated user
     * Lists the authenticated user's codespaces.  OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [repositoryId] ID of the Repository to filter on
     * @param {module:api/CodespacesApi~codespacesListForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodespacesListInOrganization200Response}
     */
    codespacesListForAuthenticatedUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page'],
        'repository_id': opts['repositoryId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CodespacesListInOrganization200Response;
      return this.apiClient.callApi(
        '/user/codespaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesListInOrganization operation.
     * @callback module:api/CodespacesApi~codespacesListInOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodespacesListInOrganization200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List codespaces for the organization
     * Lists the codespaces associated to a specified organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/CodespacesApi~codespacesListInOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodespacesListInOrganization200Response}
     */
    codespacesListInOrganization(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling codespacesListInOrganization");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CodespacesListInOrganization200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/codespaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesListInRepositoryForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesListInRepositoryForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodespacesListInOrganization200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List codespaces in a repository for the authenticated user
     * Lists the codespaces associated to a specified repository and the authenticated user.  OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/CodespacesApi~codespacesListInRepositoryForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodespacesListInOrganization200Response}
     */
    codespacesListInRepositoryForAuthenticatedUser(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling codespacesListInRepositoryForAuthenticatedUser");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling codespacesListInRepositoryForAuthenticatedUser");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CodespacesListInOrganization200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/codespaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesListOrgSecrets operation.
     * @callback module:api/CodespacesApi~codespacesListOrgSecretsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodespacesListOrgSecrets200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organization secrets
     * Lists all Codespaces development environment secrets available at the organization-level without revealing their encrypted values.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/CodespacesApi~codespacesListOrgSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodespacesListOrgSecrets200Response}
     */
    codespacesListOrgSecrets(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling codespacesListOrgSecrets");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CodespacesListOrgSecrets200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/codespaces/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesListRepoSecrets operation.
     * @callback module:api/CodespacesApi~codespacesListRepoSecretsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodespacesListRepoSecrets200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repository secrets
     * Lists all development environment secrets available in a repository without revealing their encrypted values.  OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/CodespacesApi~codespacesListRepoSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodespacesListRepoSecrets200Response}
     */
    codespacesListRepoSecrets(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling codespacesListRepoSecrets");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling codespacesListRepoSecrets");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CodespacesListRepoSecrets200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/codespaces/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesListRepositoriesForSecretForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesListRepositoriesForSecretForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListSelectedReposForOrgSecret200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List selected repositories for a user secret
     * List the repositories that have been granted the ability to use a user's development environment secret.  The authenticated user must have Codespaces access to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
     * @param {String} secretName The name of the secret.
     * @param {module:api/CodespacesApi~codespacesListRepositoriesForSecretForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListSelectedReposForOrgSecret200Response}
     */
    codespacesListRepositoriesForSecretForAuthenticatedUser(secretName, callback) {
      let postBody = null;
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling codespacesListRepositoriesForSecretForAuthenticatedUser");
      }

      let pathParams = {
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListSelectedReposForOrgSecret200Response;
      return this.apiClient.callApi(
        '/user/codespaces/secrets/{secret_name}/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesListSecretsForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesListSecretsForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodespacesListSecretsForAuthenticatedUser200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List secrets for the authenticated user
     * Lists all development environment secrets available for a user's codespaces without revealing their encrypted values.  The authenticated user must have Codespaces access to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/CodespacesApi~codespacesListSecretsForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodespacesListSecretsForAuthenticatedUser200Response}
     */
    codespacesListSecretsForAuthenticatedUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CodespacesListSecretsForAuthenticatedUser200Response;
      return this.apiClient.callApi(
        '/user/codespaces/secrets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesListSelectedReposForOrgSecret operation.
     * @callback module:api/CodespacesApi~codespacesListSelectedReposForOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionsListSelectedReposForOrgSecret200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List selected repositories for an organization secret
     * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/CodespacesApi~codespacesListSelectedReposForOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionsListSelectedReposForOrgSecret200Response}
     */
    codespacesListSelectedReposForOrgSecret(org, secretName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling codespacesListSelectedReposForOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling codespacesListSelectedReposForOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionsListSelectedReposForOrgSecret200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/codespaces/secrets/{secret_name}/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesPreFlightWithRepoForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesPreFlightWithRepoForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodespacesPreFlightWithRepoForAuthenticatedUser200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get default attributes for a codespace
     * Gets the default attributes for codespaces created by the user with the repository.  OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {String} [ref] The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked.
     * @param {String} [clientIp] An alternative IP for default location auto-detection, such as when proxying a request.
     * @param {module:api/CodespacesApi~codespacesPreFlightWithRepoForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodespacesPreFlightWithRepoForAuthenticatedUser200Response}
     */
    codespacesPreFlightWithRepoForAuthenticatedUser(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling codespacesPreFlightWithRepoForAuthenticatedUser");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling codespacesPreFlightWithRepoForAuthenticatedUser");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'ref': opts['ref'],
        'client_ip': opts['clientIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CodespacesPreFlightWithRepoForAuthenticatedUser200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/codespaces/new', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesPublishForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesPublishForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodespaceWithFullRepository} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a repository from an unpublished codespace
     * Publishes an unpublished codespace, creating a new repository and assigning it to the codespace.  The codespace's token is granted write permissions to the repository, allowing the user to push their changes.  This will fail for a codespace that is already published, meaning it has an associated repository.  OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     * @param {String} codespaceName The name of the codespace.
     * @param {module:model/CodespacesPublishForAuthenticatedUserRequest} codespacesPublishForAuthenticatedUserRequest 
     * @param {module:api/CodespacesApi~codespacesPublishForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodespaceWithFullRepository}
     */
    codespacesPublishForAuthenticatedUser(codespaceName, codespacesPublishForAuthenticatedUserRequest, callback) {
      let postBody = codespacesPublishForAuthenticatedUserRequest;
      // verify the required parameter 'codespaceName' is set
      if (codespaceName === undefined || codespaceName === null) {
        throw new Error("Missing the required parameter 'codespaceName' when calling codespacesPublishForAuthenticatedUser");
      }
      // verify the required parameter 'codespacesPublishForAuthenticatedUserRequest' is set
      if (codespacesPublishForAuthenticatedUserRequest === undefined || codespacesPublishForAuthenticatedUserRequest === null) {
        throw new Error("Missing the required parameter 'codespacesPublishForAuthenticatedUserRequest' when calling codespacesPublishForAuthenticatedUser");
      }

      let pathParams = {
        'codespace_name': codespaceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CodespaceWithFullRepository;
      return this.apiClient.callApi(
        '/user/codespaces/{codespace_name}/publish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesRemoveRepositoryForSecretForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesRemoveRepositoryForSecretForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a selected repository from a user secret
     * Removes a repository from the selected repositories for a user's development environment secret.  The authenticated user must have Codespaces access to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
     * @param {String} secretName The name of the secret.
     * @param {Number} repositoryId 
     * @param {module:api/CodespacesApi~codespacesRemoveRepositoryForSecretForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codespacesRemoveRepositoryForSecretForAuthenticatedUser(secretName, repositoryId, callback) {
      let postBody = null;
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling codespacesRemoveRepositoryForSecretForAuthenticatedUser");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling codespacesRemoveRepositoryForSecretForAuthenticatedUser");
      }

      let pathParams = {
        'secret_name': secretName,
        'repository_id': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/codespaces/secrets/{secret_name}/repositories/{repository_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesRemoveSelectedRepoFromOrgSecret operation.
     * @callback module:api/CodespacesApi~codespacesRemoveSelectedRepoFromOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove selected repository from an organization secret
     * Removes a repository from an organization development environment secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {Number} repositoryId 
     * @param {module:api/CodespacesApi~codespacesRemoveSelectedRepoFromOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codespacesRemoveSelectedRepoFromOrgSecret(org, secretName, repositoryId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling codespacesRemoveSelectedRepoFromOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling codespacesRemoveSelectedRepoFromOrgSecret");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling codespacesRemoveSelectedRepoFromOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName,
        'repository_id': repositoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesRepoMachinesForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesRepoMachinesForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CodespacesRepoMachinesForAuthenticatedUser200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List available machine types for a repository
     * List the machine types available for a given repository based on its configuration.  OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {String} [location] The location to check for available machines. Assigned by IP if not provided.
     * @param {String} [clientIp] IP for location auto-detection when proxying a request
     * @param {String} [ref] The branch or commit to check for prebuild availability and devcontainer restrictions.
     * @param {module:api/CodespacesApi~codespacesRepoMachinesForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CodespacesRepoMachinesForAuthenticatedUser200Response}
     */
    codespacesRepoMachinesForAuthenticatedUser(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling codespacesRepoMachinesForAuthenticatedUser");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling codespacesRepoMachinesForAuthenticatedUser");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'location': opts['location'],
        'client_ip': opts['clientIp'],
        'ref': opts['ref']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CodespacesRepoMachinesForAuthenticatedUser200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/codespaces/machines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesSetCodespacesAccess operation.
     * @callback module:api/CodespacesApi~codespacesSetCodespacesAccessCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Manage access control for organization codespaces
     * Sets which users can access codespaces in an organization. This is synonymous with granting or revoking codespaces access permissions for users according to the visibility. OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/CodespacesSetCodespacesAccessRequest} codespacesSetCodespacesAccessRequest 
     * @param {module:api/CodespacesApi~codespacesSetCodespacesAccessCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codespacesSetCodespacesAccess(org, codespacesSetCodespacesAccessRequest, callback) {
      let postBody = codespacesSetCodespacesAccessRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling codespacesSetCodespacesAccess");
      }
      // verify the required parameter 'codespacesSetCodespacesAccessRequest' is set
      if (codespacesSetCodespacesAccessRequest === undefined || codespacesSetCodespacesAccessRequest === null) {
        throw new Error("Missing the required parameter 'codespacesSetCodespacesAccessRequest' when calling codespacesSetCodespacesAccess");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/codespaces/access', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesSetCodespacesAccessUsers operation.
     * @callback module:api/CodespacesApi~codespacesSetCodespacesAccessUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add users to Codespaces access for an organization
     * Codespaces for the specified users will be billed to the organization.  To use this endpoint, the access settings for the organization must be set to `selected_members`. For information on how to change this setting, see \"[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces).\"  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/CodespacesSetCodespacesAccessUsersRequest} codespacesSetCodespacesAccessUsersRequest 
     * @param {module:api/CodespacesApi~codespacesSetCodespacesAccessUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codespacesSetCodespacesAccessUsers(org, codespacesSetCodespacesAccessUsersRequest, callback) {
      let postBody = codespacesSetCodespacesAccessUsersRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling codespacesSetCodespacesAccessUsers");
      }
      // verify the required parameter 'codespacesSetCodespacesAccessUsersRequest' is set
      if (codespacesSetCodespacesAccessUsersRequest === undefined || codespacesSetCodespacesAccessUsersRequest === null) {
        throw new Error("Missing the required parameter 'codespacesSetCodespacesAccessUsersRequest' when calling codespacesSetCodespacesAccessUsers");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/codespaces/access/selected_users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesSetRepositoriesForSecretForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesSetRepositoriesForSecretForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set selected repositories for a user secret
     * Select the repositories that will use a user's development environment secret.  The authenticated user must have Codespaces access to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
     * @param {String} secretName The name of the secret.
     * @param {module:model/CodespacesSetRepositoriesForSecretForAuthenticatedUserRequest} codespacesSetRepositoriesForSecretForAuthenticatedUserRequest 
     * @param {module:api/CodespacesApi~codespacesSetRepositoriesForSecretForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codespacesSetRepositoriesForSecretForAuthenticatedUser(secretName, codespacesSetRepositoriesForSecretForAuthenticatedUserRequest, callback) {
      let postBody = codespacesSetRepositoriesForSecretForAuthenticatedUserRequest;
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling codespacesSetRepositoriesForSecretForAuthenticatedUser");
      }
      // verify the required parameter 'codespacesSetRepositoriesForSecretForAuthenticatedUserRequest' is set
      if (codespacesSetRepositoriesForSecretForAuthenticatedUserRequest === undefined || codespacesSetRepositoriesForSecretForAuthenticatedUserRequest === null) {
        throw new Error("Missing the required parameter 'codespacesSetRepositoriesForSecretForAuthenticatedUserRequest' when calling codespacesSetRepositoriesForSecretForAuthenticatedUser");
      }

      let pathParams = {
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/codespaces/secrets/{secret_name}/repositories', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesSetSelectedReposForOrgSecret operation.
     * @callback module:api/CodespacesApi~codespacesSetSelectedReposForOrgSecretCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set selected repositories for an organization secret
     * Replaces all repositories for an organization development environment secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} secretName The name of the secret.
     * @param {module:model/CodespacesSetSelectedReposForOrgSecretRequest} codespacesSetSelectedReposForOrgSecretRequest 
     * @param {module:api/CodespacesApi~codespacesSetSelectedReposForOrgSecretCallback} callback The callback function, accepting three arguments: error, data, response
     */
    codespacesSetSelectedReposForOrgSecret(org, secretName, codespacesSetSelectedReposForOrgSecretRequest, callback) {
      let postBody = codespacesSetSelectedReposForOrgSecretRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling codespacesSetSelectedReposForOrgSecret");
      }
      // verify the required parameter 'secretName' is set
      if (secretName === undefined || secretName === null) {
        throw new Error("Missing the required parameter 'secretName' when calling codespacesSetSelectedReposForOrgSecret");
      }
      // verify the required parameter 'codespacesSetSelectedReposForOrgSecretRequest' is set
      if (codespacesSetSelectedReposForOrgSecretRequest === undefined || codespacesSetSelectedReposForOrgSecretRequest === null) {
        throw new Error("Missing the required parameter 'codespacesSetSelectedReposForOrgSecretRequest' when calling codespacesSetSelectedReposForOrgSecret");
      }

      let pathParams = {
        'org': org,
        'secret_name': secretName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/codespaces/secrets/{secret_name}/repositories', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesStartForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesStartForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Codespace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a codespace for the authenticated user
     * Starts a user's codespace.  OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     * @param {String} codespaceName The name of the codespace.
     * @param {module:api/CodespacesApi~codespacesStartForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Codespace}
     */
    codespacesStartForAuthenticatedUser(codespaceName, callback) {
      let postBody = null;
      // verify the required parameter 'codespaceName' is set
      if (codespaceName === undefined || codespaceName === null) {
        throw new Error("Missing the required parameter 'codespaceName' when calling codespacesStartForAuthenticatedUser");
      }

      let pathParams = {
        'codespace_name': codespaceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = Codespace;
      return this.apiClient.callApi(
        '/user/codespaces/{codespace_name}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesStopForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesStopForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Codespace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop a codespace for the authenticated user
     * Stops a user's codespace.  OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     * @param {String} codespaceName The name of the codespace.
     * @param {module:api/CodespacesApi~codespacesStopForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Codespace}
     */
    codespacesStopForAuthenticatedUser(codespaceName, callback) {
      let postBody = null;
      // verify the required parameter 'codespaceName' is set
      if (codespaceName === undefined || codespaceName === null) {
        throw new Error("Missing the required parameter 'codespaceName' when calling codespacesStopForAuthenticatedUser");
      }

      let pathParams = {
        'codespace_name': codespaceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Codespace;
      return this.apiClient.callApi(
        '/user/codespaces/{codespace_name}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesStopInOrganization operation.
     * @callback module:api/CodespacesApi~codespacesStopInOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Codespace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop a codespace for an organization user
     * Stops a user's codespace.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} username The handle for the GitHub user account.
     * @param {String} codespaceName The name of the codespace.
     * @param {module:api/CodespacesApi~codespacesStopInOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Codespace}
     */
    codespacesStopInOrganization(org, username, codespaceName, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling codespacesStopInOrganization");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling codespacesStopInOrganization");
      }
      // verify the required parameter 'codespaceName' is set
      if (codespaceName === undefined || codespaceName === null) {
        throw new Error("Missing the required parameter 'codespaceName' when calling codespacesStopInOrganization");
      }

      let pathParams = {
        'org': org,
        'username': username,
        'codespace_name': codespaceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Codespace;
      return this.apiClient.callApi(
        '/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the codespacesUpdateForAuthenticatedUser operation.
     * @callback module:api/CodespacesApi~codespacesUpdateForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Codespace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a codespace for the authenticated user
     * Updates a codespace owned by the authenticated user. Currently only the codespace's machine type and recent folders can be modified using this endpoint.  If you specify a new machine type it will be applied the next time your codespace is started.  OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
     * @param {String} codespaceName The name of the codespace.
     * @param {Object} opts Optional parameters
     * @param {module:model/CodespacesUpdateForAuthenticatedUserRequest} [codespacesUpdateForAuthenticatedUserRequest] 
     * @param {module:api/CodespacesApi~codespacesUpdateForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Codespace}
     */
    codespacesUpdateForAuthenticatedUser(codespaceName, opts, callback) {
      opts = opts || {};
      let postBody = opts['codespacesUpdateForAuthenticatedUserRequest'];
      // verify the required parameter 'codespaceName' is set
      if (codespaceName === undefined || codespaceName === null) {
        throw new Error("Missing the required parameter 'codespaceName' when calling codespacesUpdateForAuthenticatedUser");
      }

      let pathParams = {
        'codespace_name': codespaceName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Codespace;
      return this.apiClient.callApi(
        '/user/codespaces/{codespace_name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
