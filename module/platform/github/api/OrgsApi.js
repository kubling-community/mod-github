/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HookDelivery from '../model/HookDelivery';
import HookDeliveryItem from '../model/HookDeliveryItem';
import MinimalRepository from '../model/MinimalRepository';
import OrgCustomProperty from '../model/OrgCustomProperty';
import OrgHook from '../model/OrgHook';
import OrgMembership from '../model/OrgMembership';
import OrgRepoCustomPropertyValues from '../model/OrgRepoCustomPropertyValues';
import OrganizationFineGrainedPermission from '../model/OrganizationFineGrainedPermission';
import OrganizationFull from '../model/OrganizationFull';
import OrganizationInvitation from '../model/OrganizationInvitation';
import OrganizationProgrammaticAccessGrant from '../model/OrganizationProgrammaticAccessGrant';
import OrganizationProgrammaticAccessGrantRequest from '../model/OrganizationProgrammaticAccessGrantRequest';
import OrganizationRole from '../model/OrganizationRole';
import OrganizationSimple from '../model/OrganizationSimple';
import OrgsListAppInstallations200Response from '../model/OrgsListAppInstallations200Response';
import OrgsListOrgRoles200Response from '../model/OrgsListOrgRoles200Response';
import SimpleUser from '../model/SimpleUser';
import Team from '../model/Team';
import TeamSimple from '../model/TeamSimple';
import WebhookConfig from '../model/WebhookConfig';

/**
* Orgs service.
* @module api/OrgsApi
* @version 1.1.4
*/
export default class OrgsApi {

    /**
    * Constructs a new OrgsApi. 
    * @alias module:api/OrgsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the orgsAddSecurityManagerTeam operation.
     * @callback module:api/OrgsApi~orgsAddSecurityManagerTeamCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a security manager team
     * Adds a team as a security manager for an organization. For more information, see \"[Managing security for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) for an organization.\"  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {module:api/OrgsApi~orgsAddSecurityManagerTeamCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsAddSecurityManagerTeam(org, teamSlug, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsAddSecurityManagerTeam");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling orgsAddSecurityManagerTeam");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/security-managers/teams/{team_slug}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsAssignTeamToOrgRole operation.
     * @callback module:api/OrgsApi~orgsAssignTeamToOrgRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign an organization role to a team
     * Assigns an organization role to a team in an organization. For more information on organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {Number} roleId The unique identifier of the role.
     * @param {module:api/OrgsApi~orgsAssignTeamToOrgRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsAssignTeamToOrgRole(org, teamSlug, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsAssignTeamToOrgRole");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling orgsAssignTeamToOrgRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling orgsAssignTeamToOrgRole");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'role_id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsAssignUserToOrgRole operation.
     * @callback module:api/OrgsApi~orgsAssignUserToOrgRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign an organization role to a user
     * Assigns an organization role to a member of an organization. For more information on organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} username The handle for the GitHub user account.
     * @param {Number} roleId The unique identifier of the role.
     * @param {module:api/OrgsApi~orgsAssignUserToOrgRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsAssignUserToOrgRole(org, username, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsAssignUserToOrgRole");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling orgsAssignUserToOrgRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling orgsAssignUserToOrgRole");
      }

      let pathParams = {
        'org': org,
        'username': username,
        'role_id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/organization-roles/users/{username}/{role_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsBlockUser operation.
     * @callback module:api/OrgsApi~orgsBlockUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Block a user from an organization
     * Blocks the given user on behalf of the specified organization and returns a 204. If the organization cannot block the given user a 422 is returned.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} username The handle for the GitHub user account.
     * @param {module:api/OrgsApi~orgsBlockUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsBlockUser(org, username, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsBlockUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling orgsBlockUser");
      }

      let pathParams = {
        'org': org,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/blocks/{username}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsCancelInvitation operation.
     * @callback module:api/OrgsApi~orgsCancelInvitationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel an organization invitation
     * Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.  This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} invitationId The unique identifier of the invitation.
     * @param {module:api/OrgsApi~orgsCancelInvitationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsCancelInvitation(org, invitationId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsCancelInvitation");
      }
      // verify the required parameter 'invitationId' is set
      if (invitationId === undefined || invitationId === null) {
        throw new Error("Missing the required parameter 'invitationId' when calling orgsCancelInvitation");
      }

      let pathParams = {
        'org': org,
        'invitation_id': invitationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/invitations/{invitation_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsCheckBlockedUser operation.
     * @callback module:api/OrgsApi~orgsCheckBlockedUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a user is blocked by an organization
     * Returns a 204 if the given user is blocked by the given organization. Returns a 404 if the organization is not blocking the user, or if the user account has been identified as spam by GitHub.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} username The handle for the GitHub user account.
     * @param {module:api/OrgsApi~orgsCheckBlockedUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsCheckBlockedUser(org, username, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsCheckBlockedUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling orgsCheckBlockedUser");
      }

      let pathParams = {
        'org': org,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/blocks/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsCheckMembershipForUser operation.
     * @callback module:api/OrgsApi~orgsCheckMembershipForUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check organization membership for a user
     * Check if a user is, publicly or privately, a member of the organization.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} username The handle for the GitHub user account.
     * @param {module:api/OrgsApi~orgsCheckMembershipForUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsCheckMembershipForUser(org, username, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsCheckMembershipForUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling orgsCheckMembershipForUser");
      }

      let pathParams = {
        'org': org,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/members/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsCheckPublicMembershipForUser operation.
     * @callback module:api/OrgsApi~orgsCheckPublicMembershipForUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check public organization membership for a user
     * Check if the provided user is a public member of the organization.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} username The handle for the GitHub user account.
     * @param {module:api/OrgsApi~orgsCheckPublicMembershipForUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsCheckPublicMembershipForUser(org, username, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsCheckPublicMembershipForUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling orgsCheckPublicMembershipForUser");
      }

      let pathParams = {
        'org': org,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/public_members/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsConvertMemberToOutsideCollaborator operation.
     * @callback module:api/OrgsApi~orgsConvertMemberToOutsideCollaboratorCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert an organization member to outside collaborator
     * When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see \"[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)\". Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see \"[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories).\"
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} username The handle for the GitHub user account.
     * @param {Object} opts Optional parameters
     * @param {module:model/OrgsConvertMemberToOutsideCollaboratorRequest} [orgsConvertMemberToOutsideCollaboratorRequest] 
     * @param {module:api/OrgsApi~orgsConvertMemberToOutsideCollaboratorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    orgsConvertMemberToOutsideCollaborator(org, username, opts, callback) {
      opts = opts || {};
      let postBody = opts['orgsConvertMemberToOutsideCollaboratorRequest'];
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsConvertMemberToOutsideCollaborator");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling orgsConvertMemberToOutsideCollaborator");
      }

      let pathParams = {
        'org': org,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/orgs/{org}/outside_collaborators/{username}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsCreateCustomOrganizationRole operation.
     * @callback module:api/OrgsApi~orgsCreateCustomOrganizationRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a custom organization role
     * Creates a custom organization role that can be assigned to users and teams, granting them specific permissions over the organization. For more information on custom organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of `write_organization_custom_org_role` in the organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/OrgsCreateCustomOrganizationRoleRequest} orgsCreateCustomOrganizationRoleRequest 
     * @param {module:api/OrgsApi~orgsCreateCustomOrganizationRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationRole}
     */
    orgsCreateCustomOrganizationRole(org, orgsCreateCustomOrganizationRoleRequest, callback) {
      let postBody = orgsCreateCustomOrganizationRoleRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsCreateCustomOrganizationRole");
      }
      // verify the required parameter 'orgsCreateCustomOrganizationRoleRequest' is set
      if (orgsCreateCustomOrganizationRoleRequest === undefined || orgsCreateCustomOrganizationRoleRequest === null) {
        throw new Error("Missing the required parameter 'orgsCreateCustomOrganizationRoleRequest' when calling orgsCreateCustomOrganizationRole");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrganizationRole;
      return this.apiClient.callApi(
        '/orgs/{org}/organization-roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsCreateInvitation operation.
     * @callback module:api/OrgsApi~orgsCreateInvitationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationInvitation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an organization invitation
     * Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.  This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \"[Rate limits for the API](https://docs.github.com/rest/using-the-rest-api/rate-limits-for-the-rest-api#about-secondary-rate-limits)\" and \"[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\"
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {module:model/OrgsCreateInvitationRequest} [orgsCreateInvitationRequest] 
     * @param {module:api/OrgsApi~orgsCreateInvitationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationInvitation}
     */
    orgsCreateInvitation(org, opts, callback) {
      opts = opts || {};
      let postBody = opts['orgsCreateInvitationRequest'];
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsCreateInvitation");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrganizationInvitation;
      return this.apiClient.callApi(
        '/orgs/{org}/invitations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsCreateOrUpdateCustomProperties operation.
     * @callback module:api/OrgsApi~orgsCreateOrUpdateCustomPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrgCustomProperty>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update custom properties for an organization
     * Creates new or updates existing custom properties defined for an organization in a batch.  To use this endpoint, the authenticated user must be one of:   - An administrator for the organization.   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/OrgsCreateOrUpdateCustomPropertiesRequest} orgsCreateOrUpdateCustomPropertiesRequest 
     * @param {module:api/OrgsApi~orgsCreateOrUpdateCustomPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrgCustomProperty>}
     */
    orgsCreateOrUpdateCustomProperties(org, orgsCreateOrUpdateCustomPropertiesRequest, callback) {
      let postBody = orgsCreateOrUpdateCustomPropertiesRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsCreateOrUpdateCustomProperties");
      }
      // verify the required parameter 'orgsCreateOrUpdateCustomPropertiesRequest' is set
      if (orgsCreateOrUpdateCustomPropertiesRequest === undefined || orgsCreateOrUpdateCustomPropertiesRequest === null) {
        throw new Error("Missing the required parameter 'orgsCreateOrUpdateCustomPropertiesRequest' when calling orgsCreateOrUpdateCustomProperties");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [OrgCustomProperty];
      return this.apiClient.callApi(
        '/orgs/{org}/properties/schema', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsCreateOrUpdateCustomPropertiesValuesForRepos operation.
     * @callback module:api/OrgsApi~orgsCreateOrUpdateCustomPropertiesValuesForReposCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update custom property values for organization repositories
     * Create new or update existing custom property values for repositories in a batch that belong to an organization. Each target repository will have its custom property values updated to match the values provided in the request.  A maximum of 30 repositories can be updated in a single request.  Using a value of `null` for a custom property will remove or 'unset' the property value from the repository.  To use this endpoint, the authenticated user must be one of:   - An administrator for the organization.   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_values_editor` in the organization.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/OrgsCreateOrUpdateCustomPropertiesValuesForReposRequest} orgsCreateOrUpdateCustomPropertiesValuesForReposRequest 
     * @param {module:api/OrgsApi~orgsCreateOrUpdateCustomPropertiesValuesForReposCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsCreateOrUpdateCustomPropertiesValuesForRepos(org, orgsCreateOrUpdateCustomPropertiesValuesForReposRequest, callback) {
      let postBody = orgsCreateOrUpdateCustomPropertiesValuesForReposRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsCreateOrUpdateCustomPropertiesValuesForRepos");
      }
      // verify the required parameter 'orgsCreateOrUpdateCustomPropertiesValuesForReposRequest' is set
      if (orgsCreateOrUpdateCustomPropertiesValuesForReposRequest === undefined || orgsCreateOrUpdateCustomPropertiesValuesForReposRequest === null) {
        throw new Error("Missing the required parameter 'orgsCreateOrUpdateCustomPropertiesValuesForReposRequest' when calling orgsCreateOrUpdateCustomPropertiesValuesForRepos");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/properties/values', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsCreateOrUpdateCustomProperty operation.
     * @callback module:api/OrgsApi~orgsCreateOrUpdateCustomPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgCustomProperty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a custom property for an organization
     * Creates a new or updates an existing custom property that is defined for an organization.  To use this endpoint, the authenticated user must be one of: - An administrator for the organization. - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} customPropertyName The custom property name. The name is case sensitive.
     * @param {module:model/OrgsCreateOrUpdateCustomPropertyRequest} orgsCreateOrUpdateCustomPropertyRequest 
     * @param {module:api/OrgsApi~orgsCreateOrUpdateCustomPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgCustomProperty}
     */
    orgsCreateOrUpdateCustomProperty(org, customPropertyName, orgsCreateOrUpdateCustomPropertyRequest, callback) {
      let postBody = orgsCreateOrUpdateCustomPropertyRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsCreateOrUpdateCustomProperty");
      }
      // verify the required parameter 'customPropertyName' is set
      if (customPropertyName === undefined || customPropertyName === null) {
        throw new Error("Missing the required parameter 'customPropertyName' when calling orgsCreateOrUpdateCustomProperty");
      }
      // verify the required parameter 'orgsCreateOrUpdateCustomPropertyRequest' is set
      if (orgsCreateOrUpdateCustomPropertyRequest === undefined || orgsCreateOrUpdateCustomPropertyRequest === null) {
        throw new Error("Missing the required parameter 'orgsCreateOrUpdateCustomPropertyRequest' when calling orgsCreateOrUpdateCustomProperty");
      }

      let pathParams = {
        'org': org,
        'custom_property_name': customPropertyName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrgCustomProperty;
      return this.apiClient.callApi(
        '/orgs/{org}/properties/schema/{custom_property_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsCreateWebhook operation.
     * @callback module:api/OrgsApi~orgsCreateWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an organization webhook
     * Create a hook that posts payloads in JSON format.  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/OrgsCreateWebhookRequest} orgsCreateWebhookRequest 
     * @param {module:api/OrgsApi~orgsCreateWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgHook}
     */
    orgsCreateWebhook(org, orgsCreateWebhookRequest, callback) {
      let postBody = orgsCreateWebhookRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsCreateWebhook");
      }
      // verify the required parameter 'orgsCreateWebhookRequest' is set
      if (orgsCreateWebhookRequest === undefined || orgsCreateWebhookRequest === null) {
        throw new Error("Missing the required parameter 'orgsCreateWebhookRequest' when calling orgsCreateWebhook");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrgHook;
      return this.apiClient.callApi(
        '/orgs/{org}/hooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsDelete operation.
     * @callback module:api/OrgsApi~orgsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an organization
     * Deletes an organization and all its repositories.  The organization login will be unavailable for 90 days after deletion.  Please review the Terms of Service regarding account deletion before using this endpoint:  https://docs.github.com/site-policy/github-terms/github-terms-of-service
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/OrgsApi~orgsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    orgsDelete(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsDelete");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/orgs/{org}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsDeleteCustomOrganizationRole operation.
     * @callback module:api/OrgsApi~orgsDeleteCustomOrganizationRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a custom organization role.
     * Deletes a custom organization role. For more information on custom organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of `write_organization_custom_org_role` in the organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} roleId The unique identifier of the role.
     * @param {module:api/OrgsApi~orgsDeleteCustomOrganizationRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsDeleteCustomOrganizationRole(org, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsDeleteCustomOrganizationRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling orgsDeleteCustomOrganizationRole");
      }

      let pathParams = {
        'org': org,
        'role_id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/organization-roles/{role_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsDeleteWebhook operation.
     * @callback module:api/OrgsApi~orgsDeleteWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an organization webhook
     * You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} hookId The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
     * @param {module:api/OrgsApi~orgsDeleteWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsDeleteWebhook(org, hookId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsDeleteWebhook");
      }
      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling orgsDeleteWebhook");
      }

      let pathParams = {
        'org': org,
        'hook_id': hookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/hooks/{hook_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsEnableOrDisableSecurityProductOnAllOrgRepos operation.
     * @callback module:api/OrgsApi~orgsEnableOrDisableSecurityProductOnAllOrgReposCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable or disable a security feature for an organization
     * Enables or disables the specified security feature for all eligible repositories in an organization. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"  The authenticated user must be an organization owner or be member of a team with the security manager role to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/String} securityProduct The security feature to enable or disable.
     * @param {module:model/String} enablement The action to take.  `enable_all` means to enable the specified security feature for all repositories in the organization. `disable_all` means to disable the specified security feature for all repositories in the organization.
     * @param {Object} opts Optional parameters
     * @param {module:model/OrgsEnableOrDisableSecurityProductOnAllOrgReposRequest} [orgsEnableOrDisableSecurityProductOnAllOrgReposRequest] 
     * @param {module:api/OrgsApi~orgsEnableOrDisableSecurityProductOnAllOrgReposCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsEnableOrDisableSecurityProductOnAllOrgRepos(org, securityProduct, enablement, opts, callback) {
      opts = opts || {};
      let postBody = opts['orgsEnableOrDisableSecurityProductOnAllOrgReposRequest'];
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsEnableOrDisableSecurityProductOnAllOrgRepos");
      }
      // verify the required parameter 'securityProduct' is set
      if (securityProduct === undefined || securityProduct === null) {
        throw new Error("Missing the required parameter 'securityProduct' when calling orgsEnableOrDisableSecurityProductOnAllOrgRepos");
      }
      // verify the required parameter 'enablement' is set
      if (enablement === undefined || enablement === null) {
        throw new Error("Missing the required parameter 'enablement' when calling orgsEnableOrDisableSecurityProductOnAllOrgRepos");
      }

      let pathParams = {
        'org': org,
        'security_product': securityProduct,
        'enablement': enablement
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/{security_product}/{enablement}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsGet operation.
     * @callback module:api/OrgsApi~orgsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationFull} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an organization
     * Gets information about an organization.  When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).  To see the full details about an organization, the authenticated user must be an organization owner.  The values returned by this endpoint are set by the \"Update an organization\" endpoint. If your organization set a default security configuration (beta), the following values retrieved from the \"Update an organization\" endpoint have been overwritten by that configuration:  - advanced_security_enabled_for_new_repositories - dependabot_alerts_enabled_for_new_repositories - dependabot_security_updates_enabled_for_new_repositories - dependency_graph_enabled_for_new_repositories - secret_scanning_enabled_for_new_repositories - secret_scanning_push_protection_enabled_for_new_repositories  For more information on security configurations, see \"[Enabling security features at scale](https://docs.github.com/code-security/securing-your-organization/introduction-to-securing-your-organization-at-scale/about-enabling-security-features-at-scale).\"  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to see the full details about an organization.  To see information about an organization's GitHub plan, GitHub Apps need the `Organization plan` permission.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/OrgsApi~orgsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationFull}
     */
    orgsGet(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsGet");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrganizationFull;
      return this.apiClient.callApi(
        '/orgs/{org}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsGetAllCustomProperties operation.
     * @callback module:api/OrgsApi~orgsGetAllCustomPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrgCustomProperty>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all custom properties for an organization
     * Gets all custom properties defined for an organization. Organization members can read these properties.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/OrgsApi~orgsGetAllCustomPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrgCustomProperty>}
     */
    orgsGetAllCustomProperties(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsGetAllCustomProperties");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrgCustomProperty];
      return this.apiClient.callApi(
        '/orgs/{org}/properties/schema', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsGetCustomProperty operation.
     * @callback module:api/OrgsApi~orgsGetCustomPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgCustomProperty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a custom property for an organization
     * Gets a custom property that is defined for an organization. Organization members can read these properties.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} customPropertyName The custom property name. The name is case sensitive.
     * @param {module:api/OrgsApi~orgsGetCustomPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgCustomProperty}
     */
    orgsGetCustomProperty(org, customPropertyName, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsGetCustomProperty");
      }
      // verify the required parameter 'customPropertyName' is set
      if (customPropertyName === undefined || customPropertyName === null) {
        throw new Error("Missing the required parameter 'customPropertyName' when calling orgsGetCustomProperty");
      }

      let pathParams = {
        'org': org,
        'custom_property_name': customPropertyName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrgCustomProperty;
      return this.apiClient.callApi(
        '/orgs/{org}/properties/schema/{custom_property_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsGetMembershipForAuthenticatedUser operation.
     * @callback module:api/OrgsApi~orgsGetMembershipForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgMembership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an organization membership for the authenticated user
     * If the authenticated user is an active or pending member of the organization, this endpoint will return the user's membership. If the authenticated user is not affiliated with the organization, a `404` is returned. This endpoint will return a `403` if the request is made by a GitHub App that is blocked by the organization.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/OrgsApi~orgsGetMembershipForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgMembership}
     */
    orgsGetMembershipForAuthenticatedUser(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsGetMembershipForAuthenticatedUser");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrgMembership;
      return this.apiClient.callApi(
        '/user/memberships/orgs/{org}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsGetMembershipForUser operation.
     * @callback module:api/OrgsApi~orgsGetMembershipForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgMembership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get organization membership for a user
     * In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} username The handle for the GitHub user account.
     * @param {module:api/OrgsApi~orgsGetMembershipForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgMembership}
     */
    orgsGetMembershipForUser(org, username, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsGetMembershipForUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling orgsGetMembershipForUser");
      }

      let pathParams = {
        'org': org,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrgMembership;
      return this.apiClient.callApi(
        '/orgs/{org}/memberships/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsGetOrgRole operation.
     * @callback module:api/OrgsApi~orgsGetOrgRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an organization role
     * Gets an organization role that is available to this organization. For more information on organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} roleId The unique identifier of the role.
     * @param {module:api/OrgsApi~orgsGetOrgRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationRole}
     */
    orgsGetOrgRole(org, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsGetOrgRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling orgsGetOrgRole");
      }

      let pathParams = {
        'org': org,
        'role_id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrganizationRole;
      return this.apiClient.callApi(
        '/orgs/{org}/organization-roles/{role_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsGetWebhook operation.
     * @callback module:api/OrgsApi~orgsGetWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an organization webhook
     * Returns a webhook configured in an organization. To get only the webhook `config` properties, see \"[Get a webhook configuration for an organization](/rest/orgs/webhooks#get-a-webhook-configuration-for-an-organization).  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} hookId The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
     * @param {module:api/OrgsApi~orgsGetWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgHook}
     */
    orgsGetWebhook(org, hookId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsGetWebhook");
      }
      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling orgsGetWebhook");
      }

      let pathParams = {
        'org': org,
        'hook_id': hookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrgHook;
      return this.apiClient.callApi(
        '/orgs/{org}/hooks/{hook_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsGetWebhookConfigForOrg operation.
     * @callback module:api/OrgsApi~orgsGetWebhookConfigForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a webhook configuration for an organization
     * Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use \"[Get an organization webhook ](/rest/orgs/webhooks#get-an-organization-webhook).\"  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} hookId The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
     * @param {module:api/OrgsApi~orgsGetWebhookConfigForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookConfig}
     */
    orgsGetWebhookConfigForOrg(org, hookId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsGetWebhookConfigForOrg");
      }
      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling orgsGetWebhookConfigForOrg");
      }

      let pathParams = {
        'org': org,
        'hook_id': hookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebhookConfig;
      return this.apiClient.callApi(
        '/orgs/{org}/hooks/{hook_id}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsGetWebhookDelivery operation.
     * @callback module:api/OrgsApi~orgsGetWebhookDeliveryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HookDelivery} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a webhook delivery for an organization webhook
     * Returns a delivery for a webhook configured in an organization.  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} hookId The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
     * @param {Number} deliveryId 
     * @param {module:api/OrgsApi~orgsGetWebhookDeliveryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HookDelivery}
     */
    orgsGetWebhookDelivery(org, hookId, deliveryId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsGetWebhookDelivery");
      }
      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling orgsGetWebhookDelivery");
      }
      // verify the required parameter 'deliveryId' is set
      if (deliveryId === undefined || deliveryId === null) {
        throw new Error("Missing the required parameter 'deliveryId' when calling orgsGetWebhookDelivery");
      }

      let pathParams = {
        'org': org,
        'hook_id': hookId,
        'delivery_id': deliveryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = HookDelivery;
      return this.apiClient.callApi(
        '/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsList operation.
     * @callback module:api/OrgsApi~orgsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrganizationSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organizations
     * Lists all organizations, in the order that they were created.  **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of organizations.
     * @param {Object} opts Optional parameters
     * @param {Number} [since] An organization ID. Only return organizations with an ID greater than this ID.
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/OrgsApi~orgsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrganizationSimple>}
     */
    orgsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'since': opts['since'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrganizationSimple];
      return this.apiClient.callApi(
        '/organizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsListAppInstallations operation.
     * @callback module:api/OrgsApi~orgsListAppInstallationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgsListAppInstallations200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List app installations for an organization
     * Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization.  The authenticated user must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:read` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/OrgsApi~orgsListAppInstallationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgsListAppInstallations200Response}
     */
    orgsListAppInstallations(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsListAppInstallations");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrgsListAppInstallations200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/installations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsListBlockedUsers operation.
     * @callback module:api/OrgsApi~orgsListBlockedUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SimpleUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List users blocked by an organization
     * List the users blocked by an organization.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/OrgsApi~orgsListBlockedUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SimpleUser>}
     */
    orgsListBlockedUsers(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsListBlockedUsers");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SimpleUser];
      return this.apiClient.callApi(
        '/orgs/{org}/blocks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsListCustomPropertiesValuesForRepos operation.
     * @callback module:api/OrgsApi~orgsListCustomPropertiesValuesForReposCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrgRepoCustomPropertyValues>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List custom property values for organization repositories
     * Lists organization repositories with all of their custom property values. Organization members can read these properties.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {String} [repositoryQuery] Finds repositories in the organization with a query containing one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See \"[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)\" for a detailed list of qualifiers.
     * @param {module:api/OrgsApi~orgsListCustomPropertiesValuesForReposCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrgRepoCustomPropertyValues>}
     */
    orgsListCustomPropertiesValuesForRepos(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsListCustomPropertiesValuesForRepos");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page'],
        'repository_query': opts['repositoryQuery']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrgRepoCustomPropertyValues];
      return this.apiClient.callApi(
        '/orgs/{org}/properties/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsListFailedInvitations operation.
     * @callback module:api/OrgsApi~orgsListFailedInvitationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrganizationInvitation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List failed organization invitations
     * The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/OrgsApi~orgsListFailedInvitationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrganizationInvitation>}
     */
    orgsListFailedInvitations(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsListFailedInvitations");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrganizationInvitation];
      return this.apiClient.callApi(
        '/orgs/{org}/failed_invitations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsListForAuthenticatedUser operation.
     * @callback module:api/OrgsApi~orgsListForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrganizationSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organizations for the authenticated user
     * List organizations for the authenticated user.  For OAuth app tokens and personal access tokens (classic), this endpoint only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope for OAuth app tokens and personal access tokens (classic). Requests with insufficient scope will receive a `403 Forbidden` response.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/OrgsApi~orgsListForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrganizationSimple>}
     */
    orgsListForAuthenticatedUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrganizationSimple];
      return this.apiClient.callApi(
        '/user/orgs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsListForUser operation.
     * @callback module:api/OrgsApi~orgsListForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrganizationSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organizations for a user
     * List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.  This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/orgs/orgs#list-organizations-for-the-authenticated-user) API instead.
     * @param {String} username The handle for the GitHub user account.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/OrgsApi~orgsListForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrganizationSimple>}
     */
    orgsListForUser(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling orgsListForUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrganizationSimple];
      return this.apiClient.callApi(
        '/users/{username}/orgs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsListInvitationTeams operation.
     * @callback module:api/OrgsApi~orgsListInvitationTeamsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organization invitation teams
     * List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} invitationId The unique identifier of the invitation.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/OrgsApi~orgsListInvitationTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    orgsListInvitationTeams(org, invitationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsListInvitationTeams");
      }
      // verify the required parameter 'invitationId' is set
      if (invitationId === undefined || invitationId === null) {
        throw new Error("Missing the required parameter 'invitationId' when calling orgsListInvitationTeams");
      }

      let pathParams = {
        'org': org,
        'invitation_id': invitationId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/orgs/{org}/invitations/{invitation_id}/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsListMembers operation.
     * @callback module:api/OrgsApi~orgsListMembersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SimpleUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organization members
     * List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [filter = 'all')] Filter members returned in the list. `2fa_disabled` means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. This options is only available for organization owners.
     * @param {module:model/String} [role = 'all')] Filter members returned by their role.
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/OrgsApi~orgsListMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SimpleUser>}
     */
    orgsListMembers(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsListMembers");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'filter': opts['filter'],
        'role': opts['role'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SimpleUser];
      return this.apiClient.callApi(
        '/orgs/{org}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsListMembershipsForAuthenticatedUser operation.
     * @callback module:api/OrgsApi~orgsListMembershipsForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrgMembership>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organization memberships for the authenticated user
     * Lists all of the authenticated user's organization memberships.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [state] Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships.
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/OrgsApi~orgsListMembershipsForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrgMembership>}
     */
    orgsListMembershipsForAuthenticatedUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'state': opts['state'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrgMembership];
      return this.apiClient.callApi(
        '/user/memberships/orgs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsListOrgRoleTeams operation.
     * @callback module:api/OrgsApi~orgsListOrgRoleTeamsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Team>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List teams that are assigned to an organization role
     * Lists the teams that are assigned to an organization role. For more information on organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  To use this endpoint, you must be an administrator for the organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} roleId The unique identifier of the role.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/OrgsApi~orgsListOrgRoleTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Team>}
     */
    orgsListOrgRoleTeams(org, roleId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsListOrgRoleTeams");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling orgsListOrgRoleTeams");
      }

      let pathParams = {
        'org': org,
        'role_id': roleId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Team];
      return this.apiClient.callApi(
        '/orgs/{org}/organization-roles/{role_id}/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsListOrgRoleUsers operation.
     * @callback module:api/OrgsApi~orgsListOrgRoleUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SimpleUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List users that are assigned to an organization role
     * Lists organization members that are assigned to an organization role. For more information on organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  To use this endpoint, you must be an administrator for the organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} roleId The unique identifier of the role.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/OrgsApi~orgsListOrgRoleUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SimpleUser>}
     */
    orgsListOrgRoleUsers(org, roleId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsListOrgRoleUsers");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling orgsListOrgRoleUsers");
      }

      let pathParams = {
        'org': org,
        'role_id': roleId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SimpleUser];
      return this.apiClient.callApi(
        '/orgs/{org}/organization-roles/{role_id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsListOrgRoles operation.
     * @callback module:api/OrgsApi~orgsListOrgRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgsListOrgRoles200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all organization roles for an organization
     * Lists the organization roles available in this organization. For more information on organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/OrgsApi~orgsListOrgRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgsListOrgRoles200Response}
     */
    orgsListOrgRoles(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsListOrgRoles");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrgsListOrgRoles200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/organization-roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsListOrganizationFineGrainedPermissions operation.
     * @callback module:api/OrgsApi~orgsListOrganizationFineGrainedPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrganizationFineGrainedPermission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organization fine-grained permissions for an organization
     * Lists the fine-grained permissions that can be used in custom organization roles for an organization. For more information, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  To list the fine-grained permissions that can be used in custom repository roles for an organization, see \"[List repository fine-grained permissions for an organization](https://docs.github.com/rest/orgs/organization-roles#list-repository-fine-grained-permissions-for-an-organization).\"  To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/OrgsApi~orgsListOrganizationFineGrainedPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrganizationFineGrainedPermission>}
     */
    orgsListOrganizationFineGrainedPermissions(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsListOrganizationFineGrainedPermissions");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrganizationFineGrainedPermission];
      return this.apiClient.callApi(
        '/orgs/{org}/organization-fine-grained-permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsListOutsideCollaborators operation.
     * @callback module:api/OrgsApi~orgsListOutsideCollaboratorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SimpleUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List outside collaborators for an organization
     * List all users who are outside collaborators of an organization.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [filter = 'all')] Filter the list of outside collaborators. `2fa_disabled` means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned.
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/OrgsApi~orgsListOutsideCollaboratorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SimpleUser>}
     */
    orgsListOutsideCollaborators(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsListOutsideCollaborators");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'filter': opts['filter'],
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SimpleUser];
      return this.apiClient.callApi(
        '/orgs/{org}/outside_collaborators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsListPatGrantRepositories operation.
     * @callback module:api/OrgsApi~orgsListPatGrantRepositoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MinimalRepository>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repositories a fine-grained personal access token has access to
     * Lists the repositories a fine-grained personal access token has access to.  Only GitHub Apps can use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} patId Unique identifier of the fine-grained personal access token.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/OrgsApi~orgsListPatGrantRepositoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MinimalRepository>}
     */
    orgsListPatGrantRepositories(org, patId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsListPatGrantRepositories");
      }
      // verify the required parameter 'patId' is set
      if (patId === undefined || patId === null) {
        throw new Error("Missing the required parameter 'patId' when calling orgsListPatGrantRepositories");
      }

      let pathParams = {
        'org': org,
        'pat_id': patId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MinimalRepository];
      return this.apiClient.callApi(
        '/orgs/{org}/personal-access-tokens/{pat_id}/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsListPatGrantRequestRepositories operation.
     * @callback module:api/OrgsApi~orgsListPatGrantRequestRepositoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MinimalRepository>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repositories requested to be accessed by a fine-grained personal access token
     * Lists the repositories a fine-grained personal access token request is requesting access to.  Only GitHub Apps can use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} patRequestId Unique identifier of the request for access via fine-grained personal access token.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/OrgsApi~orgsListPatGrantRequestRepositoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MinimalRepository>}
     */
    orgsListPatGrantRequestRepositories(org, patRequestId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsListPatGrantRequestRepositories");
      }
      // verify the required parameter 'patRequestId' is set
      if (patRequestId === undefined || patRequestId === null) {
        throw new Error("Missing the required parameter 'patRequestId' when calling orgsListPatGrantRequestRepositories");
      }

      let pathParams = {
        'org': org,
        'pat_request_id': patRequestId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MinimalRepository];
      return this.apiClient.callApi(
        '/orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsListPatGrantRequests operation.
     * @callback module:api/OrgsApi~orgsListPatGrantRequestsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrganizationProgrammaticAccessGrantRequest>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List requests to access organization resources with fine-grained personal access tokens
     * Lists requests from organization members to access organization resources with a fine-grained personal access token.  Only GitHub Apps can use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:model/String} [sort = 'created_at')] The property by which to sort the results.
     * @param {module:model/String} [direction = 'desc')] The direction to sort the results by.
     * @param {Array.<String>} [owner] A list of owner usernames to use to filter the results.
     * @param {String} [repository] The name of the repository to use to filter the results.
     * @param {String} [permission] The permission to use to filter the results.
     * @param {Date} [lastUsedBefore] Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param {Date} [lastUsedAfter] Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param {module:api/OrgsApi~orgsListPatGrantRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrganizationProgrammaticAccessGrantRequest>}
     */
    orgsListPatGrantRequests(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsListPatGrantRequests");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'owner': this.apiClient.buildCollectionParam(opts['owner'], 'multi'),
        'repository': opts['repository'],
        'permission': opts['permission'],
        'last_used_before': opts['lastUsedBefore'],
        'last_used_after': opts['lastUsedAfter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrganizationProgrammaticAccessGrantRequest];
      return this.apiClient.callApi(
        '/orgs/{org}/personal-access-token-requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsListPatGrants operation.
     * @callback module:api/OrgsApi~orgsListPatGrantsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrganizationProgrammaticAccessGrant>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List fine-grained personal access tokens with access to organization resources
     * Lists approved fine-grained personal access tokens owned by organization members that can access organization resources.  Only GitHub Apps can use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:model/String} [sort = 'created_at')] The property by which to sort the results.
     * @param {module:model/String} [direction = 'desc')] The direction to sort the results by.
     * @param {Array.<String>} [owner] A list of owner usernames to use to filter the results.
     * @param {String} [repository] The name of the repository to use to filter the results.
     * @param {String} [permission] The permission to use to filter the results.
     * @param {Date} [lastUsedBefore] Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param {Date} [lastUsedAfter] Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param {module:api/OrgsApi~orgsListPatGrantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrganizationProgrammaticAccessGrant>}
     */
    orgsListPatGrants(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsListPatGrants");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page'],
        'sort': opts['sort'],
        'direction': opts['direction'],
        'owner': this.apiClient.buildCollectionParam(opts['owner'], 'multi'),
        'repository': opts['repository'],
        'permission': opts['permission'],
        'last_used_before': opts['lastUsedBefore'],
        'last_used_after': opts['lastUsedAfter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrganizationProgrammaticAccessGrant];
      return this.apiClient.callApi(
        '/orgs/{org}/personal-access-tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsListPendingInvitations operation.
     * @callback module:api/OrgsApi~orgsListPendingInvitationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrganizationInvitation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List pending organization invitations
     * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, or `hiring_manager`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:model/String} [role = 'all')] Filter invitations by their member role.
     * @param {module:model/String} [invitationSource = 'all')] Filter invitations by their invitation source.
     * @param {module:api/OrgsApi~orgsListPendingInvitationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrganizationInvitation>}
     */
    orgsListPendingInvitations(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsListPendingInvitations");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page'],
        'role': opts['role'],
        'invitation_source': opts['invitationSource']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrganizationInvitation];
      return this.apiClient.callApi(
        '/orgs/{org}/invitations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsListPublicMembers operation.
     * @callback module:api/OrgsApi~orgsListPublicMembersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SimpleUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List public organization members
     * Members of an organization can choose to have their membership publicized or not.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/OrgsApi~orgsListPublicMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SimpleUser>}
     */
    orgsListPublicMembers(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsListPublicMembers");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SimpleUser];
      return this.apiClient.callApi(
        '/orgs/{org}/public_members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsListSecurityManagerTeams operation.
     * @callback module:api/OrgsApi~orgsListSecurityManagerTeamsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamSimple>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List security manager teams
     * Lists teams that are security managers for an organization. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"  The authenticated user must be an administrator or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/OrgsApi~orgsListSecurityManagerTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TeamSimple>}
     */
    orgsListSecurityManagerTeams(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsListSecurityManagerTeams");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamSimple];
      return this.apiClient.callApi(
        '/orgs/{org}/security-managers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsListWebhookDeliveries operation.
     * @callback module:api/OrgsApi~orgsListWebhookDeliveriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HookDeliveryItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List deliveries for an organization webhook
     * Returns a list of webhook deliveries for a webhook configured in an organization.  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} hookId The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {String} [cursor] Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.
     * @param {Boolean} [redelivery] 
     * @param {module:api/OrgsApi~orgsListWebhookDeliveriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/HookDeliveryItem>}
     */
    orgsListWebhookDeliveries(org, hookId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsListWebhookDeliveries");
      }
      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling orgsListWebhookDeliveries");
      }

      let pathParams = {
        'org': org,
        'hook_id': hookId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'cursor': opts['cursor'],
        'redelivery': opts['redelivery']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = [HookDeliveryItem];
      return this.apiClient.callApi(
        '/orgs/{org}/hooks/{hook_id}/deliveries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsListWebhooks operation.
     * @callback module:api/OrgsApi~orgsListWebhooksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrgHook>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organization webhooks
     * You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/OrgsApi~orgsListWebhooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrgHook>}
     */
    orgsListWebhooks(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsListWebhooks");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrgHook];
      return this.apiClient.callApi(
        '/orgs/{org}/hooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsPatchCustomOrganizationRole operation.
     * @callback module:api/OrgsApi~orgsPatchCustomOrganizationRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a custom organization role
     * Updates an existing custom organization role. Permission changes will apply to all assignees. For more information on custom organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"   To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of `write_organization_custom_org_role` in the organization.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} roleId The unique identifier of the role.
     * @param {module:model/OrgsPatchCustomOrganizationRoleRequest} orgsPatchCustomOrganizationRoleRequest 
     * @param {module:api/OrgsApi~orgsPatchCustomOrganizationRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationRole}
     */
    orgsPatchCustomOrganizationRole(org, roleId, orgsPatchCustomOrganizationRoleRequest, callback) {
      let postBody = orgsPatchCustomOrganizationRoleRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsPatchCustomOrganizationRole");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling orgsPatchCustomOrganizationRole");
      }
      // verify the required parameter 'orgsPatchCustomOrganizationRoleRequest' is set
      if (orgsPatchCustomOrganizationRoleRequest === undefined || orgsPatchCustomOrganizationRoleRequest === null) {
        throw new Error("Missing the required parameter 'orgsPatchCustomOrganizationRoleRequest' when calling orgsPatchCustomOrganizationRole");
      }

      let pathParams = {
        'org': org,
        'role_id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrganizationRole;
      return this.apiClient.callApi(
        '/orgs/{org}/organization-roles/{role_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsPingWebhook operation.
     * @callback module:api/OrgsApi~orgsPingWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ping an organization webhook
     * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} hookId The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
     * @param {module:api/OrgsApi~orgsPingWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsPingWebhook(org, hookId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsPingWebhook");
      }
      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling orgsPingWebhook");
      }

      let pathParams = {
        'org': org,
        'hook_id': hookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/hooks/{hook_id}/pings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsRedeliverWebhookDelivery operation.
     * @callback module:api/OrgsApi~orgsRedeliverWebhookDeliveryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Redeliver a delivery for an organization webhook
     * Redeliver a delivery for a webhook configured in an organization.  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} hookId The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
     * @param {Number} deliveryId 
     * @param {module:api/OrgsApi~orgsRedeliverWebhookDeliveryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    orgsRedeliverWebhookDelivery(org, hookId, deliveryId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsRedeliverWebhookDelivery");
      }
      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling orgsRedeliverWebhookDelivery");
      }
      // verify the required parameter 'deliveryId' is set
      if (deliveryId === undefined || deliveryId === null) {
        throw new Error("Missing the required parameter 'deliveryId' when calling orgsRedeliverWebhookDelivery");
      }

      let pathParams = {
        'org': org,
        'hook_id': hookId,
        'delivery_id': deliveryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/scim+json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsRemoveCustomProperty operation.
     * @callback module:api/OrgsApi~orgsRemoveCustomPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a custom property for an organization
     * Removes a custom property that is defined for an organization.  To use this endpoint, the authenticated user must be one of:   - An administrator for the organization.   - A user, or a user on a team, with the fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} customPropertyName The custom property name. The name is case sensitive.
     * @param {module:api/OrgsApi~orgsRemoveCustomPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsRemoveCustomProperty(org, customPropertyName, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsRemoveCustomProperty");
      }
      // verify the required parameter 'customPropertyName' is set
      if (customPropertyName === undefined || customPropertyName === null) {
        throw new Error("Missing the required parameter 'customPropertyName' when calling orgsRemoveCustomProperty");
      }

      let pathParams = {
        'org': org,
        'custom_property_name': customPropertyName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/properties/schema/{custom_property_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsRemoveMember operation.
     * @callback module:api/OrgsApi~orgsRemoveMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an organization member
     * Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} username The handle for the GitHub user account.
     * @param {module:api/OrgsApi~orgsRemoveMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsRemoveMember(org, username, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsRemoveMember");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling orgsRemoveMember");
      }

      let pathParams = {
        'org': org,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/members/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsRemoveMembershipForUser operation.
     * @callback module:api/OrgsApi~orgsRemoveMembershipForUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove organization membership for a user
     * In order to remove a user's membership with an organization, the authenticated user must be an organization owner.  If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} username The handle for the GitHub user account.
     * @param {module:api/OrgsApi~orgsRemoveMembershipForUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsRemoveMembershipForUser(org, username, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsRemoveMembershipForUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling orgsRemoveMembershipForUser");
      }

      let pathParams = {
        'org': org,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/memberships/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsRemoveOutsideCollaborator operation.
     * @callback module:api/OrgsApi~orgsRemoveOutsideCollaboratorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove outside collaborator from an organization
     * Removing a user from this list will remove them from all the organization's repositories.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} username The handle for the GitHub user account.
     * @param {module:api/OrgsApi~orgsRemoveOutsideCollaboratorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsRemoveOutsideCollaborator(org, username, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsRemoveOutsideCollaborator");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling orgsRemoveOutsideCollaborator");
      }

      let pathParams = {
        'org': org,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/outside_collaborators/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsRemovePublicMembershipForAuthenticatedUser operation.
     * @callback module:api/OrgsApi~orgsRemovePublicMembershipForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove public organization membership for the authenticated user
     * Removes the public membership for the authenticated user from the specified organization, unless public visibility is enforced by default.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} username The handle for the GitHub user account.
     * @param {module:api/OrgsApi~orgsRemovePublicMembershipForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsRemovePublicMembershipForAuthenticatedUser(org, username, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsRemovePublicMembershipForAuthenticatedUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling orgsRemovePublicMembershipForAuthenticatedUser");
      }

      let pathParams = {
        'org': org,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/public_members/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsRemoveSecurityManagerTeam operation.
     * @callback module:api/OrgsApi~orgsRemoveSecurityManagerTeamCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a security manager team
     * Removes the security manager role from a team for an organization. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) team from an organization.\"  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {module:api/OrgsApi~orgsRemoveSecurityManagerTeamCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsRemoveSecurityManagerTeam(org, teamSlug, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsRemoveSecurityManagerTeam");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling orgsRemoveSecurityManagerTeam");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/security-managers/teams/{team_slug}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsReviewPatGrantRequest operation.
     * @callback module:api/OrgsApi~orgsReviewPatGrantRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Review a request to access organization resources with a fine-grained personal access token
     * Approves or denies a pending request to access organization resources via a fine-grained personal access token.  Only GitHub Apps can use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} patRequestId Unique identifier of the request for access via fine-grained personal access token.
     * @param {module:model/OrgsReviewPatGrantRequestRequest} orgsReviewPatGrantRequestRequest 
     * @param {module:api/OrgsApi~orgsReviewPatGrantRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsReviewPatGrantRequest(org, patRequestId, orgsReviewPatGrantRequestRequest, callback) {
      let postBody = orgsReviewPatGrantRequestRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsReviewPatGrantRequest");
      }
      // verify the required parameter 'patRequestId' is set
      if (patRequestId === undefined || patRequestId === null) {
        throw new Error("Missing the required parameter 'patRequestId' when calling orgsReviewPatGrantRequest");
      }
      // verify the required parameter 'orgsReviewPatGrantRequestRequest' is set
      if (orgsReviewPatGrantRequestRequest === undefined || orgsReviewPatGrantRequestRequest === null) {
        throw new Error("Missing the required parameter 'orgsReviewPatGrantRequestRequest' when calling orgsReviewPatGrantRequest");
      }

      let pathParams = {
        'org': org,
        'pat_request_id': patRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/personal-access-token-requests/{pat_request_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsReviewPatGrantRequestsInBulk operation.
     * @callback module:api/OrgsApi~orgsReviewPatGrantRequestsInBulkCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Review requests to access organization resources with fine-grained personal access tokens
     * Approves or denies multiple pending requests to access organization resources via a fine-grained personal access token.  Only GitHub Apps can use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/OrgsReviewPatGrantRequestsInBulkRequest} orgsReviewPatGrantRequestsInBulkRequest 
     * @param {module:api/OrgsApi~orgsReviewPatGrantRequestsInBulkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    orgsReviewPatGrantRequestsInBulk(org, orgsReviewPatGrantRequestsInBulkRequest, callback) {
      let postBody = orgsReviewPatGrantRequestsInBulkRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsReviewPatGrantRequestsInBulk");
      }
      // verify the required parameter 'orgsReviewPatGrantRequestsInBulkRequest' is set
      if (orgsReviewPatGrantRequestsInBulkRequest === undefined || orgsReviewPatGrantRequestsInBulkRequest === null) {
        throw new Error("Missing the required parameter 'orgsReviewPatGrantRequestsInBulkRequest' when calling orgsReviewPatGrantRequestsInBulk");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/orgs/{org}/personal-access-token-requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsRevokeAllOrgRolesTeam operation.
     * @callback module:api/OrgsApi~orgsRevokeAllOrgRolesTeamCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove all organization roles for a team
     * Removes all assigned organization roles from a team. For more information on organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {module:api/OrgsApi~orgsRevokeAllOrgRolesTeamCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsRevokeAllOrgRolesTeam(org, teamSlug, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsRevokeAllOrgRolesTeam");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling orgsRevokeAllOrgRolesTeam");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/organization-roles/teams/{team_slug}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsRevokeAllOrgRolesUser operation.
     * @callback module:api/OrgsApi~orgsRevokeAllOrgRolesUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove all organization roles for a user
     * Revokes all assigned organization roles from a user. For more information on organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} username The handle for the GitHub user account.
     * @param {module:api/OrgsApi~orgsRevokeAllOrgRolesUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsRevokeAllOrgRolesUser(org, username, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsRevokeAllOrgRolesUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling orgsRevokeAllOrgRolesUser");
      }

      let pathParams = {
        'org': org,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/organization-roles/users/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsRevokeOrgRoleTeam operation.
     * @callback module:api/OrgsApi~orgsRevokeOrgRoleTeamCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an organization role from a team
     * Removes an organization role from a team. For more information on organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} teamSlug The slug of the team name.
     * @param {Number} roleId The unique identifier of the role.
     * @param {module:api/OrgsApi~orgsRevokeOrgRoleTeamCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsRevokeOrgRoleTeam(org, teamSlug, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsRevokeOrgRoleTeam");
      }
      // verify the required parameter 'teamSlug' is set
      if (teamSlug === undefined || teamSlug === null) {
        throw new Error("Missing the required parameter 'teamSlug' when calling orgsRevokeOrgRoleTeam");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling orgsRevokeOrgRoleTeam");
      }

      let pathParams = {
        'org': org,
        'team_slug': teamSlug,
        'role_id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsRevokeOrgRoleUser operation.
     * @callback module:api/OrgsApi~orgsRevokeOrgRoleUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an organization role from a user
     * Remove an organization role from a user. For more information on organization roles, see \"[Managing people's access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\"  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} username The handle for the GitHub user account.
     * @param {Number} roleId The unique identifier of the role.
     * @param {module:api/OrgsApi~orgsRevokeOrgRoleUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsRevokeOrgRoleUser(org, username, roleId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsRevokeOrgRoleUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling orgsRevokeOrgRoleUser");
      }
      // verify the required parameter 'roleId' is set
      if (roleId === undefined || roleId === null) {
        throw new Error("Missing the required parameter 'roleId' when calling orgsRevokeOrgRoleUser");
      }

      let pathParams = {
        'org': org,
        'username': username,
        'role_id': roleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/organization-roles/users/{username}/{role_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsSetMembershipForUser operation.
     * @callback module:api/OrgsApi~orgsSetMembershipForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgMembership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set organization membership for a user
     * Only authenticated organization owners can add a member to the organization or update the member's role.  *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/orgs/members#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.      *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.  **Rate limits**  To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} username The handle for the GitHub user account.
     * @param {Object} opts Optional parameters
     * @param {module:model/OrgsSetMembershipForUserRequest} [orgsSetMembershipForUserRequest] 
     * @param {module:api/OrgsApi~orgsSetMembershipForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgMembership}
     */
    orgsSetMembershipForUser(org, username, opts, callback) {
      opts = opts || {};
      let postBody = opts['orgsSetMembershipForUserRequest'];
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsSetMembershipForUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling orgsSetMembershipForUser");
      }

      let pathParams = {
        'org': org,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrgMembership;
      return this.apiClient.callApi(
        '/orgs/{org}/memberships/{username}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsSetPublicMembershipForAuthenticatedUser operation.
     * @callback module:api/OrgsApi~orgsSetPublicMembershipForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set public organization membership for the authenticated user
     * The user can publicize their own membership. (A user cannot publicize the membership for another user.)  Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\"
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} username The handle for the GitHub user account.
     * @param {module:api/OrgsApi~orgsSetPublicMembershipForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsSetPublicMembershipForAuthenticatedUser(org, username, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsSetPublicMembershipForAuthenticatedUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling orgsSetPublicMembershipForAuthenticatedUser");
      }

      let pathParams = {
        'org': org,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/public_members/{username}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsUnblockUser operation.
     * @callback module:api/OrgsApi~orgsUnblockUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unblock a user from an organization
     * Unblocks the given user on behalf of the specified organization.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {String} username The handle for the GitHub user account.
     * @param {module:api/OrgsApi~orgsUnblockUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsUnblockUser(org, username, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsUnblockUser");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling orgsUnblockUser");
      }

      let pathParams = {
        'org': org,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/blocks/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsUpdate operation.
     * @callback module:api/OrgsApi~orgsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationFull} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an organization
     * **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).  Updates the organization's profile and member privileges.  With security configurations (beta), your organization can choose a default security configuration which will automatically apply a set of security enablement settings to new repositories in your organization based on their visibility. For targeted repositories, the following attributes will be overridden by the default security configuration:  - advanced_security_enabled_for_new_repositories - dependabot_alerts_enabled_for_new_repositories - dependabot_security_updates_enabled_for_new_repositories - dependency_graph_enabled_for_new_repositories - secret_scanning_enabled_for_new_repositories - secret_scanning_push_protection_enabled_for_new_repositories  For more information on setting a default security configuration, see \"[Enabling security features at scale](https://docs.github.com/code-security/securing-your-organization/introduction-to-securing-your-organization-at-scale/about-enabling-security-features-at-scale).\"  The authenticated user must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the `admin:org` or `repo` scope to use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {module:model/OrgsUpdateRequest} [orgsUpdateRequest] 
     * @param {module:api/OrgsApi~orgsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationFull}
     */
    orgsUpdate(org, opts, callback) {
      opts = opts || {};
      let postBody = opts['orgsUpdateRequest'];
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsUpdate");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrganizationFull;
      return this.apiClient.callApi(
        '/orgs/{org}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsUpdateMembershipForAuthenticatedUser operation.
     * @callback module:api/OrgsApi~orgsUpdateMembershipForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgMembership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an organization membership for the authenticated user
     * Converts the authenticated user to an active member of the organization, if that user has a pending invitation from the organization.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/OrgsUpdateMembershipForAuthenticatedUserRequest} orgsUpdateMembershipForAuthenticatedUserRequest 
     * @param {module:api/OrgsApi~orgsUpdateMembershipForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgMembership}
     */
    orgsUpdateMembershipForAuthenticatedUser(org, orgsUpdateMembershipForAuthenticatedUserRequest, callback) {
      let postBody = orgsUpdateMembershipForAuthenticatedUserRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsUpdateMembershipForAuthenticatedUser");
      }
      // verify the required parameter 'orgsUpdateMembershipForAuthenticatedUserRequest' is set
      if (orgsUpdateMembershipForAuthenticatedUserRequest === undefined || orgsUpdateMembershipForAuthenticatedUserRequest === null) {
        throw new Error("Missing the required parameter 'orgsUpdateMembershipForAuthenticatedUserRequest' when calling orgsUpdateMembershipForAuthenticatedUser");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrgMembership;
      return this.apiClient.callApi(
        '/user/memberships/orgs/{org}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsUpdatePatAccess operation.
     * @callback module:api/OrgsApi~orgsUpdatePatAccessCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the access a fine-grained personal access token has to organization resources
     * Updates the access an organization member has to organization resources via a fine-grained personal access token. Limited to revoking the token's existing access. Limited to revoking a token's existing access.  Only GitHub Apps can use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} patId The unique identifier of the fine-grained personal access token.
     * @param {module:model/OrgsUpdatePatAccessRequest} orgsUpdatePatAccessRequest 
     * @param {module:api/OrgsApi~orgsUpdatePatAccessCallback} callback The callback function, accepting three arguments: error, data, response
     */
    orgsUpdatePatAccess(org, patId, orgsUpdatePatAccessRequest, callback) {
      let postBody = orgsUpdatePatAccessRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsUpdatePatAccess");
      }
      // verify the required parameter 'patId' is set
      if (patId === undefined || patId === null) {
        throw new Error("Missing the required parameter 'patId' when calling orgsUpdatePatAccess");
      }
      // verify the required parameter 'orgsUpdatePatAccessRequest' is set
      if (orgsUpdatePatAccessRequest === undefined || orgsUpdatePatAccessRequest === null) {
        throw new Error("Missing the required parameter 'orgsUpdatePatAccessRequest' when calling orgsUpdatePatAccess");
      }

      let pathParams = {
        'org': org,
        'pat_id': patId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/personal-access-tokens/{pat_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsUpdatePatAccesses operation.
     * @callback module:api/OrgsApi~orgsUpdatePatAccessesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the access to organization resources via fine-grained personal access tokens
     * Updates the access organization members have to organization resources via fine-grained personal access tokens. Limited to revoking a token's existing access.  Only GitHub Apps can use this endpoint.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/OrgsUpdatePatAccessesRequest} orgsUpdatePatAccessesRequest 
     * @param {module:api/OrgsApi~orgsUpdatePatAccessesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    orgsUpdatePatAccesses(org, orgsUpdatePatAccessesRequest, callback) {
      let postBody = orgsUpdatePatAccessesRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsUpdatePatAccesses");
      }
      // verify the required parameter 'orgsUpdatePatAccessesRequest' is set
      if (orgsUpdatePatAccessesRequest === undefined || orgsUpdatePatAccessesRequest === null) {
        throw new Error("Missing the required parameter 'orgsUpdatePatAccessesRequest' when calling orgsUpdatePatAccesses");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/orgs/{org}/personal-access-tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsUpdateWebhook operation.
     * @callback module:api/OrgsApi~orgsUpdateWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an organization webhook
     * Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use \"[Update a webhook configuration for an organization](/rest/orgs/webhooks#update-a-webhook-configuration-for-an-organization)\".  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} hookId The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
     * @param {Object} opts Optional parameters
     * @param {module:model/OrgsUpdateWebhookRequest} [orgsUpdateWebhookRequest] 
     * @param {module:api/OrgsApi~orgsUpdateWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrgHook}
     */
    orgsUpdateWebhook(org, hookId, opts, callback) {
      opts = opts || {};
      let postBody = opts['orgsUpdateWebhookRequest'];
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsUpdateWebhook");
      }
      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling orgsUpdateWebhook");
      }

      let pathParams = {
        'org': org,
        'hook_id': hookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrgHook;
      return this.apiClient.callApi(
        '/orgs/{org}/hooks/{hook_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgsUpdateWebhookConfigForOrg operation.
     * @callback module:api/OrgsApi~orgsUpdateWebhookConfigForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a webhook configuration for an organization
     * Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use \"[Update an organization webhook ](/rest/orgs/webhooks#update-an-organization-webhook).\"  You must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need `admin:org_hook` scope. OAuth apps cannot list, view, or edit webhooks that they did not create and users cannot list, view, or edit webhooks that were created by OAuth apps.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} hookId The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.
     * @param {Object} opts Optional parameters
     * @param {module:model/AppsUpdateWebhookConfigForAppRequest} [appsUpdateWebhookConfigForAppRequest] 
     * @param {module:api/OrgsApi~orgsUpdateWebhookConfigForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookConfig}
     */
    orgsUpdateWebhookConfigForOrg(org, hookId, opts, callback) {
      opts = opts || {};
      let postBody = opts['appsUpdateWebhookConfigForAppRequest'];
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling orgsUpdateWebhookConfigForOrg");
      }
      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling orgsUpdateWebhookConfigForOrg");
      }

      let pathParams = {
        'org': org,
        'hook_id': hookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebhookConfig;
      return this.apiClient.callApi(
        '/orgs/{org}/hooks/{hook_id}/config', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
