/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InteractionLimitResponse from '../model/InteractionLimitResponse';
import InteractionsGetRestrictionsForOrg200Response from '../model/InteractionsGetRestrictionsForOrg200Response';

/**
* Interactions service.
* @module api/InteractionsApi
* @version 1.1.4
*/
export default class InteractionsApi {

    /**
    * Constructs a new InteractionsApi. 
    * @alias module:api/InteractionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the interactionsGetRestrictionsForAuthenticatedUser operation.
     * @callback module:api/InteractionsApi~interactionsGetRestrictionsForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InteractionsGetRestrictionsForOrg200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get interaction restrictions for your public repositories
     * Shows which type of GitHub user can interact with your public repositories and when the restriction expires.
     * @param {module:api/InteractionsApi~interactionsGetRestrictionsForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InteractionsGetRestrictionsForOrg200Response}
     */
    interactionsGetRestrictionsForAuthenticatedUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InteractionsGetRestrictionsForOrg200Response;
      return this.apiClient.callApi(
        '/user/interaction-limits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the interactionsGetRestrictionsForOrg operation.
     * @callback module:api/InteractionsApi~interactionsGetRestrictionsForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InteractionsGetRestrictionsForOrg200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get interaction restrictions for an organization
     * Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/InteractionsApi~interactionsGetRestrictionsForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InteractionsGetRestrictionsForOrg200Response}
     */
    interactionsGetRestrictionsForOrg(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling interactionsGetRestrictionsForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InteractionsGetRestrictionsForOrg200Response;
      return this.apiClient.callApi(
        '/orgs/{org}/interaction-limits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the interactionsGetRestrictionsForRepo operation.
     * @callback module:api/InteractionsApi~interactionsGetRestrictionsForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InteractionsGetRestrictionsForOrg200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get interaction restrictions for a repository
     * Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:api/InteractionsApi~interactionsGetRestrictionsForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InteractionsGetRestrictionsForOrg200Response}
     */
    interactionsGetRestrictionsForRepo(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling interactionsGetRestrictionsForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling interactionsGetRestrictionsForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InteractionsGetRestrictionsForOrg200Response;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/interaction-limits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the interactionsRemoveRestrictionsForAuthenticatedUser operation.
     * @callback module:api/InteractionsApi~interactionsRemoveRestrictionsForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove interaction restrictions from your public repositories
     * Removes any interaction restrictions from your public repositories.
     * @param {module:api/InteractionsApi~interactionsRemoveRestrictionsForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    interactionsRemoveRestrictionsForAuthenticatedUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/interaction-limits', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the interactionsRemoveRestrictionsForOrg operation.
     * @callback module:api/InteractionsApi~interactionsRemoveRestrictionsForOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove interaction restrictions for an organization
     * Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:api/InteractionsApi~interactionsRemoveRestrictionsForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    interactionsRemoveRestrictionsForOrg(org, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling interactionsRemoveRestrictionsForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/interaction-limits', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the interactionsRemoveRestrictionsForRepo operation.
     * @callback module:api/InteractionsApi~interactionsRemoveRestrictionsForRepoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove interaction restrictions for a repository
     * Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:api/InteractionsApi~interactionsRemoveRestrictionsForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    interactionsRemoveRestrictionsForRepo(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling interactionsRemoveRestrictionsForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling interactionsRemoveRestrictionsForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/interaction-limits', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the interactionsSetRestrictionsForAuthenticatedUser operation.
     * @callback module:api/InteractionsApi~interactionsSetRestrictionsForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InteractionLimitResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set interaction restrictions for your public repositories
     * Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.
     * @param {module:model/InteractionLimit} interactionLimit 
     * @param {module:api/InteractionsApi~interactionsSetRestrictionsForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InteractionLimitResponse}
     */
    interactionsSetRestrictionsForAuthenticatedUser(interactionLimit, callback) {
      let postBody = interactionLimit;
      // verify the required parameter 'interactionLimit' is set
      if (interactionLimit === undefined || interactionLimit === null) {
        throw new Error("Missing the required parameter 'interactionLimit' when calling interactionsSetRestrictionsForAuthenticatedUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InteractionLimitResponse;
      return this.apiClient.callApi(
        '/user/interaction-limits', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the interactionsSetRestrictionsForOrg operation.
     * @callback module:api/InteractionsApi~interactionsSetRestrictionsForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InteractionLimitResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set interaction restrictions for an organization
     * Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/InteractionLimit} interactionLimit 
     * @param {module:api/InteractionsApi~interactionsSetRestrictionsForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InteractionLimitResponse}
     */
    interactionsSetRestrictionsForOrg(org, interactionLimit, callback) {
      let postBody = interactionLimit;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling interactionsSetRestrictionsForOrg");
      }
      // verify the required parameter 'interactionLimit' is set
      if (interactionLimit === undefined || interactionLimit === null) {
        throw new Error("Missing the required parameter 'interactionLimit' when calling interactionsSetRestrictionsForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InteractionLimitResponse;
      return this.apiClient.callApi(
        '/orgs/{org}/interaction-limits', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the interactionsSetRestrictionsForRepo operation.
     * @callback module:api/InteractionsApi~interactionsSetRestrictionsForRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InteractionLimitResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set interaction restrictions for a repository
     * Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:model/InteractionLimit} interactionLimit 
     * @param {module:api/InteractionsApi~interactionsSetRestrictionsForRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InteractionLimitResponse}
     */
    interactionsSetRestrictionsForRepo(owner, repo, interactionLimit, callback) {
      let postBody = interactionLimit;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling interactionsSetRestrictionsForRepo");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling interactionsSetRestrictionsForRepo");
      }
      // verify the required parameter 'interactionLimit' is set
      if (interactionLimit === undefined || interactionLimit === null) {
        throw new Error("Missing the required parameter 'interactionLimit' when calling interactionsSetRestrictionsForRepo");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InteractionLimitResponse;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/interaction-limits', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
