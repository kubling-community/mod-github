/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Import from '../model/Import';
import Migration from '../model/Migration';
import MinimalRepository from '../model/MinimalRepository';
import PorterAuthor from '../model/PorterAuthor';
import PorterLargeFile from '../model/PorterLargeFile';

/**
* Migrations service.
* @module api/MigrationsApi
* @version 1.1.4
*/
export default class MigrationsApi {

    /**
    * Constructs a new MigrationsApi. 
    * @alias module:api/MigrationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the migrationsCancelImport operation.
     * @callback module:api/MigrationsApi~migrationsCancelImportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel an import
     * Stop an import for a repository.  **Warning:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation). 
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:api/MigrationsApi~migrationsCancelImportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    migrationsCancelImport(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling migrationsCancelImport");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling migrationsCancelImport");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/import', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsDeleteArchiveForAuthenticatedUser operation.
     * @callback module:api/MigrationsApi~migrationsDeleteArchiveForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user migration archive
     * Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/migrations/users#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/migrations/users#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
     * @param {Number} migrationId The unique identifier of the migration.
     * @param {module:api/MigrationsApi~migrationsDeleteArchiveForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    migrationsDeleteArchiveForAuthenticatedUser(migrationId, callback) {
      let postBody = null;
      // verify the required parameter 'migrationId' is set
      if (migrationId === undefined || migrationId === null) {
        throw new Error("Missing the required parameter 'migrationId' when calling migrationsDeleteArchiveForAuthenticatedUser");
      }

      let pathParams = {
        'migration_id': migrationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/migrations/{migration_id}/archive', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsDeleteArchiveForOrg operation.
     * @callback module:api/MigrationsApi~migrationsDeleteArchiveForOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an organization migration archive
     * Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} migrationId The unique identifier of the migration.
     * @param {module:api/MigrationsApi~migrationsDeleteArchiveForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    migrationsDeleteArchiveForOrg(org, migrationId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling migrationsDeleteArchiveForOrg");
      }
      // verify the required parameter 'migrationId' is set
      if (migrationId === undefined || migrationId === null) {
        throw new Error("Missing the required parameter 'migrationId' when calling migrationsDeleteArchiveForOrg");
      }

      let pathParams = {
        'org': org,
        'migration_id': migrationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/migrations/{migration_id}/archive', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsDownloadArchiveForOrg operation.
     * @callback module:api/MigrationsApi~migrationsDownloadArchiveForOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download an organization migration archive
     * Fetches the URL to a migration archive.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} migrationId The unique identifier of the migration.
     * @param {module:api/MigrationsApi~migrationsDownloadArchiveForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    migrationsDownloadArchiveForOrg(org, migrationId, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling migrationsDownloadArchiveForOrg");
      }
      // verify the required parameter 'migrationId' is set
      if (migrationId === undefined || migrationId === null) {
        throw new Error("Missing the required parameter 'migrationId' when calling migrationsDownloadArchiveForOrg");
      }

      let pathParams = {
        'org': org,
        'migration_id': migrationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/migrations/{migration_id}/archive', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsGetArchiveForAuthenticatedUser operation.
     * @callback module:api/MigrationsApi~migrationsGetArchiveForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download a user migration archive
     * Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:  *   attachments *   bases *   commit\\_comments *   issue\\_comments *   issue\\_events *   issues *   milestones *   organizations *   projects *   protected\\_branches *   pull\\_request\\_reviews *   pull\\_requests *   releases *   repositories *   review\\_comments *   schema *   users  The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
     * @param {Number} migrationId The unique identifier of the migration.
     * @param {module:api/MigrationsApi~migrationsGetArchiveForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    migrationsGetArchiveForAuthenticatedUser(migrationId, callback) {
      let postBody = null;
      // verify the required parameter 'migrationId' is set
      if (migrationId === undefined || migrationId === null) {
        throw new Error("Missing the required parameter 'migrationId' when calling migrationsGetArchiveForAuthenticatedUser");
      }

      let pathParams = {
        'migration_id': migrationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/migrations/{migration_id}/archive', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsGetCommitAuthors operation.
     * @callback module:api/MigrationsApi~migrationsGetCommitAuthorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PorterAuthor>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get commit authors
     * Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.  This endpoint and the [Map a commit author](https://docs.github.com/rest/migrations/source-imports#map-a-commit-author) endpoint allow you to provide correct Git author information.  **Warning:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [since] A user ID. Only return users with an ID greater than this ID.
     * @param {module:api/MigrationsApi~migrationsGetCommitAuthorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PorterAuthor>}
     */
    migrationsGetCommitAuthors(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling migrationsGetCommitAuthors");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling migrationsGetCommitAuthors");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
        'since': opts['since']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PorterAuthor];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/import/authors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsGetImportStatus operation.
     * @callback module:api/MigrationsApi~migrationsGetImportStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Import} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an import status
     * View the progress of an import.  **Warning:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).  **Import status**  This section includes details about the possible values of the `status` field of the Import Progress response.  An import that does not have errors will progress through these steps:  *   `detecting` - the \"detection\" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL. *   `importing` - the \"raw\" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import). *   `mapping` - the \"rewrite\" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information. *   `pushing` - the \"push\" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is \"Writing objects\". *   `complete` - the import is complete, and the repository is ready on GitHub.  If there are problems, you will see one of these in the `status` field:  *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section. *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api) for more information. *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section. *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/migrations/source-imports#cancel-an-import) and [retry](https://docs.github.com/rest/migrations/source-imports#start-an-import) with the correct URL. *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.  **The project_choices field**  When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.  **Git LFS related fields**  This section includes details about Git LFS related fields that may be present in the Import Progress response.  *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken. *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step. *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository. *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a \"Get Large Files\" request.
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:api/MigrationsApi~migrationsGetImportStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Import}
     */
    migrationsGetImportStatus(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling migrationsGetImportStatus");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling migrationsGetImportStatus");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Import;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/import', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsGetLargeFiles operation.
     * @callback module:api/MigrationsApi~migrationsGetLargeFilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PorterLargeFile>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get large files
     * List files larger than 100MB found during the import  **Warning:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation). 
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:api/MigrationsApi~migrationsGetLargeFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PorterLargeFile>}
     */
    migrationsGetLargeFiles(owner, repo, callback) {
      let postBody = null;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling migrationsGetLargeFiles");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling migrationsGetLargeFiles");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PorterLargeFile];
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/import/large_files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsGetStatusForAuthenticatedUser operation.
     * @callback module:api/MigrationsApi~migrationsGetStatusForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Migration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user migration status
     * Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:  *   `pending` - the migration hasn't started yet. *   `exporting` - the migration is in progress. *   `exported` - the migration finished successfully. *   `failed` - the migration failed.  Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive).
     * @param {Number} migrationId The unique identifier of the migration.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [exclude] 
     * @param {module:api/MigrationsApi~migrationsGetStatusForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Migration}
     */
    migrationsGetStatusForAuthenticatedUser(migrationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'migrationId' is set
      if (migrationId === undefined || migrationId === null) {
        throw new Error("Missing the required parameter 'migrationId' when calling migrationsGetStatusForAuthenticatedUser");
      }

      let pathParams = {
        'migration_id': migrationId
      };
      let queryParams = {
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Migration;
      return this.apiClient.callApi(
        '/user/migrations/{migration_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsGetStatusForOrg operation.
     * @callback module:api/MigrationsApi~migrationsGetStatusForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Migration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an organization migration status
     * Fetches the status of a migration.  The `state` of a migration can be one of the following values:  *   `pending`, which means the migration hasn't started yet. *   `exporting`, which means the migration is in progress. *   `exported`, which means the migration finished successfully. *   `failed`, which means the migration failed.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} migrationId The unique identifier of the migration.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [exclude] Exclude attributes from the API response to improve performance
     * @param {module:api/MigrationsApi~migrationsGetStatusForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Migration}
     */
    migrationsGetStatusForOrg(org, migrationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling migrationsGetStatusForOrg");
      }
      // verify the required parameter 'migrationId' is set
      if (migrationId === undefined || migrationId === null) {
        throw new Error("Missing the required parameter 'migrationId' when calling migrationsGetStatusForOrg");
      }

      let pathParams = {
        'org': org,
        'migration_id': migrationId
      };
      let queryParams = {
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Migration;
      return this.apiClient.callApi(
        '/orgs/{org}/migrations/{migration_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsListForAuthenticatedUser operation.
     * @callback module:api/MigrationsApi~migrationsListForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Migration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List user migrations
     * Lists all migrations a user has started.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/MigrationsApi~migrationsListForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Migration>}
     */
    migrationsListForAuthenticatedUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Migration];
      return this.apiClient.callApi(
        '/user/migrations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsListForOrg operation.
     * @callback module:api/MigrationsApi~migrationsListForOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Migration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organization migrations
     * Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).  A list of `repositories` is only returned for export migrations.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Array.<module:model/String>} [exclude] Exclude attributes from the API response to improve performance
     * @param {module:api/MigrationsApi~migrationsListForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Migration>}
     */
    migrationsListForOrg(org, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling migrationsListForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page'],
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Migration];
      return this.apiClient.callApi(
        '/orgs/{org}/migrations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsListReposForAuthenticatedUser operation.
     * @callback module:api/MigrationsApi~migrationsListReposForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MinimalRepository>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repositories for a user migration
     * Lists all the repositories for this user migration.
     * @param {Number} migrationId The unique identifier of the migration.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/MigrationsApi~migrationsListReposForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MinimalRepository>}
     */
    migrationsListReposForAuthenticatedUser(migrationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'migrationId' is set
      if (migrationId === undefined || migrationId === null) {
        throw new Error("Missing the required parameter 'migrationId' when calling migrationsListReposForAuthenticatedUser");
      }

      let pathParams = {
        'migration_id': migrationId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MinimalRepository];
      return this.apiClient.callApi(
        '/user/migrations/{migration_id}/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsListReposForOrg operation.
     * @callback module:api/MigrationsApi~migrationsListReposForOrgCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MinimalRepository>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repositories in an organization migration
     * List all the repositories for this organization migration.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} migrationId The unique identifier of the migration.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage = 30)] The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {Number} [page = 1)] The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
     * @param {module:api/MigrationsApi~migrationsListReposForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MinimalRepository>}
     */
    migrationsListReposForOrg(org, migrationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling migrationsListReposForOrg");
      }
      // verify the required parameter 'migrationId' is set
      if (migrationId === undefined || migrationId === null) {
        throw new Error("Missing the required parameter 'migrationId' when calling migrationsListReposForOrg");
      }

      let pathParams = {
        'org': org,
        'migration_id': migrationId
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MinimalRepository];
      return this.apiClient.callApi(
        '/orgs/{org}/migrations/{migration_id}/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsMapCommitAuthor operation.
     * @callback module:api/MigrationsApi~migrationsMapCommitAuthorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PorterAuthor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Map a commit author
     * Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository.  **Warning:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation). 
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Number} authorId 
     * @param {Object} opts Optional parameters
     * @param {module:model/MigrationsMapCommitAuthorRequest} [migrationsMapCommitAuthorRequest] 
     * @param {module:api/MigrationsApi~migrationsMapCommitAuthorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PorterAuthor}
     */
    migrationsMapCommitAuthor(owner, repo, authorId, opts, callback) {
      opts = opts || {};
      let postBody = opts['migrationsMapCommitAuthorRequest'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling migrationsMapCommitAuthor");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling migrationsMapCommitAuthor");
      }
      // verify the required parameter 'authorId' is set
      if (authorId === undefined || authorId === null) {
        throw new Error("Missing the required parameter 'authorId' when calling migrationsMapCommitAuthor");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo,
        'author_id': authorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PorterAuthor;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/import/authors/{author_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsSetLfsPreference operation.
     * @callback module:api/MigrationsApi~migrationsSetLfsPreferenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Import} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Git LFS preference
     * You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.com).  You can learn more about our LFS feature and working with large files [on our help site](https://docs.github.com/repositories/working-with-files/managing-large-files).  **Warning:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation). 
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:model/MigrationsSetLfsPreferenceRequest} migrationsSetLfsPreferenceRequest 
     * @param {module:api/MigrationsApi~migrationsSetLfsPreferenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Import}
     */
    migrationsSetLfsPreference(owner, repo, migrationsSetLfsPreferenceRequest, callback) {
      let postBody = migrationsSetLfsPreferenceRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling migrationsSetLfsPreference");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling migrationsSetLfsPreference");
      }
      // verify the required parameter 'migrationsSetLfsPreferenceRequest' is set
      if (migrationsSetLfsPreferenceRequest === undefined || migrationsSetLfsPreferenceRequest === null) {
        throw new Error("Missing the required parameter 'migrationsSetLfsPreferenceRequest' when calling migrationsSetLfsPreference");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Import;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/import/lfs', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsStartForAuthenticatedUser operation.
     * @callback module:api/MigrationsApi~migrationsStartForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Migration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a user migration
     * Initiates the generation of a user migration archive.
     * @param {module:model/MigrationsStartForAuthenticatedUserRequest} migrationsStartForAuthenticatedUserRequest 
     * @param {module:api/MigrationsApi~migrationsStartForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Migration}
     */
    migrationsStartForAuthenticatedUser(migrationsStartForAuthenticatedUserRequest, callback) {
      let postBody = migrationsStartForAuthenticatedUserRequest;
      // verify the required parameter 'migrationsStartForAuthenticatedUserRequest' is set
      if (migrationsStartForAuthenticatedUserRequest === undefined || migrationsStartForAuthenticatedUserRequest === null) {
        throw new Error("Missing the required parameter 'migrationsStartForAuthenticatedUserRequest' when calling migrationsStartForAuthenticatedUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Migration;
      return this.apiClient.callApi(
        '/user/migrations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsStartForOrg operation.
     * @callback module:api/MigrationsApi~migrationsStartForOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Migration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start an organization migration
     * Initiates the generation of a migration archive.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {module:model/MigrationsStartForOrgRequest} migrationsStartForOrgRequest 
     * @param {module:api/MigrationsApi~migrationsStartForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Migration}
     */
    migrationsStartForOrg(org, migrationsStartForOrgRequest, callback) {
      let postBody = migrationsStartForOrgRequest;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling migrationsStartForOrg");
      }
      // verify the required parameter 'migrationsStartForOrgRequest' is set
      if (migrationsStartForOrgRequest === undefined || migrationsStartForOrgRequest === null) {
        throw new Error("Missing the required parameter 'migrationsStartForOrgRequest' when calling migrationsStartForOrg");
      }

      let pathParams = {
        'org': org
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Migration;
      return this.apiClient.callApi(
        '/orgs/{org}/migrations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsStartImport operation.
     * @callback module:api/MigrationsApi~migrationsStartImportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Import} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start an import
     * Start a source import to a GitHub repository using GitHub Importer. Importing into a GitHub repository with GitHub Actions enabled is not supported and will return a status `422 Unprocessable Entity` response.  **Warning:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation). 
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {module:model/MigrationsStartImportRequest} migrationsStartImportRequest 
     * @param {module:api/MigrationsApi~migrationsStartImportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Import}
     */
    migrationsStartImport(owner, repo, migrationsStartImportRequest, callback) {
      let postBody = migrationsStartImportRequest;
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling migrationsStartImport");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling migrationsStartImport");
      }
      // verify the required parameter 'migrationsStartImportRequest' is set
      if (migrationsStartImportRequest === undefined || migrationsStartImportRequest === null) {
        throw new Error("Missing the required parameter 'migrationsStartImportRequest' when calling migrationsStartImport");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Import;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/import', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsUnlockRepoForAuthenticatedUser operation.
     * @callback module:api/MigrationsApi~migrationsUnlockRepoForAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlock a user repository
     * Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/migrations/users#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/repos/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.
     * @param {Number} migrationId The unique identifier of the migration.
     * @param {String} repoName repo_name parameter
     * @param {module:api/MigrationsApi~migrationsUnlockRepoForAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    migrationsUnlockRepoForAuthenticatedUser(migrationId, repoName, callback) {
      let postBody = null;
      // verify the required parameter 'migrationId' is set
      if (migrationId === undefined || migrationId === null) {
        throw new Error("Missing the required parameter 'migrationId' when calling migrationsUnlockRepoForAuthenticatedUser");
      }
      // verify the required parameter 'repoName' is set
      if (repoName === undefined || repoName === null) {
        throw new Error("Missing the required parameter 'repoName' when calling migrationsUnlockRepoForAuthenticatedUser");
      }

      let pathParams = {
        'migration_id': migrationId,
        'repo_name': repoName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/migrations/{migration_id}/repos/{repo_name}/lock', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsUnlockRepoForOrg operation.
     * @callback module:api/MigrationsApi~migrationsUnlockRepoForOrgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlock an organization repository
     * Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
     * @param {String} org The organization name. The name is not case sensitive.
     * @param {Number} migrationId The unique identifier of the migration.
     * @param {String} repoName repo_name parameter
     * @param {module:api/MigrationsApi~migrationsUnlockRepoForOrgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    migrationsUnlockRepoForOrg(org, migrationId, repoName, callback) {
      let postBody = null;
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling migrationsUnlockRepoForOrg");
      }
      // verify the required parameter 'migrationId' is set
      if (migrationId === undefined || migrationId === null) {
        throw new Error("Missing the required parameter 'migrationId' when calling migrationsUnlockRepoForOrg");
      }
      // verify the required parameter 'repoName' is set
      if (repoName === undefined || repoName === null) {
        throw new Error("Missing the required parameter 'repoName' when calling migrationsUnlockRepoForOrg");
      }

      let pathParams = {
        'org': org,
        'migration_id': migrationId,
        'repo_name': repoName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the migrationsUpdateImport operation.
     * @callback module:api/MigrationsApi~migrationsUpdateImportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Import} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an import
     * An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API request. If no parameters are provided, the import will be restarted.  Some servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will have the status `detection_found_multiple` and the Import Progress response will include a `project_choices` array. You can select the project to import by providing one of the objects in the `project_choices` array in the update request.  **Warning:** Due to very low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
     * @param {String} owner The account owner of the repository. The name is not case sensitive.
     * @param {String} repo The name of the repository without the `.git` extension. The name is not case sensitive.
     * @param {Object} opts Optional parameters
     * @param {module:model/MigrationsUpdateImportRequest} [migrationsUpdateImportRequest] 
     * @param {module:api/MigrationsApi~migrationsUpdateImportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Import}
     */
    migrationsUpdateImport(owner, repo, opts, callback) {
      opts = opts || {};
      let postBody = opts['migrationsUpdateImportRequest'];
      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling migrationsUpdateImport");
      }
      // verify the required parameter 'repo' is set
      if (repo === undefined || repo === null) {
        throw new Error("Missing the required parameter 'repo' when calling migrationsUpdateImport");
      }

      let pathParams = {
        'owner': owner,
        'repo': repo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Import;
      return this.apiClient.callApi(
        '/repos/{owner}/{repo}/import', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
