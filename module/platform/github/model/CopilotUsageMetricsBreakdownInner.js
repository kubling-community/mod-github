/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CopilotUsageMetricsBreakdownInner model module.
 * @module model/CopilotUsageMetricsBreakdownInner
 * @version 1.1.4
 */
class CopilotUsageMetricsBreakdownInner {
    /**
     * Constructs a new <code>CopilotUsageMetricsBreakdownInner</code>.
     * Breakdown of Copilot usage by editor for this language
     * @alias module:model/CopilotUsageMetricsBreakdownInner
     * @extends Object
     */
    constructor() { 
        
        CopilotUsageMetricsBreakdownInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CopilotUsageMetricsBreakdownInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CopilotUsageMetricsBreakdownInner} obj Optional instance to populate.
     * @return {module:model/CopilotUsageMetricsBreakdownInner} The populated <code>CopilotUsageMetricsBreakdownInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CopilotUsageMetricsBreakdownInner();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('editor')) {
                obj['editor'] = ApiClient.convertToType(data['editor'], 'String');
            }
            if (data.hasOwnProperty('suggestions_count')) {
                obj['suggestions_count'] = ApiClient.convertToType(data['suggestions_count'], 'Number');
            }
            if (data.hasOwnProperty('acceptances_count')) {
                obj['acceptances_count'] = ApiClient.convertToType(data['acceptances_count'], 'Number');
            }
            if (data.hasOwnProperty('lines_suggested')) {
                obj['lines_suggested'] = ApiClient.convertToType(data['lines_suggested'], 'Number');
            }
            if (data.hasOwnProperty('lines_accepted')) {
                obj['lines_accepted'] = ApiClient.convertToType(data['lines_accepted'], 'Number');
            }
            if (data.hasOwnProperty('active_users')) {
                obj['active_users'] = ApiClient.convertToType(data['active_users'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CopilotUsageMetricsBreakdownInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CopilotUsageMetricsBreakdownInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['editor'] && !(typeof data['editor'] === 'string' || data['editor'] instanceof String)) {
            throw new Error("Expected the field `editor` to be a primitive type in the JSON string but got " + data['editor']);
        }

        return true;
    }


}



/**
 * The language in which Copilot suggestions were shown to users in the specified editor.
 * @member {String} language
 */
CopilotUsageMetricsBreakdownInner.prototype['language'] = undefined;

/**
 * The editor in which Copilot suggestions were shown to users for the specified language.
 * @member {String} editor
 */
CopilotUsageMetricsBreakdownInner.prototype['editor'] = undefined;

/**
 * The number of Copilot suggestions shown to users in the editor specified during the day specified.
 * @member {Number} suggestions_count
 */
CopilotUsageMetricsBreakdownInner.prototype['suggestions_count'] = undefined;

/**
 * The number of Copilot suggestions accepted by users in the editor specified during the day specified.
 * @member {Number} acceptances_count
 */
CopilotUsageMetricsBreakdownInner.prototype['acceptances_count'] = undefined;

/**
 * The number of lines of code suggested by Copilot in the editor specified during the day specified.
 * @member {Number} lines_suggested
 */
CopilotUsageMetricsBreakdownInner.prototype['lines_suggested'] = undefined;

/**
 * The number of lines of code accepted by users in the editor specified during the day specified.
 * @member {Number} lines_accepted
 */
CopilotUsageMetricsBreakdownInner.prototype['lines_accepted'] = undefined;

/**
 * The number of users who were shown Copilot completion suggestions in the editor specified during the day specified.
 * @member {Number} active_users
 */
CopilotUsageMetricsBreakdownInner.prototype['active_users'] = undefined;






export default CopilotUsageMetricsBreakdownInner;

