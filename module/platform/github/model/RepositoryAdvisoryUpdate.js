/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RepositoryAdvisoryCreateCreditsInner from './RepositoryAdvisoryCreateCreditsInner';
import RepositoryAdvisoryCreateVulnerabilitiesInner from './RepositoryAdvisoryCreateVulnerabilitiesInner';

/**
 * The RepositoryAdvisoryUpdate model module.
 * @module model/RepositoryAdvisoryUpdate
 * @version 1.1.4
 */
class RepositoryAdvisoryUpdate {
    /**
     * Constructs a new <code>RepositoryAdvisoryUpdate</code>.
     * @alias module:model/RepositoryAdvisoryUpdate
     */
    constructor() { 
        
        RepositoryAdvisoryUpdate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RepositoryAdvisoryUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepositoryAdvisoryUpdate} obj Optional instance to populate.
     * @return {module:model/RepositoryAdvisoryUpdate} The populated <code>RepositoryAdvisoryUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepositoryAdvisoryUpdate();

            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('cve_id')) {
                obj['cve_id'] = ApiClient.convertToType(data['cve_id'], 'String');
            }
            if (data.hasOwnProperty('vulnerabilities')) {
                obj['vulnerabilities'] = ApiClient.convertToType(data['vulnerabilities'], [RepositoryAdvisoryCreateVulnerabilitiesInner]);
            }
            if (data.hasOwnProperty('cwe_ids')) {
                obj['cwe_ids'] = ApiClient.convertToType(data['cwe_ids'], ['String']);
            }
            if (data.hasOwnProperty('credits')) {
                obj['credits'] = ApiClient.convertToType(data['credits'], [RepositoryAdvisoryCreateCreditsInner]);
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('cvss_vector_string')) {
                obj['cvss_vector_string'] = ApiClient.convertToType(data['cvss_vector_string'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('collaborating_users')) {
                obj['collaborating_users'] = ApiClient.convertToType(data['collaborating_users'], ['String']);
            }
            if (data.hasOwnProperty('collaborating_teams')) {
                obj['collaborating_teams'] = ApiClient.convertToType(data['collaborating_teams'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepositoryAdvisoryUpdate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepositoryAdvisoryUpdate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['cve_id'] && !(typeof data['cve_id'] === 'string' || data['cve_id'] instanceof String)) {
            throw new Error("Expected the field `cve_id` to be a primitive type in the JSON string but got " + data['cve_id']);
        }
        if (data['vulnerabilities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vulnerabilities'])) {
                throw new Error("Expected the field `vulnerabilities` to be an array in the JSON data but got " + data['vulnerabilities']);
            }
            // validate the optional field `vulnerabilities` (array)
            for (const item of data['vulnerabilities']) {
                RepositoryAdvisoryCreateVulnerabilitiesInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['cwe_ids'])) {
            throw new Error("Expected the field `cwe_ids` to be an array in the JSON data but got " + data['cwe_ids']);
        }
        if (data['credits']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['credits'])) {
                throw new Error("Expected the field `credits` to be an array in the JSON data but got " + data['credits']);
            }
            // validate the optional field `credits` (array)
            for (const item of data['credits']) {
                RepositoryAdvisoryCreateCreditsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // ensure the json data is a string
        if (data['cvss_vector_string'] && !(typeof data['cvss_vector_string'] === 'string' || data['cvss_vector_string'] instanceof String)) {
            throw new Error("Expected the field `cvss_vector_string` to be a primitive type in the JSON string but got " + data['cvss_vector_string']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['collaborating_users'])) {
            throw new Error("Expected the field `collaborating_users` to be an array in the JSON data but got " + data['collaborating_users']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['collaborating_teams'])) {
            throw new Error("Expected the field `collaborating_teams` to be an array in the JSON data but got " + data['collaborating_teams']);
        }

        return true;
    }


}



/**
 * A short summary of the advisory.
 * @member {String} summary
 */
RepositoryAdvisoryUpdate.prototype['summary'] = undefined;

/**
 * A detailed description of what the advisory impacts.
 * @member {String} description
 */
RepositoryAdvisoryUpdate.prototype['description'] = undefined;

/**
 * The Common Vulnerabilities and Exposures (CVE) ID.
 * @member {String} cve_id
 */
RepositoryAdvisoryUpdate.prototype['cve_id'] = undefined;

/**
 * A product affected by the vulnerability detailed in a repository security advisory.
 * @member {Array.<module:model/RepositoryAdvisoryCreateVulnerabilitiesInner>} vulnerabilities
 */
RepositoryAdvisoryUpdate.prototype['vulnerabilities'] = undefined;

/**
 * A list of Common Weakness Enumeration (CWE) IDs.
 * @member {Array.<String>} cwe_ids
 */
RepositoryAdvisoryUpdate.prototype['cwe_ids'] = undefined;

/**
 * A list of users receiving credit for their participation in the security advisory.
 * @member {Array.<module:model/RepositoryAdvisoryCreateCreditsInner>} credits
 */
RepositoryAdvisoryUpdate.prototype['credits'] = undefined;

/**
 * The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
 * @member {module:model/RepositoryAdvisoryUpdate.SeverityEnum} severity
 */
RepositoryAdvisoryUpdate.prototype['severity'] = undefined;

/**
 * The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.
 * @member {String} cvss_vector_string
 */
RepositoryAdvisoryUpdate.prototype['cvss_vector_string'] = undefined;

/**
 * The state of the advisory.
 * @member {module:model/RepositoryAdvisoryUpdate.StateEnum} state
 */
RepositoryAdvisoryUpdate.prototype['state'] = undefined;

/**
 * A list of usernames who have been granted write access to the advisory.
 * @member {Array.<String>} collaborating_users
 */
RepositoryAdvisoryUpdate.prototype['collaborating_users'] = undefined;

/**
 * A list of team slugs which have been granted write access to the advisory.
 * @member {Array.<String>} collaborating_teams
 */
RepositoryAdvisoryUpdate.prototype['collaborating_teams'] = undefined;





/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
RepositoryAdvisoryUpdate['SeverityEnum'] = {

    /**
     * value: "critical"
     * @const
     */
    "critical": "critical",

    /**
     * value: "high"
     * @const
     */
    "high": "high",

    /**
     * value: "medium"
     * @const
     */
    "medium": "medium",

    /**
     * value: "low"
     * @const
     */
    "low": "low"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
RepositoryAdvisoryUpdate['StateEnum'] = {

    /**
     * value: "published"
     * @const
     */
    "published": "published",

    /**
     * value: "closed"
     * @const
     */
    "closed": "closed",

    /**
     * value: "draft"
     * @const
     */
    "draft": "draft"
};



export default RepositoryAdvisoryUpdate;

