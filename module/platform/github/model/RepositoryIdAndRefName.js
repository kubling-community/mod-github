/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RepositoryRulesetConditions from './RepositoryRulesetConditions';
import RepositoryRulesetConditionsRefName from './RepositoryRulesetConditionsRefName';
import RepositoryRulesetConditionsRepositoryIdTarget from './RepositoryRulesetConditionsRepositoryIdTarget';
import RepositoryRulesetConditionsRepositoryIdTargetRepositoryId from './RepositoryRulesetConditionsRepositoryIdTargetRepositoryId';

/**
 * The RepositoryIdAndRefName model module.
 * @module model/RepositoryIdAndRefName
 * @version 1.1.4
 */
class RepositoryIdAndRefName {
    /**
     * Constructs a new <code>RepositoryIdAndRefName</code>.
     * Conditions to target repositories by id and refs by name
     * @alias module:model/RepositoryIdAndRefName
     * @implements module:model/RepositoryRulesetConditions
     * @implements module:model/RepositoryRulesetConditionsRepositoryIdTarget
     * @param repositoryId {module:model/RepositoryRulesetConditionsRepositoryIdTargetRepositoryId} 
     */
    constructor(repositoryId) { 
        RepositoryRulesetConditions.initialize(this, repositoryName, repositoryId, repositoryProperty);RepositoryRulesetConditionsRepositoryIdTarget.initialize(this, repositoryId);
        RepositoryIdAndRefName.initialize(this, repositoryId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, repositoryId) { 
        obj['repository_id'] = repositoryId;
    }

    /**
     * Constructs a <code>RepositoryIdAndRefName</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepositoryIdAndRefName} obj Optional instance to populate.
     * @return {module:model/RepositoryIdAndRefName} The populated <code>RepositoryIdAndRefName</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepositoryIdAndRefName();
            RepositoryRulesetConditions.constructFromObject(data, obj);
            RepositoryRulesetConditionsRepositoryIdTarget.constructFromObject(data, obj);

            if (data.hasOwnProperty('ref_name')) {
                obj['ref_name'] = RepositoryRulesetConditionsRefName.constructFromObject(data['ref_name']);
            }
            if (data.hasOwnProperty('repository_id')) {
                obj['repository_id'] = RepositoryRulesetConditionsRepositoryIdTargetRepositoryId.constructFromObject(data['repository_id']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepositoryIdAndRefName</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepositoryIdAndRefName</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RepositoryIdAndRefName.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ref_name`
        if (data['ref_name']) { // data not null
          RepositoryRulesetConditionsRefName.validateJSON(data['ref_name']);
        }
        // validate the optional field `repository_id`
        if (data['repository_id']) { // data not null
          RepositoryRulesetConditionsRepositoryIdTargetRepositoryId.validateJSON(data['repository_id']);
        }

        return true;
    }


}

RepositoryIdAndRefName.RequiredProperties = ["repository_id"];

/**
 * @member {module:model/RepositoryRulesetConditionsRefName} ref_name
 */
RepositoryIdAndRefName.prototype['ref_name'] = undefined;

/**
 * @member {module:model/RepositoryRulesetConditionsRepositoryIdTargetRepositoryId} repository_id
 */
RepositoryIdAndRefName.prototype['repository_id'] = undefined;


// Implement RepositoryRulesetConditions interface:
/**
 * @member {module:model/RepositoryRulesetConditionsRefName} ref_name
 */
RepositoryRulesetConditions.prototype['ref_name'] = undefined;
/**
 * @member {module:model/RepositoryRulesetConditionsRepositoryNameTargetRepositoryName} repository_name
 */
RepositoryRulesetConditions.prototype['repository_name'] = undefined;
/**
 * @member {module:model/RepositoryRulesetConditionsRepositoryIdTargetRepositoryId} repository_id
 */
RepositoryRulesetConditions.prototype['repository_id'] = undefined;
/**
 * @member {module:model/RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty} repository_property
 */
RepositoryRulesetConditions.prototype['repository_property'] = undefined;
// Implement RepositoryRulesetConditionsRepositoryIdTarget interface:
/**
 * @member {module:model/RepositoryRulesetConditionsRepositoryIdTargetRepositoryId} repository_id
 */
RepositoryRulesetConditionsRepositoryIdTarget.prototype['repository_id'] = undefined;




export default RepositoryIdAndRefName;

