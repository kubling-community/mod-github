/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Reactions from './Reactions';
import User from './User';

/**
 * The WebhookCommitCommentCreatedComment model module.
 * @module model/WebhookCommitCommentCreatedComment
 * @version 1.1.4
 */
class WebhookCommitCommentCreatedComment {
    /**
     * Constructs a new <code>WebhookCommitCommentCreatedComment</code>.
     * The [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment) resource.
     * @alias module:model/WebhookCommitCommentCreatedComment
     * @param authorAssociation {module:model/WebhookCommitCommentCreatedComment.AuthorAssociationEnum} How the author is associated with the repository.
     * @param body {String} The text of the comment.
     * @param commitId {String} The SHA of the commit to which the comment applies.
     * @param createdAt {String} 
     * @param htmlUrl {String} 
     * @param id {Number} The ID of the commit comment.
     * @param line {Number} The line of the blob to which the comment applies. The last line of the range for a multi-line comment
     * @param nodeId {String} The node ID of the commit comment.
     * @param path {String} The relative path of the file to which the comment applies.
     * @param position {Number} The line index in the diff to which the comment applies.
     * @param updatedAt {String} 
     * @param url {String} 
     * @param user {module:model/User} 
     */
    constructor(authorAssociation, body, commitId, createdAt, htmlUrl, id, line, nodeId, path, position, updatedAt, url, user) { 
        
        WebhookCommitCommentCreatedComment.initialize(this, authorAssociation, body, commitId, createdAt, htmlUrl, id, line, nodeId, path, position, updatedAt, url, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, authorAssociation, body, commitId, createdAt, htmlUrl, id, line, nodeId, path, position, updatedAt, url, user) { 
        obj['author_association'] = authorAssociation;
        obj['body'] = body;
        obj['commit_id'] = commitId;
        obj['created_at'] = createdAt;
        obj['html_url'] = htmlUrl;
        obj['id'] = id;
        obj['line'] = line;
        obj['node_id'] = nodeId;
        obj['path'] = path;
        obj['position'] = position;
        obj['updated_at'] = updatedAt;
        obj['url'] = url;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>WebhookCommitCommentCreatedComment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebhookCommitCommentCreatedComment} obj Optional instance to populate.
     * @return {module:model/WebhookCommitCommentCreatedComment} The populated <code>WebhookCommitCommentCreatedComment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebhookCommitCommentCreatedComment();

            if (data.hasOwnProperty('author_association')) {
                obj['author_association'] = ApiClient.convertToType(data['author_association'], 'String');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('commit_id')) {
                obj['commit_id'] = ApiClient.convertToType(data['commit_id'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('line')) {
                obj['line'] = ApiClient.convertToType(data['line'], 'Number');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'Number');
            }
            if (data.hasOwnProperty('reactions')) {
                obj['reactions'] = Reactions.constructFromObject(data['reactions']);
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebhookCommitCommentCreatedComment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebhookCommitCommentCreatedComment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WebhookCommitCommentCreatedComment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['author_association'] && !(typeof data['author_association'] === 'string' || data['author_association'] instanceof String)) {
            throw new Error("Expected the field `author_association` to be a primitive type in the JSON string but got " + data['author_association']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['commit_id'] && !(typeof data['commit_id'] === 'string' || data['commit_id'] instanceof String)) {
            throw new Error("Expected the field `commit_id` to be a primitive type in the JSON string but got " + data['commit_id']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // validate the optional field `reactions`
        if (data['reactions']) { // data not null
          Reactions.validateJSON(data['reactions']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}

WebhookCommitCommentCreatedComment.RequiredProperties = ["author_association", "body", "commit_id", "created_at", "html_url", "id", "line", "node_id", "path", "position", "updated_at", "url", "user"];

/**
 * How the author is associated with the repository.
 * @member {module:model/WebhookCommitCommentCreatedComment.AuthorAssociationEnum} author_association
 */
WebhookCommitCommentCreatedComment.prototype['author_association'] = undefined;

/**
 * The text of the comment.
 * @member {String} body
 */
WebhookCommitCommentCreatedComment.prototype['body'] = undefined;

/**
 * The SHA of the commit to which the comment applies.
 * @member {String} commit_id
 */
WebhookCommitCommentCreatedComment.prototype['commit_id'] = undefined;

/**
 * @member {String} created_at
 */
WebhookCommitCommentCreatedComment.prototype['created_at'] = undefined;

/**
 * @member {String} html_url
 */
WebhookCommitCommentCreatedComment.prototype['html_url'] = undefined;

/**
 * The ID of the commit comment.
 * @member {Number} id
 */
WebhookCommitCommentCreatedComment.prototype['id'] = undefined;

/**
 * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
 * @member {Number} line
 */
WebhookCommitCommentCreatedComment.prototype['line'] = undefined;

/**
 * The node ID of the commit comment.
 * @member {String} node_id
 */
WebhookCommitCommentCreatedComment.prototype['node_id'] = undefined;

/**
 * The relative path of the file to which the comment applies.
 * @member {String} path
 */
WebhookCommitCommentCreatedComment.prototype['path'] = undefined;

/**
 * The line index in the diff to which the comment applies.
 * @member {Number} position
 */
WebhookCommitCommentCreatedComment.prototype['position'] = undefined;

/**
 * @member {module:model/Reactions} reactions
 */
WebhookCommitCommentCreatedComment.prototype['reactions'] = undefined;

/**
 * @member {String} updated_at
 */
WebhookCommitCommentCreatedComment.prototype['updated_at'] = undefined;

/**
 * @member {String} url
 */
WebhookCommitCommentCreatedComment.prototype['url'] = undefined;

/**
 * @member {module:model/User} user
 */
WebhookCommitCommentCreatedComment.prototype['user'] = undefined;





/**
 * Allowed values for the <code>author_association</code> property.
 * @enum {String}
 * @readonly
 */
WebhookCommitCommentCreatedComment['AuthorAssociationEnum'] = {

    /**
     * value: "COLLABORATOR"
     * @const
     */
    "COLLABORATOR": "COLLABORATOR",

    /**
     * value: "CONTRIBUTOR"
     * @const
     */
    "CONTRIBUTOR": "CONTRIBUTOR",

    /**
     * value: "FIRST_TIMER"
     * @const
     */
    "FIRST_TIMER": "FIRST_TIMER",

    /**
     * value: "FIRST_TIME_CONTRIBUTOR"
     * @const
     */
    "FIRST_TIME_CONTRIBUTOR": "FIRST_TIME_CONTRIBUTOR",

    /**
     * value: "MANNEQUIN"
     * @const
     */
    "MANNEQUIN": "MANNEQUIN",

    /**
     * value: "MEMBER"
     * @const
     */
    "MEMBER": "MEMBER",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "OWNER"
     * @const
     */
    "OWNER": "OWNER"
};



export default WebhookCommitCommentCreatedComment;

