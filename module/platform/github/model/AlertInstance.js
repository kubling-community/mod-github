/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlertInstanceLocation from './AlertInstanceLocation';
import CodeScanningAlertInstanceMessage from './CodeScanningAlertInstanceMessage';

/**
 * The AlertInstance model module.
 * @module model/AlertInstance
 * @version 1.1.4
 */
class AlertInstance {
    /**
     * Constructs a new <code>AlertInstance</code>.
     * @alias module:model/AlertInstance
     * @param analysisKey {String} Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
     * @param environment {String} Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
     * @param ref {String} The full Git reference, formatted as `refs/heads/<branch name>`.
     * @param state {module:model/AlertInstance.StateEnum} State of a code scanning alert.
     */
    constructor(analysisKey, environment, ref, state) { 
        
        AlertInstance.initialize(this, analysisKey, environment, ref, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, analysisKey, environment, ref, state) { 
        obj['analysis_key'] = analysisKey;
        obj['environment'] = environment;
        obj['ref'] = ref;
        obj['state'] = state;
    }

    /**
     * Constructs a <code>AlertInstance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlertInstance} obj Optional instance to populate.
     * @return {module:model/AlertInstance} The populated <code>AlertInstance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlertInstance();

            if (data.hasOwnProperty('analysis_key')) {
                obj['analysis_key'] = ApiClient.convertToType(data['analysis_key'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('classifications')) {
                obj['classifications'] = ApiClient.convertToType(data['classifications'], ['String']);
            }
            if (data.hasOwnProperty('commit_sha')) {
                obj['commit_sha'] = ApiClient.convertToType(data['commit_sha'], 'String');
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = ApiClient.convertToType(data['environment'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = AlertInstanceLocation.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = CodeScanningAlertInstanceMessage.constructFromObject(data['message']);
            }
            if (data.hasOwnProperty('ref')) {
                obj['ref'] = ApiClient.convertToType(data['ref'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlertInstance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlertInstance</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AlertInstance.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['analysis_key'] && !(typeof data['analysis_key'] === 'string' || data['analysis_key'] instanceof String)) {
            throw new Error("Expected the field `analysis_key` to be a primitive type in the JSON string but got " + data['analysis_key']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['classifications'])) {
            throw new Error("Expected the field `classifications` to be an array in the JSON data but got " + data['classifications']);
        }
        // ensure the json data is a string
        if (data['commit_sha'] && !(typeof data['commit_sha'] === 'string' || data['commit_sha'] instanceof String)) {
            throw new Error("Expected the field `commit_sha` to be a primitive type in the JSON string but got " + data['commit_sha']);
        }
        // ensure the json data is a string
        if (data['environment'] && !(typeof data['environment'] === 'string' || data['environment'] instanceof String)) {
            throw new Error("Expected the field `environment` to be a primitive type in the JSON string but got " + data['environment']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          AlertInstanceLocation.validateJSON(data['location']);
        }
        // validate the optional field `message`
        if (data['message']) { // data not null
          CodeScanningAlertInstanceMessage.validateJSON(data['message']);
        }
        // ensure the json data is a string
        if (data['ref'] && !(typeof data['ref'] === 'string' || data['ref'] instanceof String)) {
            throw new Error("Expected the field `ref` to be a primitive type in the JSON string but got " + data['ref']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}

AlertInstance.RequiredProperties = ["analysis_key", "environment", "ref", "state"];

/**
 * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
 * @member {String} analysis_key
 */
AlertInstance.prototype['analysis_key'] = undefined;

/**
 * Identifies the configuration under which the analysis was executed.
 * @member {String} category
 */
AlertInstance.prototype['category'] = undefined;

/**
 * @member {Array.<String>} classifications
 */
AlertInstance.prototype['classifications'] = undefined;

/**
 * @member {String} commit_sha
 */
AlertInstance.prototype['commit_sha'] = undefined;

/**
 * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
 * @member {String} environment
 */
AlertInstance.prototype['environment'] = undefined;

/**
 * @member {module:model/AlertInstanceLocation} location
 */
AlertInstance.prototype['location'] = undefined;

/**
 * @member {module:model/CodeScanningAlertInstanceMessage} message
 */
AlertInstance.prototype['message'] = undefined;

/**
 * The full Git reference, formatted as `refs/heads/<branch name>`.
 * @member {String} ref
 */
AlertInstance.prototype['ref'] = undefined;

/**
 * State of a code scanning alert.
 * @member {module:model/AlertInstance.StateEnum} state
 */
AlertInstance.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
AlertInstance['StateEnum'] = {

    /**
     * value: "open"
     * @const
     */
    "open": "open",

    /**
     * value: "dismissed"
     * @const
     */
    "dismissed": "dismissed",

    /**
     * value: "fixed"
     * @const
     */
    "fixed": "fixed"
};



export default AlertInstance;

