/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import App2 from './App2';
import CheckRunPullRequest from './CheckRunPullRequest';
import SimpleCommit from './SimpleCommit';

/**
 * The WebhookCheckSuiteCompletedCheckSuite model module.
 * @module model/WebhookCheckSuiteCompletedCheckSuite
 * @version 1.1.4
 */
class WebhookCheckSuiteCompletedCheckSuite {
    /**
     * Constructs a new <code>WebhookCheckSuiteCompletedCheckSuite</code>.
     * The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).
     * @alias module:model/WebhookCheckSuiteCompletedCheckSuite
     * @param after {String} 
     * @param app {module:model/App2} 
     * @param before {String} 
     * @param checkRunsUrl {String} 
     * @param conclusion {module:model/WebhookCheckSuiteCompletedCheckSuite.ConclusionEnum} The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has `completed`.
     * @param createdAt {Date} 
     * @param headBranch {String} The head branch name the changes are on.
     * @param headCommit {module:model/SimpleCommit} 
     * @param headSha {String} The SHA of the head commit that is being checked.
     * @param id {Number} 
     * @param latestCheckRunsCount {Number} 
     * @param nodeId {String} 
     * @param pullRequests {Array.<module:model/CheckRunPullRequest>} An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty.
     * @param status {module:model/WebhookCheckSuiteCompletedCheckSuite.StatusEnum} The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
     * @param updatedAt {Date} 
     * @param url {String} URL that points to the check suite API resource.
     */
    constructor(after, app, before, checkRunsUrl, conclusion, createdAt, headBranch, headCommit, headSha, id, latestCheckRunsCount, nodeId, pullRequests, status, updatedAt, url) { 
        
        WebhookCheckSuiteCompletedCheckSuite.initialize(this, after, app, before, checkRunsUrl, conclusion, createdAt, headBranch, headCommit, headSha, id, latestCheckRunsCount, nodeId, pullRequests, status, updatedAt, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, after, app, before, checkRunsUrl, conclusion, createdAt, headBranch, headCommit, headSha, id, latestCheckRunsCount, nodeId, pullRequests, status, updatedAt, url) { 
        obj['after'] = after;
        obj['app'] = app;
        obj['before'] = before;
        obj['check_runs_url'] = checkRunsUrl;
        obj['conclusion'] = conclusion;
        obj['created_at'] = createdAt;
        obj['head_branch'] = headBranch;
        obj['head_commit'] = headCommit;
        obj['head_sha'] = headSha;
        obj['id'] = id;
        obj['latest_check_runs_count'] = latestCheckRunsCount;
        obj['node_id'] = nodeId;
        obj['pull_requests'] = pullRequests;
        obj['status'] = status;
        obj['updated_at'] = updatedAt;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>WebhookCheckSuiteCompletedCheckSuite</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebhookCheckSuiteCompletedCheckSuite} obj Optional instance to populate.
     * @return {module:model/WebhookCheckSuiteCompletedCheckSuite} The populated <code>WebhookCheckSuiteCompletedCheckSuite</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebhookCheckSuiteCompletedCheckSuite();

            if (data.hasOwnProperty('after')) {
                obj['after'] = ApiClient.convertToType(data['after'], 'String');
            }
            if (data.hasOwnProperty('app')) {
                obj['app'] = App2.constructFromObject(data['app']);
            }
            if (data.hasOwnProperty('before')) {
                obj['before'] = ApiClient.convertToType(data['before'], 'String');
            }
            if (data.hasOwnProperty('check_runs_url')) {
                obj['check_runs_url'] = ApiClient.convertToType(data['check_runs_url'], 'String');
            }
            if (data.hasOwnProperty('conclusion')) {
                obj['conclusion'] = ApiClient.convertToType(data['conclusion'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('head_branch')) {
                obj['head_branch'] = ApiClient.convertToType(data['head_branch'], 'String');
            }
            if (data.hasOwnProperty('head_commit')) {
                obj['head_commit'] = SimpleCommit.constructFromObject(data['head_commit']);
            }
            if (data.hasOwnProperty('head_sha')) {
                obj['head_sha'] = ApiClient.convertToType(data['head_sha'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('latest_check_runs_count')) {
                obj['latest_check_runs_count'] = ApiClient.convertToType(data['latest_check_runs_count'], 'Number');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('pull_requests')) {
                obj['pull_requests'] = ApiClient.convertToType(data['pull_requests'], [CheckRunPullRequest]);
            }
            if (data.hasOwnProperty('rerequestable')) {
                obj['rerequestable'] = ApiClient.convertToType(data['rerequestable'], 'Boolean');
            }
            if (data.hasOwnProperty('runs_rerequestable')) {
                obj['runs_rerequestable'] = ApiClient.convertToType(data['runs_rerequestable'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebhookCheckSuiteCompletedCheckSuite</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebhookCheckSuiteCompletedCheckSuite</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WebhookCheckSuiteCompletedCheckSuite.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['after'] && !(typeof data['after'] === 'string' || data['after'] instanceof String)) {
            throw new Error("Expected the field `after` to be a primitive type in the JSON string but got " + data['after']);
        }
        // validate the optional field `app`
        if (data['app']) { // data not null
          App2.validateJSON(data['app']);
        }
        // ensure the json data is a string
        if (data['before'] && !(typeof data['before'] === 'string' || data['before'] instanceof String)) {
            throw new Error("Expected the field `before` to be a primitive type in the JSON string but got " + data['before']);
        }
        // ensure the json data is a string
        if (data['check_runs_url'] && !(typeof data['check_runs_url'] === 'string' || data['check_runs_url'] instanceof String)) {
            throw new Error("Expected the field `check_runs_url` to be a primitive type in the JSON string but got " + data['check_runs_url']);
        }
        // ensure the json data is a string
        if (data['conclusion'] && !(typeof data['conclusion'] === 'string' || data['conclusion'] instanceof String)) {
            throw new Error("Expected the field `conclusion` to be a primitive type in the JSON string but got " + data['conclusion']);
        }
        // ensure the json data is a string
        if (data['head_branch'] && !(typeof data['head_branch'] === 'string' || data['head_branch'] instanceof String)) {
            throw new Error("Expected the field `head_branch` to be a primitive type in the JSON string but got " + data['head_branch']);
        }
        // validate the optional field `head_commit`
        if (data['head_commit']) { // data not null
          SimpleCommit.validateJSON(data['head_commit']);
        }
        // ensure the json data is a string
        if (data['head_sha'] && !(typeof data['head_sha'] === 'string' || data['head_sha'] instanceof String)) {
            throw new Error("Expected the field `head_sha` to be a primitive type in the JSON string but got " + data['head_sha']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        if (data['pull_requests']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pull_requests'])) {
                throw new Error("Expected the field `pull_requests` to be an array in the JSON data but got " + data['pull_requests']);
            }
            // validate the optional field `pull_requests` (array)
            for (const item of data['pull_requests']) {
                CheckRunPullRequest.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

WebhookCheckSuiteCompletedCheckSuite.RequiredProperties = ["after", "app", "before", "check_runs_url", "conclusion", "created_at", "head_branch", "head_commit", "head_sha", "id", "latest_check_runs_count", "node_id", "pull_requests", "status", "updated_at", "url"];

/**
 * @member {String} after
 */
WebhookCheckSuiteCompletedCheckSuite.prototype['after'] = undefined;

/**
 * @member {module:model/App2} app
 */
WebhookCheckSuiteCompletedCheckSuite.prototype['app'] = undefined;

/**
 * @member {String} before
 */
WebhookCheckSuiteCompletedCheckSuite.prototype['before'] = undefined;

/**
 * @member {String} check_runs_url
 */
WebhookCheckSuiteCompletedCheckSuite.prototype['check_runs_url'] = undefined;

/**
 * The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has `completed`.
 * @member {module:model/WebhookCheckSuiteCompletedCheckSuite.ConclusionEnum} conclusion
 */
WebhookCheckSuiteCompletedCheckSuite.prototype['conclusion'] = undefined;

/**
 * @member {Date} created_at
 */
WebhookCheckSuiteCompletedCheckSuite.prototype['created_at'] = undefined;

/**
 * The head branch name the changes are on.
 * @member {String} head_branch
 */
WebhookCheckSuiteCompletedCheckSuite.prototype['head_branch'] = undefined;

/**
 * @member {module:model/SimpleCommit} head_commit
 */
WebhookCheckSuiteCompletedCheckSuite.prototype['head_commit'] = undefined;

/**
 * The SHA of the head commit that is being checked.
 * @member {String} head_sha
 */
WebhookCheckSuiteCompletedCheckSuite.prototype['head_sha'] = undefined;

/**
 * @member {Number} id
 */
WebhookCheckSuiteCompletedCheckSuite.prototype['id'] = undefined;

/**
 * @member {Number} latest_check_runs_count
 */
WebhookCheckSuiteCompletedCheckSuite.prototype['latest_check_runs_count'] = undefined;

/**
 * @member {String} node_id
 */
WebhookCheckSuiteCompletedCheckSuite.prototype['node_id'] = undefined;

/**
 * An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty.
 * @member {Array.<module:model/CheckRunPullRequest>} pull_requests
 */
WebhookCheckSuiteCompletedCheckSuite.prototype['pull_requests'] = undefined;

/**
 * @member {Boolean} rerequestable
 */
WebhookCheckSuiteCompletedCheckSuite.prototype['rerequestable'] = undefined;

/**
 * @member {Boolean} runs_rerequestable
 */
WebhookCheckSuiteCompletedCheckSuite.prototype['runs_rerequestable'] = undefined;

/**
 * The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
 * @member {module:model/WebhookCheckSuiteCompletedCheckSuite.StatusEnum} status
 */
WebhookCheckSuiteCompletedCheckSuite.prototype['status'] = undefined;

/**
 * @member {Date} updated_at
 */
WebhookCheckSuiteCompletedCheckSuite.prototype['updated_at'] = undefined;

/**
 * URL that points to the check suite API resource.
 * @member {String} url
 */
WebhookCheckSuiteCompletedCheckSuite.prototype['url'] = undefined;





/**
 * Allowed values for the <code>conclusion</code> property.
 * @enum {String}
 * @readonly
 */
WebhookCheckSuiteCompletedCheckSuite['ConclusionEnum'] = {

    /**
     * value: "success"
     * @const
     */
    "success": "success",

    /**
     * value: "failure"
     * @const
     */
    "failure": "failure",

    /**
     * value: "neutral"
     * @const
     */
    "neutral": "neutral",

    /**
     * value: "cancelled"
     * @const
     */
    "cancelled": "cancelled",

    /**
     * value: "timed_out"
     * @const
     */
    "timed_out": "timed_out",

    /**
     * value: "action_required"
     * @const
     */
    "action_required": "action_required",

    /**
     * value: "stale"
     * @const
     */
    "stale": "stale",

    /**
     * value: "null"
     * @const
     */
    "null": "null",

    /**
     * value: "skipped"
     * @const
     */
    "skipped": "skipped",

    /**
     * value: "startup_failure"
     * @const
     */
    "startup_failure": "startup_failure"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
WebhookCheckSuiteCompletedCheckSuite['StatusEnum'] = {

    /**
     * value: "requested"
     * @const
     */
    "requested": "requested",

    /**
     * value: "in_progress"
     * @const
     */
    "in_progress": "in_progress",

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed",

    /**
     * value: "queued"
     * @const
     */
    "queued": "queued",

    /**
     * value: "null"
     * @const
     */
    "null": "null",

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending"
};



export default WebhookCheckSuiteCompletedCheckSuite;

