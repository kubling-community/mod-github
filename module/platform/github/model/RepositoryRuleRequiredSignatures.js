/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RepositoryRuleRequiredSignatures model module.
 * @module model/RepositoryRuleRequiredSignatures
 * @version 1.1.4
 */
class RepositoryRuleRequiredSignatures {
    /**
     * Constructs a new <code>RepositoryRuleRequiredSignatures</code>.
     * Commits pushed to matching refs must have verified signatures.
     * @alias module:model/RepositoryRuleRequiredSignatures
     * @param type {module:model/RepositoryRuleRequiredSignatures.TypeEnum} 
     */
    constructor(type) { 
        
        RepositoryRuleRequiredSignatures.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>RepositoryRuleRequiredSignatures</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepositoryRuleRequiredSignatures} obj Optional instance to populate.
     * @return {module:model/RepositoryRuleRequiredSignatures} The populated <code>RepositoryRuleRequiredSignatures</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepositoryRuleRequiredSignatures();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepositoryRuleRequiredSignatures</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepositoryRuleRequiredSignatures</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RepositoryRuleRequiredSignatures.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

RepositoryRuleRequiredSignatures.RequiredProperties = ["type"];

/**
 * @member {module:model/RepositoryRuleRequiredSignatures.TypeEnum} type
 */
RepositoryRuleRequiredSignatures.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
RepositoryRuleRequiredSignatures['TypeEnum'] = {

    /**
     * value: "required_signatures"
     * @const
     */
    "required_signatures": "required_signatures"
};



export default RepositoryRuleRequiredSignatures;

