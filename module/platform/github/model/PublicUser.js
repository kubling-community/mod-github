/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PublicUserPlan from './PublicUserPlan';

/**
 * The PublicUser model module.
 * @module model/PublicUser
 * @version 1.1.4
 */
class PublicUser {
    /**
     * Constructs a new <code>PublicUser</code>.
     * Public User
     * @alias module:model/PublicUser
     * @param login {String} 
     * @param id {Number} 
     * @param nodeId {String} 
     * @param avatarUrl {String} 
     * @param gravatarId {String} 
     * @param url {String} 
     * @param htmlUrl {String} 
     * @param followersUrl {String} 
     * @param followingUrl {String} 
     * @param gistsUrl {String} 
     * @param starredUrl {String} 
     * @param subscriptionsUrl {String} 
     * @param organizationsUrl {String} 
     * @param reposUrl {String} 
     * @param eventsUrl {String} 
     * @param receivedEventsUrl {String} 
     * @param type {String} 
     * @param siteAdmin {Boolean} 
     * @param name {String} 
     * @param company {String} 
     * @param blog {String} 
     * @param location {String} 
     * @param email {String} 
     * @param hireable {Boolean} 
     * @param bio {String} 
     * @param publicRepos {Number} 
     * @param publicGists {Number} 
     * @param followers {Number} 
     * @param following {Number} 
     * @param createdAt {Date} 
     * @param updatedAt {Date} 
     */
    constructor(login, id, nodeId, avatarUrl, gravatarId, url, htmlUrl, followersUrl, followingUrl, gistsUrl, starredUrl, subscriptionsUrl, organizationsUrl, reposUrl, eventsUrl, receivedEventsUrl, type, siteAdmin, name, company, blog, location, email, hireable, bio, publicRepos, publicGists, followers, following, createdAt, updatedAt) { 
        
        PublicUser.initialize(this, login, id, nodeId, avatarUrl, gravatarId, url, htmlUrl, followersUrl, followingUrl, gistsUrl, starredUrl, subscriptionsUrl, organizationsUrl, reposUrl, eventsUrl, receivedEventsUrl, type, siteAdmin, name, company, blog, location, email, hireable, bio, publicRepos, publicGists, followers, following, createdAt, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, login, id, nodeId, avatarUrl, gravatarId, url, htmlUrl, followersUrl, followingUrl, gistsUrl, starredUrl, subscriptionsUrl, organizationsUrl, reposUrl, eventsUrl, receivedEventsUrl, type, siteAdmin, name, company, blog, location, email, hireable, bio, publicRepos, publicGists, followers, following, createdAt, updatedAt) { 
        obj['login'] = login;
        obj['id'] = id;
        obj['node_id'] = nodeId;
        obj['avatar_url'] = avatarUrl;
        obj['gravatar_id'] = gravatarId;
        obj['url'] = url;
        obj['html_url'] = htmlUrl;
        obj['followers_url'] = followersUrl;
        obj['following_url'] = followingUrl;
        obj['gists_url'] = gistsUrl;
        obj['starred_url'] = starredUrl;
        obj['subscriptions_url'] = subscriptionsUrl;
        obj['organizations_url'] = organizationsUrl;
        obj['repos_url'] = reposUrl;
        obj['events_url'] = eventsUrl;
        obj['received_events_url'] = receivedEventsUrl;
        obj['type'] = type;
        obj['site_admin'] = siteAdmin;
        obj['name'] = name;
        obj['company'] = company;
        obj['blog'] = blog;
        obj['location'] = location;
        obj['email'] = email;
        obj['hireable'] = hireable;
        obj['bio'] = bio;
        obj['public_repos'] = publicRepos;
        obj['public_gists'] = publicGists;
        obj['followers'] = followers;
        obj['following'] = following;
        obj['created_at'] = createdAt;
        obj['updated_at'] = updatedAt;
    }

    /**
     * Constructs a <code>PublicUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PublicUser} obj Optional instance to populate.
     * @return {module:model/PublicUser} The populated <code>PublicUser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PublicUser();

            if (data.hasOwnProperty('login')) {
                obj['login'] = ApiClient.convertToType(data['login'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('avatar_url')) {
                obj['avatar_url'] = ApiClient.convertToType(data['avatar_url'], 'String');
            }
            if (data.hasOwnProperty('gravatar_id')) {
                obj['gravatar_id'] = ApiClient.convertToType(data['gravatar_id'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('followers_url')) {
                obj['followers_url'] = ApiClient.convertToType(data['followers_url'], 'String');
            }
            if (data.hasOwnProperty('following_url')) {
                obj['following_url'] = ApiClient.convertToType(data['following_url'], 'String');
            }
            if (data.hasOwnProperty('gists_url')) {
                obj['gists_url'] = ApiClient.convertToType(data['gists_url'], 'String');
            }
            if (data.hasOwnProperty('starred_url')) {
                obj['starred_url'] = ApiClient.convertToType(data['starred_url'], 'String');
            }
            if (data.hasOwnProperty('subscriptions_url')) {
                obj['subscriptions_url'] = ApiClient.convertToType(data['subscriptions_url'], 'String');
            }
            if (data.hasOwnProperty('organizations_url')) {
                obj['organizations_url'] = ApiClient.convertToType(data['organizations_url'], 'String');
            }
            if (data.hasOwnProperty('repos_url')) {
                obj['repos_url'] = ApiClient.convertToType(data['repos_url'], 'String');
            }
            if (data.hasOwnProperty('events_url')) {
                obj['events_url'] = ApiClient.convertToType(data['events_url'], 'String');
            }
            if (data.hasOwnProperty('received_events_url')) {
                obj['received_events_url'] = ApiClient.convertToType(data['received_events_url'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('site_admin')) {
                obj['site_admin'] = ApiClient.convertToType(data['site_admin'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], 'String');
            }
            if (data.hasOwnProperty('blog')) {
                obj['blog'] = ApiClient.convertToType(data['blog'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('notification_email')) {
                obj['notification_email'] = ApiClient.convertToType(data['notification_email'], 'String');
            }
            if (data.hasOwnProperty('hireable')) {
                obj['hireable'] = ApiClient.convertToType(data['hireable'], 'Boolean');
            }
            if (data.hasOwnProperty('bio')) {
                obj['bio'] = ApiClient.convertToType(data['bio'], 'String');
            }
            if (data.hasOwnProperty('twitter_username')) {
                obj['twitter_username'] = ApiClient.convertToType(data['twitter_username'], 'String');
            }
            if (data.hasOwnProperty('public_repos')) {
                obj['public_repos'] = ApiClient.convertToType(data['public_repos'], 'Number');
            }
            if (data.hasOwnProperty('public_gists')) {
                obj['public_gists'] = ApiClient.convertToType(data['public_gists'], 'Number');
            }
            if (data.hasOwnProperty('followers')) {
                obj['followers'] = ApiClient.convertToType(data['followers'], 'Number');
            }
            if (data.hasOwnProperty('following')) {
                obj['following'] = ApiClient.convertToType(data['following'], 'Number');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('plan')) {
                obj['plan'] = PublicUserPlan.constructFromObject(data['plan']);
            }
            if (data.hasOwnProperty('suspended_at')) {
                obj['suspended_at'] = ApiClient.convertToType(data['suspended_at'], 'Date');
            }
            if (data.hasOwnProperty('private_gists')) {
                obj['private_gists'] = ApiClient.convertToType(data['private_gists'], 'Number');
            }
            if (data.hasOwnProperty('total_private_repos')) {
                obj['total_private_repos'] = ApiClient.convertToType(data['total_private_repos'], 'Number');
            }
            if (data.hasOwnProperty('owned_private_repos')) {
                obj['owned_private_repos'] = ApiClient.convertToType(data['owned_private_repos'], 'Number');
            }
            if (data.hasOwnProperty('disk_usage')) {
                obj['disk_usage'] = ApiClient.convertToType(data['disk_usage'], 'Number');
            }
            if (data.hasOwnProperty('collaborators')) {
                obj['collaborators'] = ApiClient.convertToType(data['collaborators'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PublicUser</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PublicUser</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PublicUser.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['login'] && !(typeof data['login'] === 'string' || data['login'] instanceof String)) {
            throw new Error("Expected the field `login` to be a primitive type in the JSON string but got " + data['login']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // ensure the json data is a string
        if (data['avatar_url'] && !(typeof data['avatar_url'] === 'string' || data['avatar_url'] instanceof String)) {
            throw new Error("Expected the field `avatar_url` to be a primitive type in the JSON string but got " + data['avatar_url']);
        }
        // ensure the json data is a string
        if (data['gravatar_id'] && !(typeof data['gravatar_id'] === 'string' || data['gravatar_id'] instanceof String)) {
            throw new Error("Expected the field `gravatar_id` to be a primitive type in the JSON string but got " + data['gravatar_id']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['followers_url'] && !(typeof data['followers_url'] === 'string' || data['followers_url'] instanceof String)) {
            throw new Error("Expected the field `followers_url` to be a primitive type in the JSON string but got " + data['followers_url']);
        }
        // ensure the json data is a string
        if (data['following_url'] && !(typeof data['following_url'] === 'string' || data['following_url'] instanceof String)) {
            throw new Error("Expected the field `following_url` to be a primitive type in the JSON string but got " + data['following_url']);
        }
        // ensure the json data is a string
        if (data['gists_url'] && !(typeof data['gists_url'] === 'string' || data['gists_url'] instanceof String)) {
            throw new Error("Expected the field `gists_url` to be a primitive type in the JSON string but got " + data['gists_url']);
        }
        // ensure the json data is a string
        if (data['starred_url'] && !(typeof data['starred_url'] === 'string' || data['starred_url'] instanceof String)) {
            throw new Error("Expected the field `starred_url` to be a primitive type in the JSON string but got " + data['starred_url']);
        }
        // ensure the json data is a string
        if (data['subscriptions_url'] && !(typeof data['subscriptions_url'] === 'string' || data['subscriptions_url'] instanceof String)) {
            throw new Error("Expected the field `subscriptions_url` to be a primitive type in the JSON string but got " + data['subscriptions_url']);
        }
        // ensure the json data is a string
        if (data['organizations_url'] && !(typeof data['organizations_url'] === 'string' || data['organizations_url'] instanceof String)) {
            throw new Error("Expected the field `organizations_url` to be a primitive type in the JSON string but got " + data['organizations_url']);
        }
        // ensure the json data is a string
        if (data['repos_url'] && !(typeof data['repos_url'] === 'string' || data['repos_url'] instanceof String)) {
            throw new Error("Expected the field `repos_url` to be a primitive type in the JSON string but got " + data['repos_url']);
        }
        // ensure the json data is a string
        if (data['events_url'] && !(typeof data['events_url'] === 'string' || data['events_url'] instanceof String)) {
            throw new Error("Expected the field `events_url` to be a primitive type in the JSON string but got " + data['events_url']);
        }
        // ensure the json data is a string
        if (data['received_events_url'] && !(typeof data['received_events_url'] === 'string' || data['received_events_url'] instanceof String)) {
            throw new Error("Expected the field `received_events_url` to be a primitive type in the JSON string but got " + data['received_events_url']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['company'] && !(typeof data['company'] === 'string' || data['company'] instanceof String)) {
            throw new Error("Expected the field `company` to be a primitive type in the JSON string but got " + data['company']);
        }
        // ensure the json data is a string
        if (data['blog'] && !(typeof data['blog'] === 'string' || data['blog'] instanceof String)) {
            throw new Error("Expected the field `blog` to be a primitive type in the JSON string but got " + data['blog']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['notification_email'] && !(typeof data['notification_email'] === 'string' || data['notification_email'] instanceof String)) {
            throw new Error("Expected the field `notification_email` to be a primitive type in the JSON string but got " + data['notification_email']);
        }
        // ensure the json data is a string
        if (data['bio'] && !(typeof data['bio'] === 'string' || data['bio'] instanceof String)) {
            throw new Error("Expected the field `bio` to be a primitive type in the JSON string but got " + data['bio']);
        }
        // ensure the json data is a string
        if (data['twitter_username'] && !(typeof data['twitter_username'] === 'string' || data['twitter_username'] instanceof String)) {
            throw new Error("Expected the field `twitter_username` to be a primitive type in the JSON string but got " + data['twitter_username']);
        }
        // validate the optional field `plan`
        if (data['plan']) { // data not null
          PublicUserPlan.validateJSON(data['plan']);
        }

        return true;
    }


}

PublicUser.RequiredProperties = ["login", "id", "node_id", "avatar_url", "gravatar_id", "url", "html_url", "followers_url", "following_url", "gists_url", "starred_url", "subscriptions_url", "organizations_url", "repos_url", "events_url", "received_events_url", "type", "site_admin", "name", "company", "blog", "location", "email", "hireable", "bio", "public_repos", "public_gists", "followers", "following", "created_at", "updated_at"];

/**
 * @member {String} login
 */
PublicUser.prototype['login'] = undefined;

/**
 * @member {Number} id
 */
PublicUser.prototype['id'] = undefined;

/**
 * @member {String} node_id
 */
PublicUser.prototype['node_id'] = undefined;

/**
 * @member {String} avatar_url
 */
PublicUser.prototype['avatar_url'] = undefined;

/**
 * @member {String} gravatar_id
 */
PublicUser.prototype['gravatar_id'] = undefined;

/**
 * @member {String} url
 */
PublicUser.prototype['url'] = undefined;

/**
 * @member {String} html_url
 */
PublicUser.prototype['html_url'] = undefined;

/**
 * @member {String} followers_url
 */
PublicUser.prototype['followers_url'] = undefined;

/**
 * @member {String} following_url
 */
PublicUser.prototype['following_url'] = undefined;

/**
 * @member {String} gists_url
 */
PublicUser.prototype['gists_url'] = undefined;

/**
 * @member {String} starred_url
 */
PublicUser.prototype['starred_url'] = undefined;

/**
 * @member {String} subscriptions_url
 */
PublicUser.prototype['subscriptions_url'] = undefined;

/**
 * @member {String} organizations_url
 */
PublicUser.prototype['organizations_url'] = undefined;

/**
 * @member {String} repos_url
 */
PublicUser.prototype['repos_url'] = undefined;

/**
 * @member {String} events_url
 */
PublicUser.prototype['events_url'] = undefined;

/**
 * @member {String} received_events_url
 */
PublicUser.prototype['received_events_url'] = undefined;

/**
 * @member {String} type
 */
PublicUser.prototype['type'] = undefined;

/**
 * @member {Boolean} site_admin
 */
PublicUser.prototype['site_admin'] = undefined;

/**
 * @member {String} name
 */
PublicUser.prototype['name'] = undefined;

/**
 * @member {String} company
 */
PublicUser.prototype['company'] = undefined;

/**
 * @member {String} blog
 */
PublicUser.prototype['blog'] = undefined;

/**
 * @member {String} location
 */
PublicUser.prototype['location'] = undefined;

/**
 * @member {String} email
 */
PublicUser.prototype['email'] = undefined;

/**
 * @member {String} notification_email
 */
PublicUser.prototype['notification_email'] = undefined;

/**
 * @member {Boolean} hireable
 */
PublicUser.prototype['hireable'] = undefined;

/**
 * @member {String} bio
 */
PublicUser.prototype['bio'] = undefined;

/**
 * @member {String} twitter_username
 */
PublicUser.prototype['twitter_username'] = undefined;

/**
 * @member {Number} public_repos
 */
PublicUser.prototype['public_repos'] = undefined;

/**
 * @member {Number} public_gists
 */
PublicUser.prototype['public_gists'] = undefined;

/**
 * @member {Number} followers
 */
PublicUser.prototype['followers'] = undefined;

/**
 * @member {Number} following
 */
PublicUser.prototype['following'] = undefined;

/**
 * @member {Date} created_at
 */
PublicUser.prototype['created_at'] = undefined;

/**
 * @member {Date} updated_at
 */
PublicUser.prototype['updated_at'] = undefined;

/**
 * @member {module:model/PublicUserPlan} plan
 */
PublicUser.prototype['plan'] = undefined;

/**
 * @member {Date} suspended_at
 */
PublicUser.prototype['suspended_at'] = undefined;

/**
 * @member {Number} private_gists
 */
PublicUser.prototype['private_gists'] = undefined;

/**
 * @member {Number} total_private_repos
 */
PublicUser.prototype['total_private_repos'] = undefined;

/**
 * @member {Number} owned_private_repos
 */
PublicUser.prototype['owned_private_repos'] = undefined;

/**
 * @member {Number} disk_usage
 */
PublicUser.prototype['disk_usage'] = undefined;

/**
 * @member {Number} collaborators
 */
PublicUser.prototype['collaborators'] = undefined;






export default PublicUser;

