/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SimpleClassroom from './SimpleClassroom';

/**
 * The SimpleClassroomAssignment model module.
 * @module model/SimpleClassroomAssignment
 * @version 1.1.4
 */
class SimpleClassroomAssignment {
    /**
     * Constructs a new <code>SimpleClassroomAssignment</code>.
     * A GitHub Classroom assignment
     * @alias module:model/SimpleClassroomAssignment
     * @param id {Number} Unique identifier of the repository.
     * @param publicRepo {Boolean} Whether an accepted assignment creates a public repository.
     * @param title {String} Assignment title.
     * @param type {module:model/SimpleClassroomAssignment.TypeEnum} Whether it's a Group Assignment or Individual Assignment.
     * @param inviteLink {String} The link that a student can use to accept the assignment.
     * @param invitationsEnabled {Boolean} Whether the invitation link is enabled. Visiting an enabled invitation link will accept the assignment.
     * @param slug {String} Sluggified name of the assignment.
     * @param studentsAreRepoAdmins {Boolean} Whether students are admins on created repository on accepted assignment.
     * @param feedbackPullRequestsEnabled {Boolean} Whether feedback pull request will be created on assignment acceptance.
     * @param editor {String} The selected editor for the assignment.
     * @param accepted {Number} The number of students that have accepted the assignment.
     * @param submitted {Number} The number of students that have submitted the assignment.
     * @param passing {Number} The number of students that have passed the assignment.
     * @param language {String} The programming language used in the assignment.
     * @param deadline {Date} The time at which the assignment is due.
     * @param classroom {module:model/SimpleClassroom} 
     */
    constructor(id, publicRepo, title, type, inviteLink, invitationsEnabled, slug, studentsAreRepoAdmins, feedbackPullRequestsEnabled, editor, accepted, submitted, passing, language, deadline, classroom) { 
        
        SimpleClassroomAssignment.initialize(this, id, publicRepo, title, type, inviteLink, invitationsEnabled, slug, studentsAreRepoAdmins, feedbackPullRequestsEnabled, editor, accepted, submitted, passing, language, deadline, classroom);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, publicRepo, title, type, inviteLink, invitationsEnabled, slug, studentsAreRepoAdmins, feedbackPullRequestsEnabled, editor, accepted, submitted, passing, language, deadline, classroom) { 
        obj['id'] = id;
        obj['public_repo'] = publicRepo;
        obj['title'] = title;
        obj['type'] = type;
        obj['invite_link'] = inviteLink;
        obj['invitations_enabled'] = invitationsEnabled;
        obj['slug'] = slug;
        obj['students_are_repo_admins'] = studentsAreRepoAdmins;
        obj['feedback_pull_requests_enabled'] = feedbackPullRequestsEnabled;
        obj['editor'] = editor;
        obj['accepted'] = accepted;
        obj['submitted'] = submitted;
        obj['passing'] = passing;
        obj['language'] = language;
        obj['deadline'] = deadline;
        obj['classroom'] = classroom;
    }

    /**
     * Constructs a <code>SimpleClassroomAssignment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimpleClassroomAssignment} obj Optional instance to populate.
     * @return {module:model/SimpleClassroomAssignment} The populated <code>SimpleClassroomAssignment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimpleClassroomAssignment();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('public_repo')) {
                obj['public_repo'] = ApiClient.convertToType(data['public_repo'], 'Boolean');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('invite_link')) {
                obj['invite_link'] = ApiClient.convertToType(data['invite_link'], 'String');
            }
            if (data.hasOwnProperty('invitations_enabled')) {
                obj['invitations_enabled'] = ApiClient.convertToType(data['invitations_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('students_are_repo_admins')) {
                obj['students_are_repo_admins'] = ApiClient.convertToType(data['students_are_repo_admins'], 'Boolean');
            }
            if (data.hasOwnProperty('feedback_pull_requests_enabled')) {
                obj['feedback_pull_requests_enabled'] = ApiClient.convertToType(data['feedback_pull_requests_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('max_teams')) {
                obj['max_teams'] = ApiClient.convertToType(data['max_teams'], 'Number');
            }
            if (data.hasOwnProperty('max_members')) {
                obj['max_members'] = ApiClient.convertToType(data['max_members'], 'Number');
            }
            if (data.hasOwnProperty('editor')) {
                obj['editor'] = ApiClient.convertToType(data['editor'], 'String');
            }
            if (data.hasOwnProperty('accepted')) {
                obj['accepted'] = ApiClient.convertToType(data['accepted'], 'Number');
            }
            if (data.hasOwnProperty('submitted')) {
                obj['submitted'] = ApiClient.convertToType(data['submitted'], 'Number');
            }
            if (data.hasOwnProperty('passing')) {
                obj['passing'] = ApiClient.convertToType(data['passing'], 'Number');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('deadline')) {
                obj['deadline'] = ApiClient.convertToType(data['deadline'], 'Date');
            }
            if (data.hasOwnProperty('classroom')) {
                obj['classroom'] = SimpleClassroom.constructFromObject(data['classroom']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SimpleClassroomAssignment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SimpleClassroomAssignment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SimpleClassroomAssignment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['invite_link'] && !(typeof data['invite_link'] === 'string' || data['invite_link'] instanceof String)) {
            throw new Error("Expected the field `invite_link` to be a primitive type in the JSON string but got " + data['invite_link']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['editor'] && !(typeof data['editor'] === 'string' || data['editor'] instanceof String)) {
            throw new Error("Expected the field `editor` to be a primitive type in the JSON string but got " + data['editor']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // validate the optional field `classroom`
        if (data['classroom']) { // data not null
          SimpleClassroom.validateJSON(data['classroom']);
        }

        return true;
    }


}

SimpleClassroomAssignment.RequiredProperties = ["id", "public_repo", "title", "type", "invite_link", "invitations_enabled", "slug", "students_are_repo_admins", "feedback_pull_requests_enabled", "editor", "accepted", "submitted", "passing", "language", "deadline", "classroom"];

/**
 * Unique identifier of the repository.
 * @member {Number} id
 */
SimpleClassroomAssignment.prototype['id'] = undefined;

/**
 * Whether an accepted assignment creates a public repository.
 * @member {Boolean} public_repo
 */
SimpleClassroomAssignment.prototype['public_repo'] = undefined;

/**
 * Assignment title.
 * @member {String} title
 */
SimpleClassroomAssignment.prototype['title'] = undefined;

/**
 * Whether it's a Group Assignment or Individual Assignment.
 * @member {module:model/SimpleClassroomAssignment.TypeEnum} type
 */
SimpleClassroomAssignment.prototype['type'] = undefined;

/**
 * The link that a student can use to accept the assignment.
 * @member {String} invite_link
 */
SimpleClassroomAssignment.prototype['invite_link'] = undefined;

/**
 * Whether the invitation link is enabled. Visiting an enabled invitation link will accept the assignment.
 * @member {Boolean} invitations_enabled
 */
SimpleClassroomAssignment.prototype['invitations_enabled'] = undefined;

/**
 * Sluggified name of the assignment.
 * @member {String} slug
 */
SimpleClassroomAssignment.prototype['slug'] = undefined;

/**
 * Whether students are admins on created repository on accepted assignment.
 * @member {Boolean} students_are_repo_admins
 */
SimpleClassroomAssignment.prototype['students_are_repo_admins'] = undefined;

/**
 * Whether feedback pull request will be created on assignment acceptance.
 * @member {Boolean} feedback_pull_requests_enabled
 */
SimpleClassroomAssignment.prototype['feedback_pull_requests_enabled'] = undefined;

/**
 * The maximum allowable teams for the assignment.
 * @member {Number} max_teams
 */
SimpleClassroomAssignment.prototype['max_teams'] = undefined;

/**
 * The maximum allowable members per team.
 * @member {Number} max_members
 */
SimpleClassroomAssignment.prototype['max_members'] = undefined;

/**
 * The selected editor for the assignment.
 * @member {String} editor
 */
SimpleClassroomAssignment.prototype['editor'] = undefined;

/**
 * The number of students that have accepted the assignment.
 * @member {Number} accepted
 */
SimpleClassroomAssignment.prototype['accepted'] = undefined;

/**
 * The number of students that have submitted the assignment.
 * @member {Number} submitted
 */
SimpleClassroomAssignment.prototype['submitted'] = undefined;

/**
 * The number of students that have passed the assignment.
 * @member {Number} passing
 */
SimpleClassroomAssignment.prototype['passing'] = undefined;

/**
 * The programming language used in the assignment.
 * @member {String} language
 */
SimpleClassroomAssignment.prototype['language'] = undefined;

/**
 * The time at which the assignment is due.
 * @member {Date} deadline
 */
SimpleClassroomAssignment.prototype['deadline'] = undefined;

/**
 * @member {module:model/SimpleClassroom} classroom
 */
SimpleClassroomAssignment.prototype['classroom'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
SimpleClassroomAssignment['TypeEnum'] = {

    /**
     * value: "individual"
     * @const
     */
    "individual": "individual",

    /**
     * value: "group"
     * @const
     */
    "group": "group"
};



export default SimpleClassroomAssignment;

