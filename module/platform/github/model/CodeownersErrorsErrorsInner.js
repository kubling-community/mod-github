/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CodeownersErrorsErrorsInner model module.
 * @module model/CodeownersErrorsErrorsInner
 * @version 1.1.4
 */
class CodeownersErrorsErrorsInner {
    /**
     * Constructs a new <code>CodeownersErrorsErrorsInner</code>.
     * @alias module:model/CodeownersErrorsErrorsInner
     * @param line {Number} The line number where this errors occurs.
     * @param column {Number} The column number where this errors occurs.
     * @param kind {String} The type of error.
     * @param message {String} A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting).
     * @param path {String} The path of the file where the error occured.
     */
    constructor(line, column, kind, message, path) { 
        
        CodeownersErrorsErrorsInner.initialize(this, line, column, kind, message, path);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, line, column, kind, message, path) { 
        obj['line'] = line;
        obj['column'] = column;
        obj['kind'] = kind;
        obj['message'] = message;
        obj['path'] = path;
    }

    /**
     * Constructs a <code>CodeownersErrorsErrorsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CodeownersErrorsErrorsInner} obj Optional instance to populate.
     * @return {module:model/CodeownersErrorsErrorsInner} The populated <code>CodeownersErrorsErrorsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CodeownersErrorsErrorsInner();

            if (data.hasOwnProperty('line')) {
                obj['line'] = ApiClient.convertToType(data['line'], 'Number');
            }
            if (data.hasOwnProperty('column')) {
                obj['column'] = ApiClient.convertToType(data['column'], 'Number');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('suggestion')) {
                obj['suggestion'] = ApiClient.convertToType(data['suggestion'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CodeownersErrorsErrorsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CodeownersErrorsErrorsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CodeownersErrorsErrorsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['suggestion'] && !(typeof data['suggestion'] === 'string' || data['suggestion'] instanceof String)) {
            throw new Error("Expected the field `suggestion` to be a primitive type in the JSON string but got " + data['suggestion']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }

        return true;
    }


}

CodeownersErrorsErrorsInner.RequiredProperties = ["line", "column", "kind", "message", "path"];

/**
 * The line number where this errors occurs.
 * @member {Number} line
 */
CodeownersErrorsErrorsInner.prototype['line'] = undefined;

/**
 * The column number where this errors occurs.
 * @member {Number} column
 */
CodeownersErrorsErrorsInner.prototype['column'] = undefined;

/**
 * The contents of the line where the error occurs.
 * @member {String} source
 */
CodeownersErrorsErrorsInner.prototype['source'] = undefined;

/**
 * The type of error.
 * @member {String} kind
 */
CodeownersErrorsErrorsInner.prototype['kind'] = undefined;

/**
 * Suggested action to fix the error. This will usually be `null`, but is provided for some common errors.
 * @member {String} suggestion
 */
CodeownersErrorsErrorsInner.prototype['suggestion'] = undefined;

/**
 * A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting).
 * @member {String} message
 */
CodeownersErrorsErrorsInner.prototype['message'] = undefined;

/**
 * The path of the file where the error occured.
 * @member {String} path
 */
CodeownersErrorsErrorsInner.prototype['path'] = undefined;






export default CodeownersErrorsErrorsInner;

