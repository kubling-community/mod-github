/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CopilotSeatDetailsAssignee from './CopilotSeatDetailsAssignee';
import CopilotSeatDetailsAssigningTeam from './CopilotSeatDetailsAssigningTeam';

/**
 * The CopilotSeatDetails model module.
 * @module model/CopilotSeatDetails
 * @version 1.1.4
 */
class CopilotSeatDetails {
    /**
     * Constructs a new <code>CopilotSeatDetails</code>.
     * Information about a Copilot Business seat assignment for a user, team, or organization.
     * @alias module:model/CopilotSeatDetails
     * @param assignee {module:model/CopilotSeatDetailsAssignee} 
     * @param createdAt {Date} Timestamp of when the assignee was last granted access to GitHub Copilot, in ISO 8601 format.
     */
    constructor(assignee, createdAt) { 
        
        CopilotSeatDetails.initialize(this, assignee, createdAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, assignee, createdAt) { 
        obj['assignee'] = assignee;
        obj['created_at'] = createdAt;
    }

    /**
     * Constructs a <code>CopilotSeatDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CopilotSeatDetails} obj Optional instance to populate.
     * @return {module:model/CopilotSeatDetails} The populated <code>CopilotSeatDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CopilotSeatDetails();

            if (data.hasOwnProperty('assignee')) {
                obj['assignee'] = CopilotSeatDetailsAssignee.constructFromObject(data['assignee']);
            }
            if (data.hasOwnProperty('assigning_team')) {
                obj['assigning_team'] = CopilotSeatDetailsAssigningTeam.constructFromObject(data['assigning_team']);
            }
            if (data.hasOwnProperty('pending_cancellation_date')) {
                obj['pending_cancellation_date'] = ApiClient.convertToType(data['pending_cancellation_date'], 'Date');
            }
            if (data.hasOwnProperty('last_activity_at')) {
                obj['last_activity_at'] = ApiClient.convertToType(data['last_activity_at'], 'Date');
            }
            if (data.hasOwnProperty('last_activity_editor')) {
                obj['last_activity_editor'] = ApiClient.convertToType(data['last_activity_editor'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CopilotSeatDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CopilotSeatDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CopilotSeatDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `assignee`
        if (data['assignee']) { // data not null
          CopilotSeatDetailsAssignee.validateJSON(data['assignee']);
        }
        // validate the optional field `assigning_team`
        if (data['assigning_team']) { // data not null
          CopilotSeatDetailsAssigningTeam.validateJSON(data['assigning_team']);
        }
        // ensure the json data is a string
        if (data['last_activity_editor'] && !(typeof data['last_activity_editor'] === 'string' || data['last_activity_editor'] instanceof String)) {
            throw new Error("Expected the field `last_activity_editor` to be a primitive type in the JSON string but got " + data['last_activity_editor']);
        }

        return true;
    }


}

CopilotSeatDetails.RequiredProperties = ["assignee", "created_at"];

/**
 * @member {module:model/CopilotSeatDetailsAssignee} assignee
 */
CopilotSeatDetails.prototype['assignee'] = undefined;

/**
 * @member {module:model/CopilotSeatDetailsAssigningTeam} assigning_team
 */
CopilotSeatDetails.prototype['assigning_team'] = undefined;

/**
 * The pending cancellation date for the seat, in `YYYY-MM-DD` format. This will be null unless the assignee's Copilot access has been canceled during the current billing cycle. If the seat has been cancelled, this corresponds to the start of the organization's next billing cycle.
 * @member {Date} pending_cancellation_date
 */
CopilotSeatDetails.prototype['pending_cancellation_date'] = undefined;

/**
 * Timestamp of user's last GitHub Copilot activity, in ISO 8601 format.
 * @member {Date} last_activity_at
 */
CopilotSeatDetails.prototype['last_activity_at'] = undefined;

/**
 * Last editor that was used by the user for a GitHub Copilot completion.
 * @member {String} last_activity_editor
 */
CopilotSeatDetails.prototype['last_activity_editor'] = undefined;

/**
 * Timestamp of when the assignee was last granted access to GitHub Copilot, in ISO 8601 format.
 * @member {Date} created_at
 */
CopilotSeatDetails.prototype['created_at'] = undefined;

/**
 * Timestamp of when the assignee's GitHub Copilot access was last updated, in ISO 8601 format.
 * @member {Date} updated_at
 */
CopilotSeatDetails.prototype['updated_at'] = undefined;






export default CopilotSeatDetails;

