/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnvironmentApprovalsEnvironmentsInner from './EnvironmentApprovalsEnvironmentsInner';
import SimpleUser from './SimpleUser';

/**
 * The EnvironmentApprovals model module.
 * @module model/EnvironmentApprovals
 * @version 1.1.4
 */
class EnvironmentApprovals {
    /**
     * Constructs a new <code>EnvironmentApprovals</code>.
     * An entry in the reviews log for environment deployments
     * @alias module:model/EnvironmentApprovals
     * @param environments {Array.<module:model/EnvironmentApprovalsEnvironmentsInner>} The list of environments that were approved or rejected
     * @param state {module:model/EnvironmentApprovals.StateEnum} Whether deployment to the environment(s) was approved or rejected or pending (with comments)
     * @param user {module:model/SimpleUser} 
     * @param comment {String} The comment submitted with the deployment review
     */
    constructor(environments, state, user, comment) { 
        
        EnvironmentApprovals.initialize(this, environments, state, user, comment);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, environments, state, user, comment) { 
        obj['environments'] = environments;
        obj['state'] = state;
        obj['user'] = user;
        obj['comment'] = comment;
    }

    /**
     * Constructs a <code>EnvironmentApprovals</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EnvironmentApprovals} obj Optional instance to populate.
     * @return {module:model/EnvironmentApprovals} The populated <code>EnvironmentApprovals</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EnvironmentApprovals();

            if (data.hasOwnProperty('environments')) {
                obj['environments'] = ApiClient.convertToType(data['environments'], [EnvironmentApprovalsEnvironmentsInner]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = SimpleUser.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EnvironmentApprovals</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EnvironmentApprovals</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EnvironmentApprovals.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['environments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['environments'])) {
                throw new Error("Expected the field `environments` to be an array in the JSON data but got " + data['environments']);
            }
            // validate the optional field `environments` (array)
            for (const item of data['environments']) {
                EnvironmentApprovalsEnvironmentsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          SimpleUser.validateJSON(data['user']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }

        return true;
    }


}

EnvironmentApprovals.RequiredProperties = ["environments", "state", "user", "comment"];

/**
 * The list of environments that were approved or rejected
 * @member {Array.<module:model/EnvironmentApprovalsEnvironmentsInner>} environments
 */
EnvironmentApprovals.prototype['environments'] = undefined;

/**
 * Whether deployment to the environment(s) was approved or rejected or pending (with comments)
 * @member {module:model/EnvironmentApprovals.StateEnum} state
 */
EnvironmentApprovals.prototype['state'] = undefined;

/**
 * @member {module:model/SimpleUser} user
 */
EnvironmentApprovals.prototype['user'] = undefined;

/**
 * The comment submitted with the deployment review
 * @member {String} comment
 */
EnvironmentApprovals.prototype['comment'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
EnvironmentApprovals['StateEnum'] = {

    /**
     * value: "approved"
     * @const
     */
    "approved": "approved",

    /**
     * value: "rejected"
     * @const
     */
    "rejected": "rejected",

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending"
};



export default EnvironmentApprovals;

