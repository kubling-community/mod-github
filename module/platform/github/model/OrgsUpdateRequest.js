/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OrgsUpdateRequest model module.
 * @module model/OrgsUpdateRequest
 * @version 1.1.4
 */
class OrgsUpdateRequest {
    /**
     * Constructs a new <code>OrgsUpdateRequest</code>.
     * @alias module:model/OrgsUpdateRequest
     */
    constructor() { 
        
        OrgsUpdateRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrgsUpdateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrgsUpdateRequest} obj Optional instance to populate.
     * @return {module:model/OrgsUpdateRequest} The populated <code>OrgsUpdateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrgsUpdateRequest();

            if (data.hasOwnProperty('billing_email')) {
                obj['billing_email'] = ApiClient.convertToType(data['billing_email'], 'String');
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('twitter_username')) {
                obj['twitter_username'] = ApiClient.convertToType(data['twitter_username'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('has_organization_projects')) {
                obj['has_organization_projects'] = ApiClient.convertToType(data['has_organization_projects'], 'Boolean');
            }
            if (data.hasOwnProperty('has_repository_projects')) {
                obj['has_repository_projects'] = ApiClient.convertToType(data['has_repository_projects'], 'Boolean');
            }
            if (data.hasOwnProperty('default_repository_permission')) {
                obj['default_repository_permission'] = ApiClient.convertToType(data['default_repository_permission'], 'String');
            }
            if (data.hasOwnProperty('members_can_create_repositories')) {
                obj['members_can_create_repositories'] = ApiClient.convertToType(data['members_can_create_repositories'], 'Boolean');
            }
            if (data.hasOwnProperty('members_can_create_internal_repositories')) {
                obj['members_can_create_internal_repositories'] = ApiClient.convertToType(data['members_can_create_internal_repositories'], 'Boolean');
            }
            if (data.hasOwnProperty('members_can_create_private_repositories')) {
                obj['members_can_create_private_repositories'] = ApiClient.convertToType(data['members_can_create_private_repositories'], 'Boolean');
            }
            if (data.hasOwnProperty('members_can_create_public_repositories')) {
                obj['members_can_create_public_repositories'] = ApiClient.convertToType(data['members_can_create_public_repositories'], 'Boolean');
            }
            if (data.hasOwnProperty('members_allowed_repository_creation_type')) {
                obj['members_allowed_repository_creation_type'] = ApiClient.convertToType(data['members_allowed_repository_creation_type'], 'String');
            }
            if (data.hasOwnProperty('members_can_create_pages')) {
                obj['members_can_create_pages'] = ApiClient.convertToType(data['members_can_create_pages'], 'Boolean');
            }
            if (data.hasOwnProperty('members_can_create_public_pages')) {
                obj['members_can_create_public_pages'] = ApiClient.convertToType(data['members_can_create_public_pages'], 'Boolean');
            }
            if (data.hasOwnProperty('members_can_create_private_pages')) {
                obj['members_can_create_private_pages'] = ApiClient.convertToType(data['members_can_create_private_pages'], 'Boolean');
            }
            if (data.hasOwnProperty('members_can_fork_private_repositories')) {
                obj['members_can_fork_private_repositories'] = ApiClient.convertToType(data['members_can_fork_private_repositories'], 'Boolean');
            }
            if (data.hasOwnProperty('web_commit_signoff_required')) {
                obj['web_commit_signoff_required'] = ApiClient.convertToType(data['web_commit_signoff_required'], 'Boolean');
            }
            if (data.hasOwnProperty('blog')) {
                obj['blog'] = ApiClient.convertToType(data['blog'], 'String');
            }
            if (data.hasOwnProperty('advanced_security_enabled_for_new_repositories')) {
                obj['advanced_security_enabled_for_new_repositories'] = ApiClient.convertToType(data['advanced_security_enabled_for_new_repositories'], 'Boolean');
            }
            if (data.hasOwnProperty('dependabot_alerts_enabled_for_new_repositories')) {
                obj['dependabot_alerts_enabled_for_new_repositories'] = ApiClient.convertToType(data['dependabot_alerts_enabled_for_new_repositories'], 'Boolean');
            }
            if (data.hasOwnProperty('dependabot_security_updates_enabled_for_new_repositories')) {
                obj['dependabot_security_updates_enabled_for_new_repositories'] = ApiClient.convertToType(data['dependabot_security_updates_enabled_for_new_repositories'], 'Boolean');
            }
            if (data.hasOwnProperty('dependency_graph_enabled_for_new_repositories')) {
                obj['dependency_graph_enabled_for_new_repositories'] = ApiClient.convertToType(data['dependency_graph_enabled_for_new_repositories'], 'Boolean');
            }
            if (data.hasOwnProperty('secret_scanning_enabled_for_new_repositories')) {
                obj['secret_scanning_enabled_for_new_repositories'] = ApiClient.convertToType(data['secret_scanning_enabled_for_new_repositories'], 'Boolean');
            }
            if (data.hasOwnProperty('secret_scanning_push_protection_enabled_for_new_repositories')) {
                obj['secret_scanning_push_protection_enabled_for_new_repositories'] = ApiClient.convertToType(data['secret_scanning_push_protection_enabled_for_new_repositories'], 'Boolean');
            }
            if (data.hasOwnProperty('secret_scanning_push_protection_custom_link_enabled')) {
                obj['secret_scanning_push_protection_custom_link_enabled'] = ApiClient.convertToType(data['secret_scanning_push_protection_custom_link_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('secret_scanning_push_protection_custom_link')) {
                obj['secret_scanning_push_protection_custom_link'] = ApiClient.convertToType(data['secret_scanning_push_protection_custom_link'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrgsUpdateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrgsUpdateRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['billing_email'] && !(typeof data['billing_email'] === 'string' || data['billing_email'] instanceof String)) {
            throw new Error("Expected the field `billing_email` to be a primitive type in the JSON string but got " + data['billing_email']);
        }
        // ensure the json data is a string
        if (data['company'] && !(typeof data['company'] === 'string' || data['company'] instanceof String)) {
            throw new Error("Expected the field `company` to be a primitive type in the JSON string but got " + data['company']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['twitter_username'] && !(typeof data['twitter_username'] === 'string' || data['twitter_username'] instanceof String)) {
            throw new Error("Expected the field `twitter_username` to be a primitive type in the JSON string but got " + data['twitter_username']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['default_repository_permission'] && !(typeof data['default_repository_permission'] === 'string' || data['default_repository_permission'] instanceof String)) {
            throw new Error("Expected the field `default_repository_permission` to be a primitive type in the JSON string but got " + data['default_repository_permission']);
        }
        // ensure the json data is a string
        if (data['members_allowed_repository_creation_type'] && !(typeof data['members_allowed_repository_creation_type'] === 'string' || data['members_allowed_repository_creation_type'] instanceof String)) {
            throw new Error("Expected the field `members_allowed_repository_creation_type` to be a primitive type in the JSON string but got " + data['members_allowed_repository_creation_type']);
        }
        // ensure the json data is a string
        if (data['blog'] && !(typeof data['blog'] === 'string' || data['blog'] instanceof String)) {
            throw new Error("Expected the field `blog` to be a primitive type in the JSON string but got " + data['blog']);
        }
        // ensure the json data is a string
        if (data['secret_scanning_push_protection_custom_link'] && !(typeof data['secret_scanning_push_protection_custom_link'] === 'string' || data['secret_scanning_push_protection_custom_link'] instanceof String)) {
            throw new Error("Expected the field `secret_scanning_push_protection_custom_link` to be a primitive type in the JSON string but got " + data['secret_scanning_push_protection_custom_link']);
        }

        return true;
    }


}



/**
 * Billing email address. This address is not publicized.
 * @member {String} billing_email
 */
OrgsUpdateRequest.prototype['billing_email'] = undefined;

/**
 * The company name.
 * @member {String} company
 */
OrgsUpdateRequest.prototype['company'] = undefined;

/**
 * The publicly visible email address.
 * @member {String} email
 */
OrgsUpdateRequest.prototype['email'] = undefined;

/**
 * The Twitter username of the company.
 * @member {String} twitter_username
 */
OrgsUpdateRequest.prototype['twitter_username'] = undefined;

/**
 * The location.
 * @member {String} location
 */
OrgsUpdateRequest.prototype['location'] = undefined;

/**
 * The shorthand name of the company.
 * @member {String} name
 */
OrgsUpdateRequest.prototype['name'] = undefined;

/**
 * The description of the company. The maximum size is 160 characters.
 * @member {String} description
 */
OrgsUpdateRequest.prototype['description'] = undefined;

/**
 * Whether an organization can use organization projects.
 * @member {Boolean} has_organization_projects
 */
OrgsUpdateRequest.prototype['has_organization_projects'] = undefined;

/**
 * Whether repositories that belong to the organization can use repository projects.
 * @member {Boolean} has_repository_projects
 */
OrgsUpdateRequest.prototype['has_repository_projects'] = undefined;

/**
 * Default permission level members have for organization repositories.
 * @member {module:model/OrgsUpdateRequest.DefaultRepositoryPermissionEnum} default_repository_permission
 * @default 'read'
 */
OrgsUpdateRequest.prototype['default_repository_permission'] = 'read';

/**
 * Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
 * @member {Boolean} members_can_create_repositories
 * @default true
 */
OrgsUpdateRequest.prototype['members_can_create_repositories'] = true;

/**
 * Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.
 * @member {Boolean} members_can_create_internal_repositories
 */
OrgsUpdateRequest.prototype['members_can_create_internal_repositories'] = undefined;

/**
 * Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.
 * @member {Boolean} members_can_create_private_repositories
 */
OrgsUpdateRequest.prototype['members_can_create_private_repositories'] = undefined;

/**
 * Whether organization members can create public repositories, which are visible to anyone. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.
 * @member {Boolean} members_can_create_public_repositories
 */
OrgsUpdateRequest.prototype['members_can_create_public_repositories'] = undefined;

/**
 * Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud.  **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
 * @member {module:model/OrgsUpdateRequest.MembersAllowedRepositoryCreationTypeEnum} members_allowed_repository_creation_type
 */
OrgsUpdateRequest.prototype['members_allowed_repository_creation_type'] = undefined;

/**
 * Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.
 * @member {Boolean} members_can_create_pages
 * @default true
 */
OrgsUpdateRequest.prototype['members_can_create_pages'] = true;

/**
 * Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
 * @member {Boolean} members_can_create_public_pages
 * @default true
 */
OrgsUpdateRequest.prototype['members_can_create_public_pages'] = true;

/**
 * Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
 * @member {Boolean} members_can_create_private_pages
 * @default true
 */
OrgsUpdateRequest.prototype['members_can_create_private_pages'] = true;

/**
 * Whether organization members can fork private organization repositories.
 * @member {Boolean} members_can_fork_private_repositories
 * @default false
 */
OrgsUpdateRequest.prototype['members_can_fork_private_repositories'] = false;

/**
 * Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.
 * @member {Boolean} web_commit_signoff_required
 * @default false
 */
OrgsUpdateRequest.prototype['web_commit_signoff_required'] = false;

/**
 * @member {String} blog
 */
OrgsUpdateRequest.prototype['blog'] = undefined;

/**
 * Whether GitHub Advanced Security is automatically enabled for new repositories.  To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"  You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
 * @member {Boolean} advanced_security_enabled_for_new_repositories
 */
OrgsUpdateRequest.prototype['advanced_security_enabled_for_new_repositories'] = undefined;

/**
 * Whether Dependabot alerts is automatically enabled for new repositories.  To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"  You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
 * @member {Boolean} dependabot_alerts_enabled_for_new_repositories
 */
OrgsUpdateRequest.prototype['dependabot_alerts_enabled_for_new_repositories'] = undefined;

/**
 * Whether Dependabot security updates is automatically enabled for new repositories.  To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"  You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
 * @member {Boolean} dependabot_security_updates_enabled_for_new_repositories
 */
OrgsUpdateRequest.prototype['dependabot_security_updates_enabled_for_new_repositories'] = undefined;

/**
 * Whether dependency graph is automatically enabled for new repositories.  To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"  You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
 * @member {Boolean} dependency_graph_enabled_for_new_repositories
 */
OrgsUpdateRequest.prototype['dependency_graph_enabled_for_new_repositories'] = undefined;

/**
 * Whether secret scanning is automatically enabled for new repositories.  To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"  You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
 * @member {Boolean} secret_scanning_enabled_for_new_repositories
 */
OrgsUpdateRequest.prototype['secret_scanning_enabled_for_new_repositories'] = undefined;

/**
 * Whether secret scanning push protection is automatically enabled for new repositories.  To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"  You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
 * @member {Boolean} secret_scanning_push_protection_enabled_for_new_repositories
 */
OrgsUpdateRequest.prototype['secret_scanning_push_protection_enabled_for_new_repositories'] = undefined;

/**
 * Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
 * @member {Boolean} secret_scanning_push_protection_custom_link_enabled
 */
OrgsUpdateRequest.prototype['secret_scanning_push_protection_custom_link_enabled'] = undefined;

/**
 * If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be displayed to contributors who are blocked from pushing a secret.
 * @member {String} secret_scanning_push_protection_custom_link
 */
OrgsUpdateRequest.prototype['secret_scanning_push_protection_custom_link'] = undefined;





/**
 * Allowed values for the <code>default_repository_permission</code> property.
 * @enum {String}
 * @readonly
 */
OrgsUpdateRequest['DefaultRepositoryPermissionEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write",

    /**
     * value: "admin"
     * @const
     */
    "admin": "admin",

    /**
     * value: "none"
     * @const
     */
    "none": "none"
};


/**
 * Allowed values for the <code>members_allowed_repository_creation_type</code> property.
 * @enum {String}
 * @readonly
 */
OrgsUpdateRequest['MembersAllowedRepositoryCreationTypeEnum'] = {

    /**
     * value: "all"
     * @const
     */
    "all": "all",

    /**
     * value: "private"
     * @const
     */
    "private": "private",

    /**
     * value: "none"
     * @const
     */
    "none": "none"
};



export default OrgsUpdateRequest;

