/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IntegrationInstallationRequestAccount from './IntegrationInstallationRequestAccount';
import SimpleUser from './SimpleUser';

/**
 * The IntegrationInstallationRequest model module.
 * @module model/IntegrationInstallationRequest
 * @version 1.1.4
 */
class IntegrationInstallationRequest {
    /**
     * Constructs a new <code>IntegrationInstallationRequest</code>.
     * Request to install an integration on a target
     * @alias module:model/IntegrationInstallationRequest
     * @param id {Number} Unique identifier of the request installation.
     * @param account {module:model/IntegrationInstallationRequestAccount} 
     * @param requester {module:model/SimpleUser} 
     * @param createdAt {Date} 
     */
    constructor(id, account, requester, createdAt) { 
        
        IntegrationInstallationRequest.initialize(this, id, account, requester, createdAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, account, requester, createdAt) { 
        obj['id'] = id;
        obj['account'] = account;
        obj['requester'] = requester;
        obj['created_at'] = createdAt;
    }

    /**
     * Constructs a <code>IntegrationInstallationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IntegrationInstallationRequest} obj Optional instance to populate.
     * @return {module:model/IntegrationInstallationRequest} The populated <code>IntegrationInstallationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IntegrationInstallationRequest();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('account')) {
                obj['account'] = IntegrationInstallationRequestAccount.constructFromObject(data['account']);
            }
            if (data.hasOwnProperty('requester')) {
                obj['requester'] = SimpleUser.constructFromObject(data['requester']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IntegrationInstallationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IntegrationInstallationRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IntegrationInstallationRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // validate the optional field `account`
        if (data['account']) { // data not null
          IntegrationInstallationRequestAccount.validateJSON(data['account']);
        }
        // validate the optional field `requester`
        if (data['requester']) { // data not null
          SimpleUser.validateJSON(data['requester']);
        }

        return true;
    }


}

IntegrationInstallationRequest.RequiredProperties = ["id", "account", "requester", "created_at"];

/**
 * Unique identifier of the request installation.
 * @member {Number} id
 */
IntegrationInstallationRequest.prototype['id'] = undefined;

/**
 * @member {String} node_id
 */
IntegrationInstallationRequest.prototype['node_id'] = undefined;

/**
 * @member {module:model/IntegrationInstallationRequestAccount} account
 */
IntegrationInstallationRequest.prototype['account'] = undefined;

/**
 * @member {module:model/SimpleUser} requester
 */
IntegrationInstallationRequest.prototype['requester'] = undefined;

/**
 * @member {Date} created_at
 */
IntegrationInstallationRequest.prototype['created_at'] = undefined;






export default IntegrationInstallationRequest;

