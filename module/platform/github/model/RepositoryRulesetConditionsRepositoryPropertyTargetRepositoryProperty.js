/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RepositoryRulesetConditionsRepositoryPropertySpec from './RepositoryRulesetConditionsRepositoryPropertySpec';

/**
 * The RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty model module.
 * @module model/RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty
 * @version 1.1.4
 */
class RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty {
    /**
     * Constructs a new <code>RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty</code>.
     * @alias module:model/RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty
     */
    constructor() { 
        
        RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty} obj Optional instance to populate.
     * @return {module:model/RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty} The populated <code>RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty();

            if (data.hasOwnProperty('include')) {
                obj['include'] = ApiClient.convertToType(data['include'], [RepositoryRulesetConditionsRepositoryPropertySpec]);
            }
            if (data.hasOwnProperty('exclude')) {
                obj['exclude'] = ApiClient.convertToType(data['exclude'], [RepositoryRulesetConditionsRepositoryPropertySpec]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty</code>.
     */
    static validateJSON(data) {
        if (data['include']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['include'])) {
                throw new Error("Expected the field `include` to be an array in the JSON data but got " + data['include']);
            }
            // validate the optional field `include` (array)
            for (const item of data['include']) {
                RepositoryRulesetConditionsRepositoryPropertySpec.validateJSON(item);
            };
        }
        if (data['exclude']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['exclude'])) {
                throw new Error("Expected the field `exclude` to be an array in the JSON data but got " + data['exclude']);
            }
            // validate the optional field `exclude` (array)
            for (const item of data['exclude']) {
                RepositoryRulesetConditionsRepositoryPropertySpec.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The repository properties and values to include. All of these properties must match for the condition to pass.
 * @member {Array.<module:model/RepositoryRulesetConditionsRepositoryPropertySpec>} include
 */
RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty.prototype['include'] = undefined;

/**
 * The repository properties and values to exclude. The condition will not pass if any of these properties match.
 * @member {Array.<module:model/RepositoryRulesetConditionsRepositoryPropertySpec>} exclude
 */
RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty.prototype['exclude'] = undefined;






export default RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty;

