/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PullsCreateRequest model module.
 * @module model/PullsCreateRequest
 * @version 1.1.4
 */
class PullsCreateRequest {
    /**
     * Constructs a new <code>PullsCreateRequest</code>.
     * @alias module:model/PullsCreateRequest
     * @param head {String} The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.
     * @param base {String} The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
     */
    constructor(head, base) { 
        
        PullsCreateRequest.initialize(this, head, base);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, head, base) { 
        obj['head'] = head;
        obj['base'] = base;
    }

    /**
     * Constructs a <code>PullsCreateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PullsCreateRequest} obj Optional instance to populate.
     * @return {module:model/PullsCreateRequest} The populated <code>PullsCreateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PullsCreateRequest();

            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('head')) {
                obj['head'] = ApiClient.convertToType(data['head'], 'String');
            }
            if (data.hasOwnProperty('head_repo')) {
                obj['head_repo'] = ApiClient.convertToType(data['head_repo'], 'String');
            }
            if (data.hasOwnProperty('base')) {
                obj['base'] = ApiClient.convertToType(data['base'], 'String');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('maintainer_can_modify')) {
                obj['maintainer_can_modify'] = ApiClient.convertToType(data['maintainer_can_modify'], 'Boolean');
            }
            if (data.hasOwnProperty('draft')) {
                obj['draft'] = ApiClient.convertToType(data['draft'], 'Boolean');
            }
            if (data.hasOwnProperty('issue')) {
                obj['issue'] = ApiClient.convertToType(data['issue'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PullsCreateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PullsCreateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PullsCreateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['head'] && !(typeof data['head'] === 'string' || data['head'] instanceof String)) {
            throw new Error("Expected the field `head` to be a primitive type in the JSON string but got " + data['head']);
        }
        // ensure the json data is a string
        if (data['head_repo'] && !(typeof data['head_repo'] === 'string' || data['head_repo'] instanceof String)) {
            throw new Error("Expected the field `head_repo` to be a primitive type in the JSON string but got " + data['head_repo']);
        }
        // ensure the json data is a string
        if (data['base'] && !(typeof data['base'] === 'string' || data['base'] instanceof String)) {
            throw new Error("Expected the field `base` to be a primitive type in the JSON string but got " + data['base']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }

        return true;
    }


}

PullsCreateRequest.RequiredProperties = ["head", "base"];

/**
 * The title of the new pull request. Required unless `issue` is specified.
 * @member {String} title
 */
PullsCreateRequest.prototype['title'] = undefined;

/**
 * The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.
 * @member {String} head
 */
PullsCreateRequest.prototype['head'] = undefined;

/**
 * The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization.
 * @member {String} head_repo
 */
PullsCreateRequest.prototype['head_repo'] = undefined;

/**
 * The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
 * @member {String} base
 */
PullsCreateRequest.prototype['base'] = undefined;

/**
 * The contents of the pull request.
 * @member {String} body
 */
PullsCreateRequest.prototype['body'] = undefined;

/**
 * Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
 * @member {Boolean} maintainer_can_modify
 */
PullsCreateRequest.prototype['maintainer_can_modify'] = undefined;

/**
 * Indicates whether the pull request is a draft. See \"[Draft Pull Requests](https://docs.github.com/articles/about-pull-requests#draft-pull-requests)\" in the GitHub Help documentation to learn more.
 * @member {Boolean} draft
 */
PullsCreateRequest.prototype['draft'] = undefined;

/**
 * An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified.
 * @member {Number} issue
 */
PullsCreateRequest.prototype['issue'] = undefined;






export default PullsCreateRequest;

