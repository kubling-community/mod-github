/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlertInstance from './AlertInstance';
import User from './User';
import WebhookCodeScanningAlertClosedByUserAlertRule from './WebhookCodeScanningAlertClosedByUserAlertRule';
import WebhookCodeScanningAlertClosedByUserAlertTool from './WebhookCodeScanningAlertClosedByUserAlertTool';

/**
 * The WebhookCodeScanningAlertFixedAlert model module.
 * @module model/WebhookCodeScanningAlertFixedAlert
 * @version 1.1.4
 */
class WebhookCodeScanningAlertFixedAlert {
    /**
     * Constructs a new <code>WebhookCodeScanningAlertFixedAlert</code>.
     * The code scanning alert involved in the event.
     * @alias module:model/WebhookCodeScanningAlertFixedAlert
     * @param createdAt {Date} The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     * @param dismissedAt {Date} The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param dismissedBy {module:model/User} 
     * @param dismissedReason {module:model/WebhookCodeScanningAlertFixedAlert.DismissedReasonEnum} The reason for dismissing or closing the alert.
     * @param htmlUrl {String} The GitHub URL of the alert resource.
     * @param number {Number} The code scanning alert number.
     * @param rule {module:model/WebhookCodeScanningAlertClosedByUserAlertRule} 
     * @param state {module:model/WebhookCodeScanningAlertFixedAlert.StateEnum} State of a code scanning alert.
     * @param tool {module:model/WebhookCodeScanningAlertClosedByUserAlertTool} 
     * @param url {String} 
     */
    constructor(createdAt, dismissedAt, dismissedBy, dismissedReason, htmlUrl, number, rule, state, tool, url) { 
        
        WebhookCodeScanningAlertFixedAlert.initialize(this, createdAt, dismissedAt, dismissedBy, dismissedReason, htmlUrl, number, rule, state, tool, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, dismissedAt, dismissedBy, dismissedReason, htmlUrl, number, rule, state, tool, url) { 
        obj['created_at'] = createdAt;
        obj['dismissed_at'] = dismissedAt;
        obj['dismissed_by'] = dismissedBy;
        obj['dismissed_reason'] = dismissedReason;
        obj['html_url'] = htmlUrl;
        obj['number'] = number;
        obj['rule'] = rule;
        obj['state'] = state;
        obj['tool'] = tool;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>WebhookCodeScanningAlertFixedAlert</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebhookCodeScanningAlertFixedAlert} obj Optional instance to populate.
     * @return {module:model/WebhookCodeScanningAlertFixedAlert} The populated <code>WebhookCodeScanningAlertFixedAlert</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebhookCodeScanningAlertFixedAlert();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('dismissed_at')) {
                obj['dismissed_at'] = ApiClient.convertToType(data['dismissed_at'], 'Date');
            }
            if (data.hasOwnProperty('dismissed_by')) {
                obj['dismissed_by'] = User.constructFromObject(data['dismissed_by']);
            }
            if (data.hasOwnProperty('dismissed_reason')) {
                obj['dismissed_reason'] = ApiClient.convertToType(data['dismissed_reason'], 'String');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('instances_url')) {
                obj['instances_url'] = ApiClient.convertToType(data['instances_url'], 'String');
            }
            if (data.hasOwnProperty('most_recent_instance')) {
                obj['most_recent_instance'] = AlertInstance.constructFromObject(data['most_recent_instance']);
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('rule')) {
                obj['rule'] = WebhookCodeScanningAlertClosedByUserAlertRule.constructFromObject(data['rule']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('tool')) {
                obj['tool'] = WebhookCodeScanningAlertClosedByUserAlertTool.constructFromObject(data['tool']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebhookCodeScanningAlertFixedAlert</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebhookCodeScanningAlertFixedAlert</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WebhookCodeScanningAlertFixedAlert.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `dismissed_by`
        if (data['dismissed_by']) { // data not null
          User.validateJSON(data['dismissed_by']);
        }
        // ensure the json data is a string
        if (data['dismissed_reason'] && !(typeof data['dismissed_reason'] === 'string' || data['dismissed_reason'] instanceof String)) {
            throw new Error("Expected the field `dismissed_reason` to be a primitive type in the JSON string but got " + data['dismissed_reason']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['instances_url'] && !(typeof data['instances_url'] === 'string' || data['instances_url'] instanceof String)) {
            throw new Error("Expected the field `instances_url` to be a primitive type in the JSON string but got " + data['instances_url']);
        }
        // validate the optional field `most_recent_instance`
        if (data['most_recent_instance']) { // data not null
          AlertInstance.validateJSON(data['most_recent_instance']);
        }
        // validate the optional field `rule`
        if (data['rule']) { // data not null
          WebhookCodeScanningAlertClosedByUserAlertRule.validateJSON(data['rule']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `tool`
        if (data['tool']) { // data not null
          WebhookCodeScanningAlertClosedByUserAlertTool.validateJSON(data['tool']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

WebhookCodeScanningAlertFixedAlert.RequiredProperties = ["created_at", "dismissed_at", "dismissed_by", "dismissed_reason", "html_url", "number", "rule", "state", "tool", "url"];

/**
 * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
 * @member {Date} created_at
 */
WebhookCodeScanningAlertFixedAlert.prototype['created_at'] = undefined;

/**
 * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @member {Date} dismissed_at
 */
WebhookCodeScanningAlertFixedAlert.prototype['dismissed_at'] = undefined;

/**
 * @member {module:model/User} dismissed_by
 */
WebhookCodeScanningAlertFixedAlert.prototype['dismissed_by'] = undefined;

/**
 * The reason for dismissing or closing the alert.
 * @member {module:model/WebhookCodeScanningAlertFixedAlert.DismissedReasonEnum} dismissed_reason
 */
WebhookCodeScanningAlertFixedAlert.prototype['dismissed_reason'] = undefined;

/**
 * The GitHub URL of the alert resource.
 * @member {String} html_url
 */
WebhookCodeScanningAlertFixedAlert.prototype['html_url'] = undefined;

/**
 * @member {String} instances_url
 */
WebhookCodeScanningAlertFixedAlert.prototype['instances_url'] = undefined;

/**
 * @member {module:model/AlertInstance} most_recent_instance
 */
WebhookCodeScanningAlertFixedAlert.prototype['most_recent_instance'] = undefined;

/**
 * The code scanning alert number.
 * @member {Number} number
 */
WebhookCodeScanningAlertFixedAlert.prototype['number'] = undefined;

/**
 * @member {module:model/WebhookCodeScanningAlertClosedByUserAlertRule} rule
 */
WebhookCodeScanningAlertFixedAlert.prototype['rule'] = undefined;

/**
 * State of a code scanning alert.
 * @member {module:model/WebhookCodeScanningAlertFixedAlert.StateEnum} state
 */
WebhookCodeScanningAlertFixedAlert.prototype['state'] = undefined;

/**
 * @member {module:model/WebhookCodeScanningAlertClosedByUserAlertTool} tool
 */
WebhookCodeScanningAlertFixedAlert.prototype['tool'] = undefined;

/**
 * @member {String} url
 */
WebhookCodeScanningAlertFixedAlert.prototype['url'] = undefined;





/**
 * Allowed values for the <code>dismissed_reason</code> property.
 * @enum {String}
 * @readonly
 */
WebhookCodeScanningAlertFixedAlert['DismissedReasonEnum'] = {

    /**
     * value: "false positive"
     * @const
     */
    "false positive": "false positive",

    /**
     * value: "won't fix"
     * @const
     */
    "won&#39;t fix": "won't fix",

    /**
     * value: "used in tests"
     * @const
     */
    "used in tests": "used in tests",

    /**
     * value: "null"
     * @const
     */
    "null": "null"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
WebhookCodeScanningAlertFixedAlert['StateEnum'] = {

    /**
     * value: "fixed"
     * @const
     */
    "fixed": "fixed"
};



export default WebhookCodeScanningAlertFixedAlert;

