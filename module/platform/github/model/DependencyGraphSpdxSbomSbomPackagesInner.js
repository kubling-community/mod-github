/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DependencyGraphSpdxSbomSbomPackagesInnerExternalRefsInner from './DependencyGraphSpdxSbomSbomPackagesInnerExternalRefsInner';

/**
 * The DependencyGraphSpdxSbomSbomPackagesInner model module.
 * @module model/DependencyGraphSpdxSbomSbomPackagesInner
 * @version 1.1.4
 */
class DependencyGraphSpdxSbomSbomPackagesInner {
    /**
     * Constructs a new <code>DependencyGraphSpdxSbomSbomPackagesInner</code>.
     * @alias module:model/DependencyGraphSpdxSbomSbomPackagesInner
     */
    constructor() { 
        
        DependencyGraphSpdxSbomSbomPackagesInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DependencyGraphSpdxSbomSbomPackagesInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DependencyGraphSpdxSbomSbomPackagesInner} obj Optional instance to populate.
     * @return {module:model/DependencyGraphSpdxSbomSbomPackagesInner} The populated <code>DependencyGraphSpdxSbomSbomPackagesInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DependencyGraphSpdxSbomSbomPackagesInner();

            if (data.hasOwnProperty('SPDXID')) {
                obj['SPDXID'] = ApiClient.convertToType(data['SPDXID'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('versionInfo')) {
                obj['versionInfo'] = ApiClient.convertToType(data['versionInfo'], 'String');
            }
            if (data.hasOwnProperty('downloadLocation')) {
                obj['downloadLocation'] = ApiClient.convertToType(data['downloadLocation'], 'String');
            }
            if (data.hasOwnProperty('filesAnalyzed')) {
                obj['filesAnalyzed'] = ApiClient.convertToType(data['filesAnalyzed'], 'Boolean');
            }
            if (data.hasOwnProperty('licenseConcluded')) {
                obj['licenseConcluded'] = ApiClient.convertToType(data['licenseConcluded'], 'String');
            }
            if (data.hasOwnProperty('licenseDeclared')) {
                obj['licenseDeclared'] = ApiClient.convertToType(data['licenseDeclared'], 'String');
            }
            if (data.hasOwnProperty('supplier')) {
                obj['supplier'] = ApiClient.convertToType(data['supplier'], 'String');
            }
            if (data.hasOwnProperty('externalRefs')) {
                obj['externalRefs'] = ApiClient.convertToType(data['externalRefs'], [DependencyGraphSpdxSbomSbomPackagesInnerExternalRefsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DependencyGraphSpdxSbomSbomPackagesInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DependencyGraphSpdxSbomSbomPackagesInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['SPDXID'] && !(typeof data['SPDXID'] === 'string' || data['SPDXID'] instanceof String)) {
            throw new Error("Expected the field `SPDXID` to be a primitive type in the JSON string but got " + data['SPDXID']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['versionInfo'] && !(typeof data['versionInfo'] === 'string' || data['versionInfo'] instanceof String)) {
            throw new Error("Expected the field `versionInfo` to be a primitive type in the JSON string but got " + data['versionInfo']);
        }
        // ensure the json data is a string
        if (data['downloadLocation'] && !(typeof data['downloadLocation'] === 'string' || data['downloadLocation'] instanceof String)) {
            throw new Error("Expected the field `downloadLocation` to be a primitive type in the JSON string but got " + data['downloadLocation']);
        }
        // ensure the json data is a string
        if (data['licenseConcluded'] && !(typeof data['licenseConcluded'] === 'string' || data['licenseConcluded'] instanceof String)) {
            throw new Error("Expected the field `licenseConcluded` to be a primitive type in the JSON string but got " + data['licenseConcluded']);
        }
        // ensure the json data is a string
        if (data['licenseDeclared'] && !(typeof data['licenseDeclared'] === 'string' || data['licenseDeclared'] instanceof String)) {
            throw new Error("Expected the field `licenseDeclared` to be a primitive type in the JSON string but got " + data['licenseDeclared']);
        }
        // ensure the json data is a string
        if (data['supplier'] && !(typeof data['supplier'] === 'string' || data['supplier'] instanceof String)) {
            throw new Error("Expected the field `supplier` to be a primitive type in the JSON string but got " + data['supplier']);
        }
        if (data['externalRefs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['externalRefs'])) {
                throw new Error("Expected the field `externalRefs` to be an array in the JSON data but got " + data['externalRefs']);
            }
            // validate the optional field `externalRefs` (array)
            for (const item of data['externalRefs']) {
                DependencyGraphSpdxSbomSbomPackagesInnerExternalRefsInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A unique SPDX identifier for the package.
 * @member {String} SPDXID
 */
DependencyGraphSpdxSbomSbomPackagesInner.prototype['SPDXID'] = undefined;

/**
 * The name of the package.
 * @member {String} name
 */
DependencyGraphSpdxSbomSbomPackagesInner.prototype['name'] = undefined;

/**
 * The version of the package. If the package does not have an exact version specified, a version range is given.
 * @member {String} versionInfo
 */
DependencyGraphSpdxSbomSbomPackagesInner.prototype['versionInfo'] = undefined;

/**
 * The location where the package can be downloaded, or NOASSERTION if this has not been determined.
 * @member {String} downloadLocation
 */
DependencyGraphSpdxSbomSbomPackagesInner.prototype['downloadLocation'] = undefined;

/**
 * Whether the package's file content has been subjected to analysis during the creation of the SPDX document.
 * @member {Boolean} filesAnalyzed
 */
DependencyGraphSpdxSbomSbomPackagesInner.prototype['filesAnalyzed'] = undefined;

/**
 * The license of the package as determined while creating the SPDX document.
 * @member {String} licenseConcluded
 */
DependencyGraphSpdxSbomSbomPackagesInner.prototype['licenseConcluded'] = undefined;

/**
 * The license of the package as declared by its author, or NOASSERTION if this information was not available when the SPDX document was created.
 * @member {String} licenseDeclared
 */
DependencyGraphSpdxSbomSbomPackagesInner.prototype['licenseDeclared'] = undefined;

/**
 * The distribution source of this package, or NOASSERTION if this was not determined.
 * @member {String} supplier
 */
DependencyGraphSpdxSbomSbomPackagesInner.prototype['supplier'] = undefined;

/**
 * @member {Array.<module:model/DependencyGraphSpdxSbomSbomPackagesInnerExternalRefsInner>} externalRefs
 */
DependencyGraphSpdxSbomSbomPackagesInner.prototype['externalRefs'] = undefined;






export default DependencyGraphSpdxSbomSbomPackagesInner;

