/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SimpleClassroomOrganization model module.
 * @module model/SimpleClassroomOrganization
 * @version 1.1.4
 */
class SimpleClassroomOrganization {
    /**
     * Constructs a new <code>SimpleClassroomOrganization</code>.
     * A GitHub organization.
     * @alias module:model/SimpleClassroomOrganization
     * @param id {Number} 
     * @param login {String} 
     * @param nodeId {String} 
     * @param htmlUrl {String} 
     * @param name {String} 
     * @param avatarUrl {String} 
     */
    constructor(id, login, nodeId, htmlUrl, name, avatarUrl) { 
        
        SimpleClassroomOrganization.initialize(this, id, login, nodeId, htmlUrl, name, avatarUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, login, nodeId, htmlUrl, name, avatarUrl) { 
        obj['id'] = id;
        obj['login'] = login;
        obj['node_id'] = nodeId;
        obj['html_url'] = htmlUrl;
        obj['name'] = name;
        obj['avatar_url'] = avatarUrl;
    }

    /**
     * Constructs a <code>SimpleClassroomOrganization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimpleClassroomOrganization} obj Optional instance to populate.
     * @return {module:model/SimpleClassroomOrganization} The populated <code>SimpleClassroomOrganization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimpleClassroomOrganization();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('login')) {
                obj['login'] = ApiClient.convertToType(data['login'], 'String');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('avatar_url')) {
                obj['avatar_url'] = ApiClient.convertToType(data['avatar_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SimpleClassroomOrganization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SimpleClassroomOrganization</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SimpleClassroomOrganization.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['login'] && !(typeof data['login'] === 'string' || data['login'] instanceof String)) {
            throw new Error("Expected the field `login` to be a primitive type in the JSON string but got " + data['login']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['avatar_url'] && !(typeof data['avatar_url'] === 'string' || data['avatar_url'] instanceof String)) {
            throw new Error("Expected the field `avatar_url` to be a primitive type in the JSON string but got " + data['avatar_url']);
        }

        return true;
    }


}

SimpleClassroomOrganization.RequiredProperties = ["id", "login", "node_id", "html_url", "name", "avatar_url"];

/**
 * @member {Number} id
 */
SimpleClassroomOrganization.prototype['id'] = undefined;

/**
 * @member {String} login
 */
SimpleClassroomOrganization.prototype['login'] = undefined;

/**
 * @member {String} node_id
 */
SimpleClassroomOrganization.prototype['node_id'] = undefined;

/**
 * @member {String} html_url
 */
SimpleClassroomOrganization.prototype['html_url'] = undefined;

/**
 * @member {String} name
 */
SimpleClassroomOrganization.prototype['name'] = undefined;

/**
 * @member {String} avatar_url
 */
SimpleClassroomOrganization.prototype['avatar_url'] = undefined;






export default SimpleClassroomOrganization;

