/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SimpleInstallation model module.
 * @module model/SimpleInstallation
 * @version 1.1.4
 */
class SimpleInstallation {
    /**
     * Constructs a new <code>SimpleInstallation</code>.
     * The GitHub App installation. Webhook payloads contain the &#x60;installation&#x60; property when the event is configured for and sent to a GitHub App. For more information, see \&quot;[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps).\&quot;
     * @alias module:model/SimpleInstallation
     * @param id {Number} The ID of the installation.
     * @param nodeId {String} The global node ID of the installation.
     */
    constructor(id, nodeId) { 
        
        SimpleInstallation.initialize(this, id, nodeId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, nodeId) { 
        obj['id'] = id;
        obj['node_id'] = nodeId;
    }

    /**
     * Constructs a <code>SimpleInstallation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimpleInstallation} obj Optional instance to populate.
     * @return {module:model/SimpleInstallation} The populated <code>SimpleInstallation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimpleInstallation();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SimpleInstallation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SimpleInstallation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SimpleInstallation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }

        return true;
    }


}

SimpleInstallation.RequiredProperties = ["id", "node_id"];

/**
 * The ID of the installation.
 * @member {Number} id
 */
SimpleInstallation.prototype['id'] = undefined;

/**
 * The global node ID of the installation.
 * @member {String} node_id
 */
SimpleInstallation.prototype['node_id'] = undefined;






export default SimpleInstallation;

