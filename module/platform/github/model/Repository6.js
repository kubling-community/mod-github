/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import License from './License';
import RepositoryCreatedAt from './RepositoryCreatedAt';
import RepositoryPermissions from './RepositoryPermissions';
import RepositoryPushedAt from './RepositoryPushedAt';
import User from './User';

/**
 * The Repository6 model module.
 * @module model/Repository6
 * @version 1.1.4
 */
class Repository6 {
    /**
     * Constructs a new <code>Repository6</code>.
     * A git repository
     * @alias module:model/Repository6
     * @param archiveUrl {String} 
     * @param archived {Boolean} Whether the repository is archived.
     * @param assigneesUrl {String} 
     * @param blobsUrl {String} 
     * @param branchesUrl {String} 
     * @param cloneUrl {String} 
     * @param collaboratorsUrl {String} 
     * @param commentsUrl {String} 
     * @param commitsUrl {String} 
     * @param compareUrl {String} 
     * @param contentsUrl {String} 
     * @param contributorsUrl {String} 
     * @param createdAt {module:model/RepositoryCreatedAt} 
     * @param defaultBranch {String} The default branch of the repository.
     * @param deploymentsUrl {String} 
     * @param description {String} 
     * @param downloadsUrl {String} 
     * @param eventsUrl {String} 
     * @param fork {Boolean} 
     * @param forks {Number} 
     * @param forksCount {Number} 
     * @param forksUrl {String} 
     * @param fullName {String} 
     * @param gitCommitsUrl {String} 
     * @param gitRefsUrl {String} 
     * @param gitTagsUrl {String} 
     * @param gitUrl {String} 
     * @param hasDownloads {Boolean} Whether downloads are enabled.
     * @param hasIssues {Boolean} Whether issues are enabled.
     * @param hasPages {Boolean} 
     * @param hasProjects {Boolean} Whether projects are enabled.
     * @param hasWiki {Boolean} Whether the wiki is enabled.
     * @param homepage {String} 
     * @param hooksUrl {String} 
     * @param htmlUrl {String} 
     * @param id {Number} Unique identifier of the repository
     * @param issueCommentUrl {String} 
     * @param issueEventsUrl {String} 
     * @param issuesUrl {String} 
     * @param keysUrl {String} 
     * @param labelsUrl {String} 
     * @param language {String} 
     * @param languagesUrl {String} 
     * @param license {module:model/License} 
     * @param mergesUrl {String} 
     * @param milestonesUrl {String} 
     * @param mirrorUrl {String} 
     * @param name {String} The name of the repository.
     * @param nodeId {String} 
     * @param notificationsUrl {String} 
     * @param openIssues {Number} 
     * @param openIssuesCount {Number} 
     * @param owner {module:model/User} 
     * @param _private {Boolean} Whether the repository is private or public.
     * @param pullsUrl {String} 
     * @param pushedAt {module:model/RepositoryPushedAt} 
     * @param releasesUrl {String} 
     * @param size {Number} 
     * @param sshUrl {String} 
     * @param stargazersCount {Number} 
     * @param stargazersUrl {String} 
     * @param statusesUrl {String} 
     * @param subscribersUrl {String} 
     * @param subscriptionUrl {String} 
     * @param svnUrl {String} 
     * @param tagsUrl {String} 
     * @param teamsUrl {String} 
     * @param topics {Array.<String>} 
     * @param treesUrl {String} 
     * @param updatedAt {Date} 
     * @param url {String} 
     * @param visibility {module:model/Repository6.VisibilityEnum} 
     * @param watchers {Number} 
     * @param watchersCount {Number} 
     */
    constructor(archiveUrl, archived, assigneesUrl, blobsUrl, branchesUrl, cloneUrl, collaboratorsUrl, commentsUrl, commitsUrl, compareUrl, contentsUrl, contributorsUrl, createdAt, defaultBranch, deploymentsUrl, description, downloadsUrl, eventsUrl, fork, forks, forksCount, forksUrl, fullName, gitCommitsUrl, gitRefsUrl, gitTagsUrl, gitUrl, hasDownloads, hasIssues, hasPages, hasProjects, hasWiki, homepage, hooksUrl, htmlUrl, id, issueCommentUrl, issueEventsUrl, issuesUrl, keysUrl, labelsUrl, language, languagesUrl, license, mergesUrl, milestonesUrl, mirrorUrl, name, nodeId, notificationsUrl, openIssues, openIssuesCount, owner, _private, pullsUrl, pushedAt, releasesUrl, size, sshUrl, stargazersCount, stargazersUrl, statusesUrl, subscribersUrl, subscriptionUrl, svnUrl, tagsUrl, teamsUrl, topics, treesUrl, updatedAt, url, visibility, watchers, watchersCount) { 
        
        Repository6.initialize(this, archiveUrl, archived, assigneesUrl, blobsUrl, branchesUrl, cloneUrl, collaboratorsUrl, commentsUrl, commitsUrl, compareUrl, contentsUrl, contributorsUrl, createdAt, defaultBranch, deploymentsUrl, description, downloadsUrl, eventsUrl, fork, forks, forksCount, forksUrl, fullName, gitCommitsUrl, gitRefsUrl, gitTagsUrl, gitUrl, hasDownloads, hasIssues, hasPages, hasProjects, hasWiki, homepage, hooksUrl, htmlUrl, id, issueCommentUrl, issueEventsUrl, issuesUrl, keysUrl, labelsUrl, language, languagesUrl, license, mergesUrl, milestonesUrl, mirrorUrl, name, nodeId, notificationsUrl, openIssues, openIssuesCount, owner, _private, pullsUrl, pushedAt, releasesUrl, size, sshUrl, stargazersCount, stargazersUrl, statusesUrl, subscribersUrl, subscriptionUrl, svnUrl, tagsUrl, teamsUrl, topics, treesUrl, updatedAt, url, visibility, watchers, watchersCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, archiveUrl, archived, assigneesUrl, blobsUrl, branchesUrl, cloneUrl, collaboratorsUrl, commentsUrl, commitsUrl, compareUrl, contentsUrl, contributorsUrl, createdAt, defaultBranch, deploymentsUrl, description, downloadsUrl, eventsUrl, fork, forks, forksCount, forksUrl, fullName, gitCommitsUrl, gitRefsUrl, gitTagsUrl, gitUrl, hasDownloads, hasIssues, hasPages, hasProjects, hasWiki, homepage, hooksUrl, htmlUrl, id, issueCommentUrl, issueEventsUrl, issuesUrl, keysUrl, labelsUrl, language, languagesUrl, license, mergesUrl, milestonesUrl, mirrorUrl, name, nodeId, notificationsUrl, openIssues, openIssuesCount, owner, _private, pullsUrl, pushedAt, releasesUrl, size, sshUrl, stargazersCount, stargazersUrl, statusesUrl, subscribersUrl, subscriptionUrl, svnUrl, tagsUrl, teamsUrl, topics, treesUrl, updatedAt, url, visibility, watchers, watchersCount) { 
        obj['archive_url'] = archiveUrl;
        obj['archived'] = archived || false;
        obj['assignees_url'] = assigneesUrl;
        obj['blobs_url'] = blobsUrl;
        obj['branches_url'] = branchesUrl;
        obj['clone_url'] = cloneUrl;
        obj['collaborators_url'] = collaboratorsUrl;
        obj['comments_url'] = commentsUrl;
        obj['commits_url'] = commitsUrl;
        obj['compare_url'] = compareUrl;
        obj['contents_url'] = contentsUrl;
        obj['contributors_url'] = contributorsUrl;
        obj['created_at'] = createdAt;
        obj['default_branch'] = defaultBranch;
        obj['deployments_url'] = deploymentsUrl;
        obj['description'] = description;
        obj['downloads_url'] = downloadsUrl;
        obj['events_url'] = eventsUrl;
        obj['fork'] = fork;
        obj['forks'] = forks;
        obj['forks_count'] = forksCount;
        obj['forks_url'] = forksUrl;
        obj['full_name'] = fullName;
        obj['git_commits_url'] = gitCommitsUrl;
        obj['git_refs_url'] = gitRefsUrl;
        obj['git_tags_url'] = gitTagsUrl;
        obj['git_url'] = gitUrl;
        obj['has_downloads'] = hasDownloads || true;
        obj['has_issues'] = hasIssues || true;
        obj['has_pages'] = hasPages;
        obj['has_projects'] = hasProjects || true;
        obj['has_wiki'] = hasWiki || true;
        obj['homepage'] = homepage;
        obj['hooks_url'] = hooksUrl;
        obj['html_url'] = htmlUrl;
        obj['id'] = id;
        obj['issue_comment_url'] = issueCommentUrl;
        obj['issue_events_url'] = issueEventsUrl;
        obj['issues_url'] = issuesUrl;
        obj['keys_url'] = keysUrl;
        obj['labels_url'] = labelsUrl;
        obj['language'] = language;
        obj['languages_url'] = languagesUrl;
        obj['license'] = license;
        obj['merges_url'] = mergesUrl;
        obj['milestones_url'] = milestonesUrl;
        obj['mirror_url'] = mirrorUrl;
        obj['name'] = name;
        obj['node_id'] = nodeId;
        obj['notifications_url'] = notificationsUrl;
        obj['open_issues'] = openIssues;
        obj['open_issues_count'] = openIssuesCount;
        obj['owner'] = owner;
        obj['private'] = _private;
        obj['pulls_url'] = pullsUrl;
        obj['pushed_at'] = pushedAt;
        obj['releases_url'] = releasesUrl;
        obj['size'] = size;
        obj['ssh_url'] = sshUrl;
        obj['stargazers_count'] = stargazersCount;
        obj['stargazers_url'] = stargazersUrl;
        obj['statuses_url'] = statusesUrl;
        obj['subscribers_url'] = subscribersUrl;
        obj['subscription_url'] = subscriptionUrl;
        obj['svn_url'] = svnUrl;
        obj['tags_url'] = tagsUrl;
        obj['teams_url'] = teamsUrl;
        obj['topics'] = topics;
        obj['trees_url'] = treesUrl;
        obj['updated_at'] = updatedAt;
        obj['url'] = url;
        obj['visibility'] = visibility;
        obj['watchers'] = watchers;
        obj['watchers_count'] = watchersCount;
    }

    /**
     * Constructs a <code>Repository6</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Repository6} obj Optional instance to populate.
     * @return {module:model/Repository6} The populated <code>Repository6</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Repository6();

            if (data.hasOwnProperty('allow_auto_merge')) {
                obj['allow_auto_merge'] = ApiClient.convertToType(data['allow_auto_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_forking')) {
                obj['allow_forking'] = ApiClient.convertToType(data['allow_forking'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_merge_commit')) {
                obj['allow_merge_commit'] = ApiClient.convertToType(data['allow_merge_commit'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_rebase_merge')) {
                obj['allow_rebase_merge'] = ApiClient.convertToType(data['allow_rebase_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_squash_merge')) {
                obj['allow_squash_merge'] = ApiClient.convertToType(data['allow_squash_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_update_branch')) {
                obj['allow_update_branch'] = ApiClient.convertToType(data['allow_update_branch'], 'Boolean');
            }
            if (data.hasOwnProperty('archive_url')) {
                obj['archive_url'] = ApiClient.convertToType(data['archive_url'], 'String');
            }
            if (data.hasOwnProperty('archived')) {
                obj['archived'] = ApiClient.convertToType(data['archived'], 'Boolean');
            }
            if (data.hasOwnProperty('assignees_url')) {
                obj['assignees_url'] = ApiClient.convertToType(data['assignees_url'], 'String');
            }
            if (data.hasOwnProperty('blobs_url')) {
                obj['blobs_url'] = ApiClient.convertToType(data['blobs_url'], 'String');
            }
            if (data.hasOwnProperty('branches_url')) {
                obj['branches_url'] = ApiClient.convertToType(data['branches_url'], 'String');
            }
            if (data.hasOwnProperty('clone_url')) {
                obj['clone_url'] = ApiClient.convertToType(data['clone_url'], 'String');
            }
            if (data.hasOwnProperty('collaborators_url')) {
                obj['collaborators_url'] = ApiClient.convertToType(data['collaborators_url'], 'String');
            }
            if (data.hasOwnProperty('comments_url')) {
                obj['comments_url'] = ApiClient.convertToType(data['comments_url'], 'String');
            }
            if (data.hasOwnProperty('commits_url')) {
                obj['commits_url'] = ApiClient.convertToType(data['commits_url'], 'String');
            }
            if (data.hasOwnProperty('compare_url')) {
                obj['compare_url'] = ApiClient.convertToType(data['compare_url'], 'String');
            }
            if (data.hasOwnProperty('contents_url')) {
                obj['contents_url'] = ApiClient.convertToType(data['contents_url'], 'String');
            }
            if (data.hasOwnProperty('contributors_url')) {
                obj['contributors_url'] = ApiClient.convertToType(data['contributors_url'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = RepositoryCreatedAt.constructFromObject(data['created_at']);
            }
            if (data.hasOwnProperty('default_branch')) {
                obj['default_branch'] = ApiClient.convertToType(data['default_branch'], 'String');
            }
            if (data.hasOwnProperty('delete_branch_on_merge')) {
                obj['delete_branch_on_merge'] = ApiClient.convertToType(data['delete_branch_on_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('deployments_url')) {
                obj['deployments_url'] = ApiClient.convertToType(data['deployments_url'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('downloads_url')) {
                obj['downloads_url'] = ApiClient.convertToType(data['downloads_url'], 'String');
            }
            if (data.hasOwnProperty('events_url')) {
                obj['events_url'] = ApiClient.convertToType(data['events_url'], 'String');
            }
            if (data.hasOwnProperty('fork')) {
                obj['fork'] = ApiClient.convertToType(data['fork'], 'Boolean');
            }
            if (data.hasOwnProperty('forks')) {
                obj['forks'] = ApiClient.convertToType(data['forks'], 'Number');
            }
            if (data.hasOwnProperty('forks_count')) {
                obj['forks_count'] = ApiClient.convertToType(data['forks_count'], 'Number');
            }
            if (data.hasOwnProperty('forks_url')) {
                obj['forks_url'] = ApiClient.convertToType(data['forks_url'], 'String');
            }
            if (data.hasOwnProperty('full_name')) {
                obj['full_name'] = ApiClient.convertToType(data['full_name'], 'String');
            }
            if (data.hasOwnProperty('git_commits_url')) {
                obj['git_commits_url'] = ApiClient.convertToType(data['git_commits_url'], 'String');
            }
            if (data.hasOwnProperty('git_refs_url')) {
                obj['git_refs_url'] = ApiClient.convertToType(data['git_refs_url'], 'String');
            }
            if (data.hasOwnProperty('git_tags_url')) {
                obj['git_tags_url'] = ApiClient.convertToType(data['git_tags_url'], 'String');
            }
            if (data.hasOwnProperty('git_url')) {
                obj['git_url'] = ApiClient.convertToType(data['git_url'], 'String');
            }
            if (data.hasOwnProperty('has_downloads')) {
                obj['has_downloads'] = ApiClient.convertToType(data['has_downloads'], 'Boolean');
            }
            if (data.hasOwnProperty('has_issues')) {
                obj['has_issues'] = ApiClient.convertToType(data['has_issues'], 'Boolean');
            }
            if (data.hasOwnProperty('has_pages')) {
                obj['has_pages'] = ApiClient.convertToType(data['has_pages'], 'Boolean');
            }
            if (data.hasOwnProperty('has_projects')) {
                obj['has_projects'] = ApiClient.convertToType(data['has_projects'], 'Boolean');
            }
            if (data.hasOwnProperty('has_wiki')) {
                obj['has_wiki'] = ApiClient.convertToType(data['has_wiki'], 'Boolean');
            }
            if (data.hasOwnProperty('has_discussions')) {
                obj['has_discussions'] = ApiClient.convertToType(data['has_discussions'], 'Boolean');
            }
            if (data.hasOwnProperty('homepage')) {
                obj['homepage'] = ApiClient.convertToType(data['homepage'], 'String');
            }
            if (data.hasOwnProperty('hooks_url')) {
                obj['hooks_url'] = ApiClient.convertToType(data['hooks_url'], 'String');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('is_template')) {
                obj['is_template'] = ApiClient.convertToType(data['is_template'], 'Boolean');
            }
            if (data.hasOwnProperty('issue_comment_url')) {
                obj['issue_comment_url'] = ApiClient.convertToType(data['issue_comment_url'], 'String');
            }
            if (data.hasOwnProperty('issue_events_url')) {
                obj['issue_events_url'] = ApiClient.convertToType(data['issue_events_url'], 'String');
            }
            if (data.hasOwnProperty('issues_url')) {
                obj['issues_url'] = ApiClient.convertToType(data['issues_url'], 'String');
            }
            if (data.hasOwnProperty('keys_url')) {
                obj['keys_url'] = ApiClient.convertToType(data['keys_url'], 'String');
            }
            if (data.hasOwnProperty('labels_url')) {
                obj['labels_url'] = ApiClient.convertToType(data['labels_url'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('languages_url')) {
                obj['languages_url'] = ApiClient.convertToType(data['languages_url'], 'String');
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = License.constructFromObject(data['license']);
            }
            if (data.hasOwnProperty('master_branch')) {
                obj['master_branch'] = ApiClient.convertToType(data['master_branch'], 'String');
            }
            if (data.hasOwnProperty('merge_commit_message')) {
                obj['merge_commit_message'] = ApiClient.convertToType(data['merge_commit_message'], 'String');
            }
            if (data.hasOwnProperty('merge_commit_title')) {
                obj['merge_commit_title'] = ApiClient.convertToType(data['merge_commit_title'], 'String');
            }
            if (data.hasOwnProperty('merges_url')) {
                obj['merges_url'] = ApiClient.convertToType(data['merges_url'], 'String');
            }
            if (data.hasOwnProperty('milestones_url')) {
                obj['milestones_url'] = ApiClient.convertToType(data['milestones_url'], 'String');
            }
            if (data.hasOwnProperty('mirror_url')) {
                obj['mirror_url'] = ApiClient.convertToType(data['mirror_url'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('notifications_url')) {
                obj['notifications_url'] = ApiClient.convertToType(data['notifications_url'], 'String');
            }
            if (data.hasOwnProperty('open_issues')) {
                obj['open_issues'] = ApiClient.convertToType(data['open_issues'], 'Number');
            }
            if (data.hasOwnProperty('open_issues_count')) {
                obj['open_issues_count'] = ApiClient.convertToType(data['open_issues_count'], 'Number');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = ApiClient.convertToType(data['organization'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = User.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = RepositoryPermissions.constructFromObject(data['permissions']);
            }
            if (data.hasOwnProperty('private')) {
                obj['private'] = ApiClient.convertToType(data['private'], 'Boolean');
            }
            if (data.hasOwnProperty('public')) {
                obj['public'] = ApiClient.convertToType(data['public'], 'Boolean');
            }
            if (data.hasOwnProperty('pulls_url')) {
                obj['pulls_url'] = ApiClient.convertToType(data['pulls_url'], 'String');
            }
            if (data.hasOwnProperty('pushed_at')) {
                obj['pushed_at'] = RepositoryPushedAt.constructFromObject(data['pushed_at']);
            }
            if (data.hasOwnProperty('releases_url')) {
                obj['releases_url'] = ApiClient.convertToType(data['releases_url'], 'String');
            }
            if (data.hasOwnProperty('role_name')) {
                obj['role_name'] = ApiClient.convertToType(data['role_name'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('squash_merge_commit_message')) {
                obj['squash_merge_commit_message'] = ApiClient.convertToType(data['squash_merge_commit_message'], 'String');
            }
            if (data.hasOwnProperty('squash_merge_commit_title')) {
                obj['squash_merge_commit_title'] = ApiClient.convertToType(data['squash_merge_commit_title'], 'String');
            }
            if (data.hasOwnProperty('ssh_url')) {
                obj['ssh_url'] = ApiClient.convertToType(data['ssh_url'], 'String');
            }
            if (data.hasOwnProperty('stargazers')) {
                obj['stargazers'] = ApiClient.convertToType(data['stargazers'], 'Number');
            }
            if (data.hasOwnProperty('stargazers_count')) {
                obj['stargazers_count'] = ApiClient.convertToType(data['stargazers_count'], 'Number');
            }
            if (data.hasOwnProperty('stargazers_url')) {
                obj['stargazers_url'] = ApiClient.convertToType(data['stargazers_url'], 'String');
            }
            if (data.hasOwnProperty('statuses_url')) {
                obj['statuses_url'] = ApiClient.convertToType(data['statuses_url'], 'String');
            }
            if (data.hasOwnProperty('subscribers_url')) {
                obj['subscribers_url'] = ApiClient.convertToType(data['subscribers_url'], 'String');
            }
            if (data.hasOwnProperty('subscription_url')) {
                obj['subscription_url'] = ApiClient.convertToType(data['subscription_url'], 'String');
            }
            if (data.hasOwnProperty('svn_url')) {
                obj['svn_url'] = ApiClient.convertToType(data['svn_url'], 'String');
            }
            if (data.hasOwnProperty('tags_url')) {
                obj['tags_url'] = ApiClient.convertToType(data['tags_url'], 'String');
            }
            if (data.hasOwnProperty('teams_url')) {
                obj['teams_url'] = ApiClient.convertToType(data['teams_url'], 'String');
            }
            if (data.hasOwnProperty('topics')) {
                obj['topics'] = ApiClient.convertToType(data['topics'], ['String']);
            }
            if (data.hasOwnProperty('trees_url')) {
                obj['trees_url'] = ApiClient.convertToType(data['trees_url'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('use_squash_pr_title_as_default')) {
                obj['use_squash_pr_title_as_default'] = ApiClient.convertToType(data['use_squash_pr_title_as_default'], 'Boolean');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
            if (data.hasOwnProperty('watchers')) {
                obj['watchers'] = ApiClient.convertToType(data['watchers'], 'Number');
            }
            if (data.hasOwnProperty('watchers_count')) {
                obj['watchers_count'] = ApiClient.convertToType(data['watchers_count'], 'Number');
            }
            if (data.hasOwnProperty('web_commit_signoff_required')) {
                obj['web_commit_signoff_required'] = ApiClient.convertToType(data['web_commit_signoff_required'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Repository6</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Repository6</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Repository6.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['archive_url'] && !(typeof data['archive_url'] === 'string' || data['archive_url'] instanceof String)) {
            throw new Error("Expected the field `archive_url` to be a primitive type in the JSON string but got " + data['archive_url']);
        }
        // ensure the json data is a string
        if (data['assignees_url'] && !(typeof data['assignees_url'] === 'string' || data['assignees_url'] instanceof String)) {
            throw new Error("Expected the field `assignees_url` to be a primitive type in the JSON string but got " + data['assignees_url']);
        }
        // ensure the json data is a string
        if (data['blobs_url'] && !(typeof data['blobs_url'] === 'string' || data['blobs_url'] instanceof String)) {
            throw new Error("Expected the field `blobs_url` to be a primitive type in the JSON string but got " + data['blobs_url']);
        }
        // ensure the json data is a string
        if (data['branches_url'] && !(typeof data['branches_url'] === 'string' || data['branches_url'] instanceof String)) {
            throw new Error("Expected the field `branches_url` to be a primitive type in the JSON string but got " + data['branches_url']);
        }
        // ensure the json data is a string
        if (data['clone_url'] && !(typeof data['clone_url'] === 'string' || data['clone_url'] instanceof String)) {
            throw new Error("Expected the field `clone_url` to be a primitive type in the JSON string but got " + data['clone_url']);
        }
        // ensure the json data is a string
        if (data['collaborators_url'] && !(typeof data['collaborators_url'] === 'string' || data['collaborators_url'] instanceof String)) {
            throw new Error("Expected the field `collaborators_url` to be a primitive type in the JSON string but got " + data['collaborators_url']);
        }
        // ensure the json data is a string
        if (data['comments_url'] && !(typeof data['comments_url'] === 'string' || data['comments_url'] instanceof String)) {
            throw new Error("Expected the field `comments_url` to be a primitive type in the JSON string but got " + data['comments_url']);
        }
        // ensure the json data is a string
        if (data['commits_url'] && !(typeof data['commits_url'] === 'string' || data['commits_url'] instanceof String)) {
            throw new Error("Expected the field `commits_url` to be a primitive type in the JSON string but got " + data['commits_url']);
        }
        // ensure the json data is a string
        if (data['compare_url'] && !(typeof data['compare_url'] === 'string' || data['compare_url'] instanceof String)) {
            throw new Error("Expected the field `compare_url` to be a primitive type in the JSON string but got " + data['compare_url']);
        }
        // ensure the json data is a string
        if (data['contents_url'] && !(typeof data['contents_url'] === 'string' || data['contents_url'] instanceof String)) {
            throw new Error("Expected the field `contents_url` to be a primitive type in the JSON string but got " + data['contents_url']);
        }
        // ensure the json data is a string
        if (data['contributors_url'] && !(typeof data['contributors_url'] === 'string' || data['contributors_url'] instanceof String)) {
            throw new Error("Expected the field `contributors_url` to be a primitive type in the JSON string but got " + data['contributors_url']);
        }
        // validate the optional field `created_at`
        if (data['created_at']) { // data not null
          RepositoryCreatedAt.validateJSON(data['created_at']);
        }
        // ensure the json data is a string
        if (data['default_branch'] && !(typeof data['default_branch'] === 'string' || data['default_branch'] instanceof String)) {
            throw new Error("Expected the field `default_branch` to be a primitive type in the JSON string but got " + data['default_branch']);
        }
        // ensure the json data is a string
        if (data['deployments_url'] && !(typeof data['deployments_url'] === 'string' || data['deployments_url'] instanceof String)) {
            throw new Error("Expected the field `deployments_url` to be a primitive type in the JSON string but got " + data['deployments_url']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['downloads_url'] && !(typeof data['downloads_url'] === 'string' || data['downloads_url'] instanceof String)) {
            throw new Error("Expected the field `downloads_url` to be a primitive type in the JSON string but got " + data['downloads_url']);
        }
        // ensure the json data is a string
        if (data['events_url'] && !(typeof data['events_url'] === 'string' || data['events_url'] instanceof String)) {
            throw new Error("Expected the field `events_url` to be a primitive type in the JSON string but got " + data['events_url']);
        }
        // ensure the json data is a string
        if (data['forks_url'] && !(typeof data['forks_url'] === 'string' || data['forks_url'] instanceof String)) {
            throw new Error("Expected the field `forks_url` to be a primitive type in the JSON string but got " + data['forks_url']);
        }
        // ensure the json data is a string
        if (data['full_name'] && !(typeof data['full_name'] === 'string' || data['full_name'] instanceof String)) {
            throw new Error("Expected the field `full_name` to be a primitive type in the JSON string but got " + data['full_name']);
        }
        // ensure the json data is a string
        if (data['git_commits_url'] && !(typeof data['git_commits_url'] === 'string' || data['git_commits_url'] instanceof String)) {
            throw new Error("Expected the field `git_commits_url` to be a primitive type in the JSON string but got " + data['git_commits_url']);
        }
        // ensure the json data is a string
        if (data['git_refs_url'] && !(typeof data['git_refs_url'] === 'string' || data['git_refs_url'] instanceof String)) {
            throw new Error("Expected the field `git_refs_url` to be a primitive type in the JSON string but got " + data['git_refs_url']);
        }
        // ensure the json data is a string
        if (data['git_tags_url'] && !(typeof data['git_tags_url'] === 'string' || data['git_tags_url'] instanceof String)) {
            throw new Error("Expected the field `git_tags_url` to be a primitive type in the JSON string but got " + data['git_tags_url']);
        }
        // ensure the json data is a string
        if (data['git_url'] && !(typeof data['git_url'] === 'string' || data['git_url'] instanceof String)) {
            throw new Error("Expected the field `git_url` to be a primitive type in the JSON string but got " + data['git_url']);
        }
        // ensure the json data is a string
        if (data['homepage'] && !(typeof data['homepage'] === 'string' || data['homepage'] instanceof String)) {
            throw new Error("Expected the field `homepage` to be a primitive type in the JSON string but got " + data['homepage']);
        }
        // ensure the json data is a string
        if (data['hooks_url'] && !(typeof data['hooks_url'] === 'string' || data['hooks_url'] instanceof String)) {
            throw new Error("Expected the field `hooks_url` to be a primitive type in the JSON string but got " + data['hooks_url']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['issue_comment_url'] && !(typeof data['issue_comment_url'] === 'string' || data['issue_comment_url'] instanceof String)) {
            throw new Error("Expected the field `issue_comment_url` to be a primitive type in the JSON string but got " + data['issue_comment_url']);
        }
        // ensure the json data is a string
        if (data['issue_events_url'] && !(typeof data['issue_events_url'] === 'string' || data['issue_events_url'] instanceof String)) {
            throw new Error("Expected the field `issue_events_url` to be a primitive type in the JSON string but got " + data['issue_events_url']);
        }
        // ensure the json data is a string
        if (data['issues_url'] && !(typeof data['issues_url'] === 'string' || data['issues_url'] instanceof String)) {
            throw new Error("Expected the field `issues_url` to be a primitive type in the JSON string but got " + data['issues_url']);
        }
        // ensure the json data is a string
        if (data['keys_url'] && !(typeof data['keys_url'] === 'string' || data['keys_url'] instanceof String)) {
            throw new Error("Expected the field `keys_url` to be a primitive type in the JSON string but got " + data['keys_url']);
        }
        // ensure the json data is a string
        if (data['labels_url'] && !(typeof data['labels_url'] === 'string' || data['labels_url'] instanceof String)) {
            throw new Error("Expected the field `labels_url` to be a primitive type in the JSON string but got " + data['labels_url']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['languages_url'] && !(typeof data['languages_url'] === 'string' || data['languages_url'] instanceof String)) {
            throw new Error("Expected the field `languages_url` to be a primitive type in the JSON string but got " + data['languages_url']);
        }
        // validate the optional field `license`
        if (data['license']) { // data not null
          License.validateJSON(data['license']);
        }
        // ensure the json data is a string
        if (data['master_branch'] && !(typeof data['master_branch'] === 'string' || data['master_branch'] instanceof String)) {
            throw new Error("Expected the field `master_branch` to be a primitive type in the JSON string but got " + data['master_branch']);
        }
        // ensure the json data is a string
        if (data['merge_commit_message'] && !(typeof data['merge_commit_message'] === 'string' || data['merge_commit_message'] instanceof String)) {
            throw new Error("Expected the field `merge_commit_message` to be a primitive type in the JSON string but got " + data['merge_commit_message']);
        }
        // ensure the json data is a string
        if (data['merge_commit_title'] && !(typeof data['merge_commit_title'] === 'string' || data['merge_commit_title'] instanceof String)) {
            throw new Error("Expected the field `merge_commit_title` to be a primitive type in the JSON string but got " + data['merge_commit_title']);
        }
        // ensure the json data is a string
        if (data['merges_url'] && !(typeof data['merges_url'] === 'string' || data['merges_url'] instanceof String)) {
            throw new Error("Expected the field `merges_url` to be a primitive type in the JSON string but got " + data['merges_url']);
        }
        // ensure the json data is a string
        if (data['milestones_url'] && !(typeof data['milestones_url'] === 'string' || data['milestones_url'] instanceof String)) {
            throw new Error("Expected the field `milestones_url` to be a primitive type in the JSON string but got " + data['milestones_url']);
        }
        // ensure the json data is a string
        if (data['mirror_url'] && !(typeof data['mirror_url'] === 'string' || data['mirror_url'] instanceof String)) {
            throw new Error("Expected the field `mirror_url` to be a primitive type in the JSON string but got " + data['mirror_url']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // ensure the json data is a string
        if (data['notifications_url'] && !(typeof data['notifications_url'] === 'string' || data['notifications_url'] instanceof String)) {
            throw new Error("Expected the field `notifications_url` to be a primitive type in the JSON string but got " + data['notifications_url']);
        }
        // ensure the json data is a string
        if (data['organization'] && !(typeof data['organization'] === 'string' || data['organization'] instanceof String)) {
            throw new Error("Expected the field `organization` to be a primitive type in the JSON string but got " + data['organization']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          User.validateJSON(data['owner']);
        }
        // validate the optional field `permissions`
        if (data['permissions']) { // data not null
          RepositoryPermissions.validateJSON(data['permissions']);
        }
        // ensure the json data is a string
        if (data['pulls_url'] && !(typeof data['pulls_url'] === 'string' || data['pulls_url'] instanceof String)) {
            throw new Error("Expected the field `pulls_url` to be a primitive type in the JSON string but got " + data['pulls_url']);
        }
        // validate the optional field `pushed_at`
        if (data['pushed_at']) { // data not null
          RepositoryPushedAt.validateJSON(data['pushed_at']);
        }
        // ensure the json data is a string
        if (data['releases_url'] && !(typeof data['releases_url'] === 'string' || data['releases_url'] instanceof String)) {
            throw new Error("Expected the field `releases_url` to be a primitive type in the JSON string but got " + data['releases_url']);
        }
        // ensure the json data is a string
        if (data['role_name'] && !(typeof data['role_name'] === 'string' || data['role_name'] instanceof String)) {
            throw new Error("Expected the field `role_name` to be a primitive type in the JSON string but got " + data['role_name']);
        }
        // ensure the json data is a string
        if (data['squash_merge_commit_message'] && !(typeof data['squash_merge_commit_message'] === 'string' || data['squash_merge_commit_message'] instanceof String)) {
            throw new Error("Expected the field `squash_merge_commit_message` to be a primitive type in the JSON string but got " + data['squash_merge_commit_message']);
        }
        // ensure the json data is a string
        if (data['squash_merge_commit_title'] && !(typeof data['squash_merge_commit_title'] === 'string' || data['squash_merge_commit_title'] instanceof String)) {
            throw new Error("Expected the field `squash_merge_commit_title` to be a primitive type in the JSON string but got " + data['squash_merge_commit_title']);
        }
        // ensure the json data is a string
        if (data['ssh_url'] && !(typeof data['ssh_url'] === 'string' || data['ssh_url'] instanceof String)) {
            throw new Error("Expected the field `ssh_url` to be a primitive type in the JSON string but got " + data['ssh_url']);
        }
        // ensure the json data is a string
        if (data['stargazers_url'] && !(typeof data['stargazers_url'] === 'string' || data['stargazers_url'] instanceof String)) {
            throw new Error("Expected the field `stargazers_url` to be a primitive type in the JSON string but got " + data['stargazers_url']);
        }
        // ensure the json data is a string
        if (data['statuses_url'] && !(typeof data['statuses_url'] === 'string' || data['statuses_url'] instanceof String)) {
            throw new Error("Expected the field `statuses_url` to be a primitive type in the JSON string but got " + data['statuses_url']);
        }
        // ensure the json data is a string
        if (data['subscribers_url'] && !(typeof data['subscribers_url'] === 'string' || data['subscribers_url'] instanceof String)) {
            throw new Error("Expected the field `subscribers_url` to be a primitive type in the JSON string but got " + data['subscribers_url']);
        }
        // ensure the json data is a string
        if (data['subscription_url'] && !(typeof data['subscription_url'] === 'string' || data['subscription_url'] instanceof String)) {
            throw new Error("Expected the field `subscription_url` to be a primitive type in the JSON string but got " + data['subscription_url']);
        }
        // ensure the json data is a string
        if (data['svn_url'] && !(typeof data['svn_url'] === 'string' || data['svn_url'] instanceof String)) {
            throw new Error("Expected the field `svn_url` to be a primitive type in the JSON string but got " + data['svn_url']);
        }
        // ensure the json data is a string
        if (data['tags_url'] && !(typeof data['tags_url'] === 'string' || data['tags_url'] instanceof String)) {
            throw new Error("Expected the field `tags_url` to be a primitive type in the JSON string but got " + data['tags_url']);
        }
        // ensure the json data is a string
        if (data['teams_url'] && !(typeof data['teams_url'] === 'string' || data['teams_url'] instanceof String)) {
            throw new Error("Expected the field `teams_url` to be a primitive type in the JSON string but got " + data['teams_url']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['topics'])) {
            throw new Error("Expected the field `topics` to be an array in the JSON data but got " + data['topics']);
        }
        // ensure the json data is a string
        if (data['trees_url'] && !(typeof data['trees_url'] === 'string' || data['trees_url'] instanceof String)) {
            throw new Error("Expected the field `trees_url` to be a primitive type in the JSON string but got " + data['trees_url']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }

        return true;
    }


}

Repository6.RequiredProperties = ["archive_url", "archived", "assignees_url", "blobs_url", "branches_url", "clone_url", "collaborators_url", "comments_url", "commits_url", "compare_url", "contents_url", "contributors_url", "created_at", "default_branch", "deployments_url", "description", "downloads_url", "events_url", "fork", "forks", "forks_count", "forks_url", "full_name", "git_commits_url", "git_refs_url", "git_tags_url", "git_url", "has_downloads", "has_issues", "has_pages", "has_projects", "has_wiki", "homepage", "hooks_url", "html_url", "id", "issue_comment_url", "issue_events_url", "issues_url", "keys_url", "labels_url", "language", "languages_url", "license", "merges_url", "milestones_url", "mirror_url", "name", "node_id", "notifications_url", "open_issues", "open_issues_count", "owner", "private", "pulls_url", "pushed_at", "releases_url", "size", "ssh_url", "stargazers_count", "stargazers_url", "statuses_url", "subscribers_url", "subscription_url", "svn_url", "tags_url", "teams_url", "topics", "trees_url", "updated_at", "url", "visibility", "watchers", "watchers_count"];

/**
 * Whether to allow auto-merge for pull requests.
 * @member {Boolean} allow_auto_merge
 * @default false
 */
Repository6.prototype['allow_auto_merge'] = false;

/**
 * Whether to allow private forks
 * @member {Boolean} allow_forking
 */
Repository6.prototype['allow_forking'] = undefined;

/**
 * Whether to allow merge commits for pull requests.
 * @member {Boolean} allow_merge_commit
 * @default true
 */
Repository6.prototype['allow_merge_commit'] = true;

/**
 * Whether to allow rebase merges for pull requests.
 * @member {Boolean} allow_rebase_merge
 * @default true
 */
Repository6.prototype['allow_rebase_merge'] = true;

/**
 * Whether to allow squash merges for pull requests.
 * @member {Boolean} allow_squash_merge
 * @default true
 */
Repository6.prototype['allow_squash_merge'] = true;

/**
 * @member {Boolean} allow_update_branch
 */
Repository6.prototype['allow_update_branch'] = undefined;

/**
 * @member {String} archive_url
 */
Repository6.prototype['archive_url'] = undefined;

/**
 * Whether the repository is archived.
 * @member {Boolean} archived
 * @default false
 */
Repository6.prototype['archived'] = false;

/**
 * @member {String} assignees_url
 */
Repository6.prototype['assignees_url'] = undefined;

/**
 * @member {String} blobs_url
 */
Repository6.prototype['blobs_url'] = undefined;

/**
 * @member {String} branches_url
 */
Repository6.prototype['branches_url'] = undefined;

/**
 * @member {String} clone_url
 */
Repository6.prototype['clone_url'] = undefined;

/**
 * @member {String} collaborators_url
 */
Repository6.prototype['collaborators_url'] = undefined;

/**
 * @member {String} comments_url
 */
Repository6.prototype['comments_url'] = undefined;

/**
 * @member {String} commits_url
 */
Repository6.prototype['commits_url'] = undefined;

/**
 * @member {String} compare_url
 */
Repository6.prototype['compare_url'] = undefined;

/**
 * @member {String} contents_url
 */
Repository6.prototype['contents_url'] = undefined;

/**
 * @member {String} contributors_url
 */
Repository6.prototype['contributors_url'] = undefined;

/**
 * @member {module:model/RepositoryCreatedAt} created_at
 */
Repository6.prototype['created_at'] = undefined;

/**
 * The default branch of the repository.
 * @member {String} default_branch
 */
Repository6.prototype['default_branch'] = undefined;

/**
 * Whether to delete head branches when pull requests are merged
 * @member {Boolean} delete_branch_on_merge
 * @default false
 */
Repository6.prototype['delete_branch_on_merge'] = false;

/**
 * @member {String} deployments_url
 */
Repository6.prototype['deployments_url'] = undefined;

/**
 * @member {String} description
 */
Repository6.prototype['description'] = undefined;

/**
 * Returns whether or not this repository is disabled.
 * @member {Boolean} disabled
 */
Repository6.prototype['disabled'] = undefined;

/**
 * @member {String} downloads_url
 */
Repository6.prototype['downloads_url'] = undefined;

/**
 * @member {String} events_url
 */
Repository6.prototype['events_url'] = undefined;

/**
 * @member {Boolean} fork
 */
Repository6.prototype['fork'] = undefined;

/**
 * @member {Number} forks
 */
Repository6.prototype['forks'] = undefined;

/**
 * @member {Number} forks_count
 */
Repository6.prototype['forks_count'] = undefined;

/**
 * @member {String} forks_url
 */
Repository6.prototype['forks_url'] = undefined;

/**
 * @member {String} full_name
 */
Repository6.prototype['full_name'] = undefined;

/**
 * @member {String} git_commits_url
 */
Repository6.prototype['git_commits_url'] = undefined;

/**
 * @member {String} git_refs_url
 */
Repository6.prototype['git_refs_url'] = undefined;

/**
 * @member {String} git_tags_url
 */
Repository6.prototype['git_tags_url'] = undefined;

/**
 * @member {String} git_url
 */
Repository6.prototype['git_url'] = undefined;

/**
 * Whether downloads are enabled.
 * @member {Boolean} has_downloads
 * @default true
 */
Repository6.prototype['has_downloads'] = true;

/**
 * Whether issues are enabled.
 * @member {Boolean} has_issues
 * @default true
 */
Repository6.prototype['has_issues'] = true;

/**
 * @member {Boolean} has_pages
 */
Repository6.prototype['has_pages'] = undefined;

/**
 * Whether projects are enabled.
 * @member {Boolean} has_projects
 * @default true
 */
Repository6.prototype['has_projects'] = true;

/**
 * Whether the wiki is enabled.
 * @member {Boolean} has_wiki
 * @default true
 */
Repository6.prototype['has_wiki'] = true;

/**
 * Whether discussions are enabled.
 * @member {Boolean} has_discussions
 * @default false
 */
Repository6.prototype['has_discussions'] = false;

/**
 * @member {String} homepage
 */
Repository6.prototype['homepage'] = undefined;

/**
 * @member {String} hooks_url
 */
Repository6.prototype['hooks_url'] = undefined;

/**
 * @member {String} html_url
 */
Repository6.prototype['html_url'] = undefined;

/**
 * Unique identifier of the repository
 * @member {Number} id
 */
Repository6.prototype['id'] = undefined;

/**
 * @member {Boolean} is_template
 */
Repository6.prototype['is_template'] = undefined;

/**
 * @member {String} issue_comment_url
 */
Repository6.prototype['issue_comment_url'] = undefined;

/**
 * @member {String} issue_events_url
 */
Repository6.prototype['issue_events_url'] = undefined;

/**
 * @member {String} issues_url
 */
Repository6.prototype['issues_url'] = undefined;

/**
 * @member {String} keys_url
 */
Repository6.prototype['keys_url'] = undefined;

/**
 * @member {String} labels_url
 */
Repository6.prototype['labels_url'] = undefined;

/**
 * @member {String} language
 */
Repository6.prototype['language'] = undefined;

/**
 * @member {String} languages_url
 */
Repository6.prototype['languages_url'] = undefined;

/**
 * @member {module:model/License} license
 */
Repository6.prototype['license'] = undefined;

/**
 * @member {String} master_branch
 */
Repository6.prototype['master_branch'] = undefined;

/**
 * The default value for a merge commit message.  - `PR_TITLE` - default to the pull request's title. - `PR_BODY` - default to the pull request's body. - `BLANK` - default to a blank commit message.
 * @member {module:model/Repository6.MergeCommitMessageEnum} merge_commit_message
 */
Repository6.prototype['merge_commit_message'] = undefined;

/**
 * The default value for a merge commit title.  - `PR_TITLE` - default to the pull request's title. - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
 * @member {module:model/Repository6.MergeCommitTitleEnum} merge_commit_title
 */
Repository6.prototype['merge_commit_title'] = undefined;

/**
 * @member {String} merges_url
 */
Repository6.prototype['merges_url'] = undefined;

/**
 * @member {String} milestones_url
 */
Repository6.prototype['milestones_url'] = undefined;

/**
 * @member {String} mirror_url
 */
Repository6.prototype['mirror_url'] = undefined;

/**
 * The name of the repository.
 * @member {String} name
 */
Repository6.prototype['name'] = undefined;

/**
 * @member {String} node_id
 */
Repository6.prototype['node_id'] = undefined;

/**
 * @member {String} notifications_url
 */
Repository6.prototype['notifications_url'] = undefined;

/**
 * @member {Number} open_issues
 */
Repository6.prototype['open_issues'] = undefined;

/**
 * @member {Number} open_issues_count
 */
Repository6.prototype['open_issues_count'] = undefined;

/**
 * @member {String} organization
 */
Repository6.prototype['organization'] = undefined;

/**
 * @member {module:model/User} owner
 */
Repository6.prototype['owner'] = undefined;

/**
 * @member {module:model/RepositoryPermissions} permissions
 */
Repository6.prototype['permissions'] = undefined;

/**
 * Whether the repository is private or public.
 * @member {Boolean} private
 */
Repository6.prototype['private'] = undefined;

/**
 * @member {Boolean} public
 */
Repository6.prototype['public'] = undefined;

/**
 * @member {String} pulls_url
 */
Repository6.prototype['pulls_url'] = undefined;

/**
 * @member {module:model/RepositoryPushedAt} pushed_at
 */
Repository6.prototype['pushed_at'] = undefined;

/**
 * @member {String} releases_url
 */
Repository6.prototype['releases_url'] = undefined;

/**
 * @member {String} role_name
 */
Repository6.prototype['role_name'] = undefined;

/**
 * @member {Number} size
 */
Repository6.prototype['size'] = undefined;

/**
 * The default value for a squash merge commit message:  - `PR_BODY` - default to the pull request's body. - `COMMIT_MESSAGES` - default to the branch's commit messages. - `BLANK` - default to a blank commit message.
 * @member {module:model/Repository6.SquashMergeCommitMessageEnum} squash_merge_commit_message
 */
Repository6.prototype['squash_merge_commit_message'] = undefined;

/**
 * The default value for a squash merge commit title:  - `PR_TITLE` - default to the pull request's title. - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
 * @member {module:model/Repository6.SquashMergeCommitTitleEnum} squash_merge_commit_title
 */
Repository6.prototype['squash_merge_commit_title'] = undefined;

/**
 * @member {String} ssh_url
 */
Repository6.prototype['ssh_url'] = undefined;

/**
 * @member {Number} stargazers
 */
Repository6.prototype['stargazers'] = undefined;

/**
 * @member {Number} stargazers_count
 */
Repository6.prototype['stargazers_count'] = undefined;

/**
 * @member {String} stargazers_url
 */
Repository6.prototype['stargazers_url'] = undefined;

/**
 * @member {String} statuses_url
 */
Repository6.prototype['statuses_url'] = undefined;

/**
 * @member {String} subscribers_url
 */
Repository6.prototype['subscribers_url'] = undefined;

/**
 * @member {String} subscription_url
 */
Repository6.prototype['subscription_url'] = undefined;

/**
 * @member {String} svn_url
 */
Repository6.prototype['svn_url'] = undefined;

/**
 * @member {String} tags_url
 */
Repository6.prototype['tags_url'] = undefined;

/**
 * @member {String} teams_url
 */
Repository6.prototype['teams_url'] = undefined;

/**
 * @member {Array.<String>} topics
 */
Repository6.prototype['topics'] = undefined;

/**
 * @member {String} trees_url
 */
Repository6.prototype['trees_url'] = undefined;

/**
 * @member {Date} updated_at
 */
Repository6.prototype['updated_at'] = undefined;

/**
 * @member {String} url
 */
Repository6.prototype['url'] = undefined;

/**
 * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
 * @member {Boolean} use_squash_pr_title_as_default
 * @default false
 */
Repository6.prototype['use_squash_pr_title_as_default'] = false;

/**
 * @member {module:model/Repository6.VisibilityEnum} visibility
 */
Repository6.prototype['visibility'] = undefined;

/**
 * @member {Number} watchers
 */
Repository6.prototype['watchers'] = undefined;

/**
 * @member {Number} watchers_count
 */
Repository6.prototype['watchers_count'] = undefined;

/**
 * Whether to require contributors to sign off on web-based commits
 * @member {Boolean} web_commit_signoff_required
 */
Repository6.prototype['web_commit_signoff_required'] = undefined;





/**
 * Allowed values for the <code>merge_commit_message</code> property.
 * @enum {String}
 * @readonly
 */
Repository6['MergeCommitMessageEnum'] = {

    /**
     * value: "PR_BODY"
     * @const
     */
    "PR_BODY": "PR_BODY",

    /**
     * value: "PR_TITLE"
     * @const
     */
    "PR_TITLE": "PR_TITLE",

    /**
     * value: "BLANK"
     * @const
     */
    "BLANK": "BLANK"
};


/**
 * Allowed values for the <code>merge_commit_title</code> property.
 * @enum {String}
 * @readonly
 */
Repository6['MergeCommitTitleEnum'] = {

    /**
     * value: "PR_TITLE"
     * @const
     */
    "PR_TITLE": "PR_TITLE",

    /**
     * value: "MERGE_MESSAGE"
     * @const
     */
    "MERGE_MESSAGE": "MERGE_MESSAGE"
};


/**
 * Allowed values for the <code>squash_merge_commit_message</code> property.
 * @enum {String}
 * @readonly
 */
Repository6['SquashMergeCommitMessageEnum'] = {

    /**
     * value: "PR_BODY"
     * @const
     */
    "PR_BODY": "PR_BODY",

    /**
     * value: "COMMIT_MESSAGES"
     * @const
     */
    "COMMIT_MESSAGES": "COMMIT_MESSAGES",

    /**
     * value: "BLANK"
     * @const
     */
    "BLANK": "BLANK"
};


/**
 * Allowed values for the <code>squash_merge_commit_title</code> property.
 * @enum {String}
 * @readonly
 */
Repository6['SquashMergeCommitTitleEnum'] = {

    /**
     * value: "PR_TITLE"
     * @const
     */
    "PR_TITLE": "PR_TITLE",

    /**
     * value: "COMMIT_OR_PR_TITLE"
     * @const
     */
    "COMMIT_OR_PR_TITLE": "COMMIT_OR_PR_TITLE"
};


/**
 * Allowed values for the <code>visibility</code> property.
 * @enum {String}
 * @readonly
 */
Repository6['VisibilityEnum'] = {

    /**
     * value: "public"
     * @const
     */
    "public": "public",

    /**
     * value: "private"
     * @const
     */
    "private": "private",

    /**
     * value: "internal"
     * @const
     */
    "internal": "internal"
};



export default Repository6;

