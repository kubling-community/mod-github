/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CodespacesCreateOrUpdateSecretForAuthenticatedUserRequestSelectedRepositoryIdsInner from './CodespacesCreateOrUpdateSecretForAuthenticatedUserRequestSelectedRepositoryIdsInner';

/**
 * The CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest model module.
 * @module model/CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest
 * @version 1.1.4
 */
class CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest {
    /**
     * Constructs a new <code>CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest</code>.
     * @alias module:model/CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest
     * @param keyId {String} ID of the key you used to encrypt the secret.
     */
    constructor(keyId) { 
        
        CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest.initialize(this, keyId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, keyId) { 
        obj['key_id'] = keyId;
    }

    /**
     * Constructs a <code>CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest} obj Optional instance to populate.
     * @return {module:model/CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest} The populated <code>CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest();

            if (data.hasOwnProperty('encrypted_value')) {
                obj['encrypted_value'] = ApiClient.convertToType(data['encrypted_value'], 'String');
            }
            if (data.hasOwnProperty('key_id')) {
                obj['key_id'] = ApiClient.convertToType(data['key_id'], 'String');
            }
            if (data.hasOwnProperty('selected_repository_ids')) {
                obj['selected_repository_ids'] = ApiClient.convertToType(data['selected_repository_ids'], [CodespacesCreateOrUpdateSecretForAuthenticatedUserRequestSelectedRepositoryIdsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['encrypted_value'] && !(typeof data['encrypted_value'] === 'string' || data['encrypted_value'] instanceof String)) {
            throw new Error("Expected the field `encrypted_value` to be a primitive type in the JSON string but got " + data['encrypted_value']);
        }
        // ensure the json data is a string
        if (data['key_id'] && !(typeof data['key_id'] === 'string' || data['key_id'] instanceof String)) {
            throw new Error("Expected the field `key_id` to be a primitive type in the JSON string but got " + data['key_id']);
        }
        if (data['selected_repository_ids']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['selected_repository_ids'])) {
                throw new Error("Expected the field `selected_repository_ids` to be an array in the JSON data but got " + data['selected_repository_ids']);
            }
            // validate the optional field `selected_repository_ids` (array)
            for (const item of data['selected_repository_ids']) {
                CodespacesCreateOrUpdateSecretForAuthenticatedUserRequestSelectedRepositoryIdsInner.validateJSON(item);
            };
        }

        return true;
    }


}

CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest.RequiredProperties = ["key_id"];

/**
 * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/codespaces/secrets#get-public-key-for-the-authenticated-user) endpoint.
 * @member {String} encrypted_value
 */
CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest.prototype['encrypted_value'] = undefined;

/**
 * ID of the key you used to encrypt the secret.
 * @member {String} key_id
 */
CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest.prototype['key_id'] = undefined;

/**
 * An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints.
 * @member {Array.<module:model/CodespacesCreateOrUpdateSecretForAuthenticatedUserRequestSelectedRepositoryIdsInner>} selected_repository_ids
 */
CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest.prototype['selected_repository_ids'] = undefined;






export default CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest;

