/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeploymentWorkflowRunReferencedWorkflowsInner from './DeploymentWorkflowRunReferencedWorkflowsInner';
import RepositoryLite from './RepositoryLite';
import SimpleCommit from './SimpleCommit';
import User from './User';
import WorkflowRunPullRequestsInner from './WorkflowRunPullRequestsInner';

/**
 * The WorkflowRun model module.
 * @module model/WorkflowRun
 * @version 1.1.4
 */
class WorkflowRun {
    /**
     * Constructs a new <code>WorkflowRun</code>.
     * @alias module:model/WorkflowRun
     * @param actor {module:model/User} 
     * @param artifactsUrl {String} 
     * @param cancelUrl {String} 
     * @param checkSuiteId {Number} 
     * @param checkSuiteNodeId {String} 
     * @param checkSuiteUrl {String} 
     * @param conclusion {module:model/WorkflowRun.ConclusionEnum} 
     * @param createdAt {Date} 
     * @param event {String} 
     * @param headBranch {String} 
     * @param headCommit {module:model/SimpleCommit} 
     * @param headRepository {module:model/RepositoryLite} 
     * @param headSha {String} 
     * @param htmlUrl {String} 
     * @param id {Number} 
     * @param jobsUrl {String} 
     * @param logsUrl {String} 
     * @param name {String} 
     * @param nodeId {String} 
     * @param path {String} 
     * @param previousAttemptUrl {String} 
     * @param pullRequests {Array.<module:model/WorkflowRunPullRequestsInner>} 
     * @param repository {module:model/RepositoryLite} 
     * @param rerunUrl {String} 
     * @param runAttempt {Number} 
     * @param runNumber {Number} 
     * @param runStartedAt {Date} 
     * @param status {module:model/WorkflowRun.StatusEnum} 
     * @param triggeringActor {module:model/User} 
     * @param updatedAt {Date} 
     * @param url {String} 
     * @param workflowId {Number} 
     * @param workflowUrl {String} 
     */
    constructor(actor, artifactsUrl, cancelUrl, checkSuiteId, checkSuiteNodeId, checkSuiteUrl, conclusion, createdAt, event, headBranch, headCommit, headRepository, headSha, htmlUrl, id, jobsUrl, logsUrl, name, nodeId, path, previousAttemptUrl, pullRequests, repository, rerunUrl, runAttempt, runNumber, runStartedAt, status, triggeringActor, updatedAt, url, workflowId, workflowUrl) { 
        
        WorkflowRun.initialize(this, actor, artifactsUrl, cancelUrl, checkSuiteId, checkSuiteNodeId, checkSuiteUrl, conclusion, createdAt, event, headBranch, headCommit, headRepository, headSha, htmlUrl, id, jobsUrl, logsUrl, name, nodeId, path, previousAttemptUrl, pullRequests, repository, rerunUrl, runAttempt, runNumber, runStartedAt, status, triggeringActor, updatedAt, url, workflowId, workflowUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, actor, artifactsUrl, cancelUrl, checkSuiteId, checkSuiteNodeId, checkSuiteUrl, conclusion, createdAt, event, headBranch, headCommit, headRepository, headSha, htmlUrl, id, jobsUrl, logsUrl, name, nodeId, path, previousAttemptUrl, pullRequests, repository, rerunUrl, runAttempt, runNumber, runStartedAt, status, triggeringActor, updatedAt, url, workflowId, workflowUrl) { 
        obj['actor'] = actor;
        obj['artifacts_url'] = artifactsUrl;
        obj['cancel_url'] = cancelUrl;
        obj['check_suite_id'] = checkSuiteId;
        obj['check_suite_node_id'] = checkSuiteNodeId;
        obj['check_suite_url'] = checkSuiteUrl;
        obj['conclusion'] = conclusion;
        obj['created_at'] = createdAt;
        obj['event'] = event;
        obj['head_branch'] = headBranch;
        obj['head_commit'] = headCommit;
        obj['head_repository'] = headRepository;
        obj['head_sha'] = headSha;
        obj['html_url'] = htmlUrl;
        obj['id'] = id;
        obj['jobs_url'] = jobsUrl;
        obj['logs_url'] = logsUrl;
        obj['name'] = name;
        obj['node_id'] = nodeId;
        obj['path'] = path;
        obj['previous_attempt_url'] = previousAttemptUrl;
        obj['pull_requests'] = pullRequests;
        obj['repository'] = repository;
        obj['rerun_url'] = rerunUrl;
        obj['run_attempt'] = runAttempt;
        obj['run_number'] = runNumber;
        obj['run_started_at'] = runStartedAt;
        obj['status'] = status;
        obj['triggering_actor'] = triggeringActor;
        obj['updated_at'] = updatedAt;
        obj['url'] = url;
        obj['workflow_id'] = workflowId;
        obj['workflow_url'] = workflowUrl;
    }

    /**
     * Constructs a <code>WorkflowRun</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowRun} obj Optional instance to populate.
     * @return {module:model/WorkflowRun} The populated <code>WorkflowRun</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowRun();

            if (data.hasOwnProperty('actor')) {
                obj['actor'] = User.constructFromObject(data['actor']);
            }
            if (data.hasOwnProperty('artifacts_url')) {
                obj['artifacts_url'] = ApiClient.convertToType(data['artifacts_url'], 'String');
            }
            if (data.hasOwnProperty('cancel_url')) {
                obj['cancel_url'] = ApiClient.convertToType(data['cancel_url'], 'String');
            }
            if (data.hasOwnProperty('check_suite_id')) {
                obj['check_suite_id'] = ApiClient.convertToType(data['check_suite_id'], 'Number');
            }
            if (data.hasOwnProperty('check_suite_node_id')) {
                obj['check_suite_node_id'] = ApiClient.convertToType(data['check_suite_node_id'], 'String');
            }
            if (data.hasOwnProperty('check_suite_url')) {
                obj['check_suite_url'] = ApiClient.convertToType(data['check_suite_url'], 'String');
            }
            if (data.hasOwnProperty('conclusion')) {
                obj['conclusion'] = ApiClient.convertToType(data['conclusion'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('event')) {
                obj['event'] = ApiClient.convertToType(data['event'], 'String');
            }
            if (data.hasOwnProperty('head_branch')) {
                obj['head_branch'] = ApiClient.convertToType(data['head_branch'], 'String');
            }
            if (data.hasOwnProperty('head_commit')) {
                obj['head_commit'] = SimpleCommit.constructFromObject(data['head_commit']);
            }
            if (data.hasOwnProperty('head_repository')) {
                obj['head_repository'] = RepositoryLite.constructFromObject(data['head_repository']);
            }
            if (data.hasOwnProperty('head_sha')) {
                obj['head_sha'] = ApiClient.convertToType(data['head_sha'], 'String');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('jobs_url')) {
                obj['jobs_url'] = ApiClient.convertToType(data['jobs_url'], 'String');
            }
            if (data.hasOwnProperty('logs_url')) {
                obj['logs_url'] = ApiClient.convertToType(data['logs_url'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('previous_attempt_url')) {
                obj['previous_attempt_url'] = ApiClient.convertToType(data['previous_attempt_url'], 'String');
            }
            if (data.hasOwnProperty('pull_requests')) {
                obj['pull_requests'] = ApiClient.convertToType(data['pull_requests'], [WorkflowRunPullRequestsInner]);
            }
            if (data.hasOwnProperty('referenced_workflows')) {
                obj['referenced_workflows'] = ApiClient.convertToType(data['referenced_workflows'], [DeploymentWorkflowRunReferencedWorkflowsInner]);
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = RepositoryLite.constructFromObject(data['repository']);
            }
            if (data.hasOwnProperty('rerun_url')) {
                obj['rerun_url'] = ApiClient.convertToType(data['rerun_url'], 'String');
            }
            if (data.hasOwnProperty('run_attempt')) {
                obj['run_attempt'] = ApiClient.convertToType(data['run_attempt'], 'Number');
            }
            if (data.hasOwnProperty('run_number')) {
                obj['run_number'] = ApiClient.convertToType(data['run_number'], 'Number');
            }
            if (data.hasOwnProperty('run_started_at')) {
                obj['run_started_at'] = ApiClient.convertToType(data['run_started_at'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('triggering_actor')) {
                obj['triggering_actor'] = User.constructFromObject(data['triggering_actor']);
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('workflow_id')) {
                obj['workflow_id'] = ApiClient.convertToType(data['workflow_id'], 'Number');
            }
            if (data.hasOwnProperty('workflow_url')) {
                obj['workflow_url'] = ApiClient.convertToType(data['workflow_url'], 'String');
            }
            if (data.hasOwnProperty('display_title')) {
                obj['display_title'] = ApiClient.convertToType(data['display_title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowRun</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowRun</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WorkflowRun.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `actor`
        if (data['actor']) { // data not null
          User.validateJSON(data['actor']);
        }
        // ensure the json data is a string
        if (data['artifacts_url'] && !(typeof data['artifacts_url'] === 'string' || data['artifacts_url'] instanceof String)) {
            throw new Error("Expected the field `artifacts_url` to be a primitive type in the JSON string but got " + data['artifacts_url']);
        }
        // ensure the json data is a string
        if (data['cancel_url'] && !(typeof data['cancel_url'] === 'string' || data['cancel_url'] instanceof String)) {
            throw new Error("Expected the field `cancel_url` to be a primitive type in the JSON string but got " + data['cancel_url']);
        }
        // ensure the json data is a string
        if (data['check_suite_node_id'] && !(typeof data['check_suite_node_id'] === 'string' || data['check_suite_node_id'] instanceof String)) {
            throw new Error("Expected the field `check_suite_node_id` to be a primitive type in the JSON string but got " + data['check_suite_node_id']);
        }
        // ensure the json data is a string
        if (data['check_suite_url'] && !(typeof data['check_suite_url'] === 'string' || data['check_suite_url'] instanceof String)) {
            throw new Error("Expected the field `check_suite_url` to be a primitive type in the JSON string but got " + data['check_suite_url']);
        }
        // ensure the json data is a string
        if (data['conclusion'] && !(typeof data['conclusion'] === 'string' || data['conclusion'] instanceof String)) {
            throw new Error("Expected the field `conclusion` to be a primitive type in the JSON string but got " + data['conclusion']);
        }
        // ensure the json data is a string
        if (data['event'] && !(typeof data['event'] === 'string' || data['event'] instanceof String)) {
            throw new Error("Expected the field `event` to be a primitive type in the JSON string but got " + data['event']);
        }
        // ensure the json data is a string
        if (data['head_branch'] && !(typeof data['head_branch'] === 'string' || data['head_branch'] instanceof String)) {
            throw new Error("Expected the field `head_branch` to be a primitive type in the JSON string but got " + data['head_branch']);
        }
        // validate the optional field `head_commit`
        if (data['head_commit']) { // data not null
          SimpleCommit.validateJSON(data['head_commit']);
        }
        // validate the optional field `head_repository`
        if (data['head_repository']) { // data not null
          RepositoryLite.validateJSON(data['head_repository']);
        }
        // ensure the json data is a string
        if (data['head_sha'] && !(typeof data['head_sha'] === 'string' || data['head_sha'] instanceof String)) {
            throw new Error("Expected the field `head_sha` to be a primitive type in the JSON string but got " + data['head_sha']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['jobs_url'] && !(typeof data['jobs_url'] === 'string' || data['jobs_url'] instanceof String)) {
            throw new Error("Expected the field `jobs_url` to be a primitive type in the JSON string but got " + data['jobs_url']);
        }
        // ensure the json data is a string
        if (data['logs_url'] && !(typeof data['logs_url'] === 'string' || data['logs_url'] instanceof String)) {
            throw new Error("Expected the field `logs_url` to be a primitive type in the JSON string but got " + data['logs_url']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['previous_attempt_url'] && !(typeof data['previous_attempt_url'] === 'string' || data['previous_attempt_url'] instanceof String)) {
            throw new Error("Expected the field `previous_attempt_url` to be a primitive type in the JSON string but got " + data['previous_attempt_url']);
        }
        if (data['pull_requests']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pull_requests'])) {
                throw new Error("Expected the field `pull_requests` to be an array in the JSON data but got " + data['pull_requests']);
            }
            // validate the optional field `pull_requests` (array)
            for (const item of data['pull_requests']) {
                WorkflowRunPullRequestsInner.validateJSON(item);
            };
        }
        if (data['referenced_workflows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['referenced_workflows'])) {
                throw new Error("Expected the field `referenced_workflows` to be an array in the JSON data but got " + data['referenced_workflows']);
            }
            // validate the optional field `referenced_workflows` (array)
            for (const item of data['referenced_workflows']) {
                DeploymentWorkflowRunReferencedWorkflowsInner.validateJSON(item);
            };
        }
        // validate the optional field `repository`
        if (data['repository']) { // data not null
          RepositoryLite.validateJSON(data['repository']);
        }
        // ensure the json data is a string
        if (data['rerun_url'] && !(typeof data['rerun_url'] === 'string' || data['rerun_url'] instanceof String)) {
            throw new Error("Expected the field `rerun_url` to be a primitive type in the JSON string but got " + data['rerun_url']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `triggering_actor`
        if (data['triggering_actor']) { // data not null
          User.validateJSON(data['triggering_actor']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['workflow_url'] && !(typeof data['workflow_url'] === 'string' || data['workflow_url'] instanceof String)) {
            throw new Error("Expected the field `workflow_url` to be a primitive type in the JSON string but got " + data['workflow_url']);
        }
        // ensure the json data is a string
        if (data['display_title'] && !(typeof data['display_title'] === 'string' || data['display_title'] instanceof String)) {
            throw new Error("Expected the field `display_title` to be a primitive type in the JSON string but got " + data['display_title']);
        }

        return true;
    }


}

WorkflowRun.RequiredProperties = ["actor", "artifacts_url", "cancel_url", "check_suite_id", "check_suite_node_id", "check_suite_url", "conclusion", "created_at", "event", "head_branch", "head_commit", "head_repository", "head_sha", "html_url", "id", "jobs_url", "logs_url", "name", "node_id", "path", "previous_attempt_url", "pull_requests", "repository", "rerun_url", "run_attempt", "run_number", "run_started_at", "status", "triggering_actor", "updated_at", "url", "workflow_id", "workflow_url"];

/**
 * @member {module:model/User} actor
 */
WorkflowRun.prototype['actor'] = undefined;

/**
 * @member {String} artifacts_url
 */
WorkflowRun.prototype['artifacts_url'] = undefined;

/**
 * @member {String} cancel_url
 */
WorkflowRun.prototype['cancel_url'] = undefined;

/**
 * @member {Number} check_suite_id
 */
WorkflowRun.prototype['check_suite_id'] = undefined;

/**
 * @member {String} check_suite_node_id
 */
WorkflowRun.prototype['check_suite_node_id'] = undefined;

/**
 * @member {String} check_suite_url
 */
WorkflowRun.prototype['check_suite_url'] = undefined;

/**
 * @member {module:model/WorkflowRun.ConclusionEnum} conclusion
 */
WorkflowRun.prototype['conclusion'] = undefined;

/**
 * @member {Date} created_at
 */
WorkflowRun.prototype['created_at'] = undefined;

/**
 * @member {String} event
 */
WorkflowRun.prototype['event'] = undefined;

/**
 * @member {String} head_branch
 */
WorkflowRun.prototype['head_branch'] = undefined;

/**
 * @member {module:model/SimpleCommit} head_commit
 */
WorkflowRun.prototype['head_commit'] = undefined;

/**
 * @member {module:model/RepositoryLite} head_repository
 */
WorkflowRun.prototype['head_repository'] = undefined;

/**
 * @member {String} head_sha
 */
WorkflowRun.prototype['head_sha'] = undefined;

/**
 * @member {String} html_url
 */
WorkflowRun.prototype['html_url'] = undefined;

/**
 * @member {Number} id
 */
WorkflowRun.prototype['id'] = undefined;

/**
 * @member {String} jobs_url
 */
WorkflowRun.prototype['jobs_url'] = undefined;

/**
 * @member {String} logs_url
 */
WorkflowRun.prototype['logs_url'] = undefined;

/**
 * @member {String} name
 */
WorkflowRun.prototype['name'] = undefined;

/**
 * @member {String} node_id
 */
WorkflowRun.prototype['node_id'] = undefined;

/**
 * @member {String} path
 */
WorkflowRun.prototype['path'] = undefined;

/**
 * @member {String} previous_attempt_url
 */
WorkflowRun.prototype['previous_attempt_url'] = undefined;

/**
 * @member {Array.<module:model/WorkflowRunPullRequestsInner>} pull_requests
 */
WorkflowRun.prototype['pull_requests'] = undefined;

/**
 * @member {Array.<module:model/DeploymentWorkflowRunReferencedWorkflowsInner>} referenced_workflows
 */
WorkflowRun.prototype['referenced_workflows'] = undefined;

/**
 * @member {module:model/RepositoryLite} repository
 */
WorkflowRun.prototype['repository'] = undefined;

/**
 * @member {String} rerun_url
 */
WorkflowRun.prototype['rerun_url'] = undefined;

/**
 * @member {Number} run_attempt
 */
WorkflowRun.prototype['run_attempt'] = undefined;

/**
 * @member {Number} run_number
 */
WorkflowRun.prototype['run_number'] = undefined;

/**
 * @member {Date} run_started_at
 */
WorkflowRun.prototype['run_started_at'] = undefined;

/**
 * @member {module:model/WorkflowRun.StatusEnum} status
 */
WorkflowRun.prototype['status'] = undefined;

/**
 * @member {module:model/User} triggering_actor
 */
WorkflowRun.prototype['triggering_actor'] = undefined;

/**
 * @member {Date} updated_at
 */
WorkflowRun.prototype['updated_at'] = undefined;

/**
 * @member {String} url
 */
WorkflowRun.prototype['url'] = undefined;

/**
 * @member {Number} workflow_id
 */
WorkflowRun.prototype['workflow_id'] = undefined;

/**
 * @member {String} workflow_url
 */
WorkflowRun.prototype['workflow_url'] = undefined;

/**
 * The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow.
 * @member {String} display_title
 */
WorkflowRun.prototype['display_title'] = undefined;





/**
 * Allowed values for the <code>conclusion</code> property.
 * @enum {String}
 * @readonly
 */
WorkflowRun['ConclusionEnum'] = {

    /**
     * value: "action_required"
     * @const
     */
    "action_required": "action_required",

    /**
     * value: "cancelled"
     * @const
     */
    "cancelled": "cancelled",

    /**
     * value: "failure"
     * @const
     */
    "failure": "failure",

    /**
     * value: "neutral"
     * @const
     */
    "neutral": "neutral",

    /**
     * value: "skipped"
     * @const
     */
    "skipped": "skipped",

    /**
     * value: "stale"
     * @const
     */
    "stale": "stale",

    /**
     * value: "success"
     * @const
     */
    "success": "success",

    /**
     * value: "timed_out"
     * @const
     */
    "timed_out": "timed_out"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
WorkflowRun['StatusEnum'] = {

    /**
     * value: "requested"
     * @const
     */
    "requested": "requested",

    /**
     * value: "in_progress"
     * @const
     */
    "in_progress": "in_progress",

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed",

    /**
     * value: "queued"
     * @const
     */
    "queued": "queued",

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "waiting"
     * @const
     */
    "waiting": "waiting"
};



export default WorkflowRun;

