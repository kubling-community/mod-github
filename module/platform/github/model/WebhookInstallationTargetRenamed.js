/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnterpriseWebhooks from './EnterpriseWebhooks';
import OrganizationSimpleWebhooks from './OrganizationSimpleWebhooks';
import RepositoryWebhooks from './RepositoryWebhooks';
import SimpleInstallation from './SimpleInstallation';
import SimpleUserWebhooks from './SimpleUserWebhooks';
import WebhookInstallationTargetRenamedAccount from './WebhookInstallationTargetRenamedAccount';
import WebhookInstallationTargetRenamedChanges from './WebhookInstallationTargetRenamedChanges';

/**
 * The WebhookInstallationTargetRenamed model module.
 * @module model/WebhookInstallationTargetRenamed
 * @version 1.1.4
 */
class WebhookInstallationTargetRenamed {
    /**
     * Constructs a new <code>WebhookInstallationTargetRenamed</code>.
     * @alias module:model/WebhookInstallationTargetRenamed
     * @param account {module:model/WebhookInstallationTargetRenamedAccount} 
     * @param action {module:model/WebhookInstallationTargetRenamed.ActionEnum} 
     * @param changes {module:model/WebhookInstallationTargetRenamedChanges} 
     * @param installation {module:model/SimpleInstallation} 
     * @param targetType {String} 
     */
    constructor(account, action, changes, installation, targetType) { 
        
        WebhookInstallationTargetRenamed.initialize(this, account, action, changes, installation, targetType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, account, action, changes, installation, targetType) { 
        obj['account'] = account;
        obj['action'] = action;
        obj['changes'] = changes;
        obj['installation'] = installation;
        obj['target_type'] = targetType;
    }

    /**
     * Constructs a <code>WebhookInstallationTargetRenamed</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebhookInstallationTargetRenamed} obj Optional instance to populate.
     * @return {module:model/WebhookInstallationTargetRenamed} The populated <code>WebhookInstallationTargetRenamed</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebhookInstallationTargetRenamed();

            if (data.hasOwnProperty('account')) {
                obj['account'] = WebhookInstallationTargetRenamedAccount.constructFromObject(data['account']);
            }
            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('changes')) {
                obj['changes'] = WebhookInstallationTargetRenamedChanges.constructFromObject(data['changes']);
            }
            if (data.hasOwnProperty('enterprise')) {
                obj['enterprise'] = EnterpriseWebhooks.constructFromObject(data['enterprise']);
            }
            if (data.hasOwnProperty('installation')) {
                obj['installation'] = SimpleInstallation.constructFromObject(data['installation']);
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = OrganizationSimpleWebhooks.constructFromObject(data['organization']);
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = RepositoryWebhooks.constructFromObject(data['repository']);
            }
            if (data.hasOwnProperty('sender')) {
                obj['sender'] = SimpleUserWebhooks.constructFromObject(data['sender']);
            }
            if (data.hasOwnProperty('target_type')) {
                obj['target_type'] = ApiClient.convertToType(data['target_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebhookInstallationTargetRenamed</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebhookInstallationTargetRenamed</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WebhookInstallationTargetRenamed.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `account`
        if (data['account']) { // data not null
          WebhookInstallationTargetRenamedAccount.validateJSON(data['account']);
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // validate the optional field `changes`
        if (data['changes']) { // data not null
          WebhookInstallationTargetRenamedChanges.validateJSON(data['changes']);
        }
        // validate the optional field `enterprise`
        if (data['enterprise']) { // data not null
          EnterpriseWebhooks.validateJSON(data['enterprise']);
        }
        // validate the optional field `installation`
        if (data['installation']) { // data not null
          SimpleInstallation.validateJSON(data['installation']);
        }
        // validate the optional field `organization`
        if (data['organization']) { // data not null
          OrganizationSimpleWebhooks.validateJSON(data['organization']);
        }
        // validate the optional field `repository`
        if (data['repository']) { // data not null
          RepositoryWebhooks.validateJSON(data['repository']);
        }
        // validate the optional field `sender`
        if (data['sender']) { // data not null
          SimpleUserWebhooks.validateJSON(data['sender']);
        }
        // ensure the json data is a string
        if (data['target_type'] && !(typeof data['target_type'] === 'string' || data['target_type'] instanceof String)) {
            throw new Error("Expected the field `target_type` to be a primitive type in the JSON string but got " + data['target_type']);
        }

        return true;
    }


}

WebhookInstallationTargetRenamed.RequiredProperties = ["account", "action", "changes", "installation", "target_type"];

/**
 * @member {module:model/WebhookInstallationTargetRenamedAccount} account
 */
WebhookInstallationTargetRenamed.prototype['account'] = undefined;

/**
 * @member {module:model/WebhookInstallationTargetRenamed.ActionEnum} action
 */
WebhookInstallationTargetRenamed.prototype['action'] = undefined;

/**
 * @member {module:model/WebhookInstallationTargetRenamedChanges} changes
 */
WebhookInstallationTargetRenamed.prototype['changes'] = undefined;

/**
 * @member {module:model/EnterpriseWebhooks} enterprise
 */
WebhookInstallationTargetRenamed.prototype['enterprise'] = undefined;

/**
 * @member {module:model/SimpleInstallation} installation
 */
WebhookInstallationTargetRenamed.prototype['installation'] = undefined;

/**
 * @member {module:model/OrganizationSimpleWebhooks} organization
 */
WebhookInstallationTargetRenamed.prototype['organization'] = undefined;

/**
 * @member {module:model/RepositoryWebhooks} repository
 */
WebhookInstallationTargetRenamed.prototype['repository'] = undefined;

/**
 * @member {module:model/SimpleUserWebhooks} sender
 */
WebhookInstallationTargetRenamed.prototype['sender'] = undefined;

/**
 * @member {String} target_type
 */
WebhookInstallationTargetRenamed.prototype['target_type'] = undefined;





/**
 * Allowed values for the <code>action</code> property.
 * @enum {String}
 * @readonly
 */
WebhookInstallationTargetRenamed['ActionEnum'] = {

    /**
     * value: "renamed"
     * @const
     */
    "renamed": "renamed"
};



export default WebhookInstallationTargetRenamed;

