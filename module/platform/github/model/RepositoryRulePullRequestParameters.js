/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RepositoryRulePullRequestParameters model module.
 * @module model/RepositoryRulePullRequestParameters
 * @version 1.1.4
 */
class RepositoryRulePullRequestParameters {
    /**
     * Constructs a new <code>RepositoryRulePullRequestParameters</code>.
     * @alias module:model/RepositoryRulePullRequestParameters
     * @param dismissStaleReviewsOnPush {Boolean} New, reviewable commits pushed will dismiss previous pull request review approvals.
     * @param requireCodeOwnerReview {Boolean} Require an approving review in pull requests that modify files that have a designated code owner.
     * @param requireLastPushApproval {Boolean} Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
     * @param requiredApprovingReviewCount {Number} The number of approving reviews that are required before a pull request can be merged.
     * @param requiredReviewThreadResolution {Boolean} All conversations on code must be resolved before a pull request can be merged.
     */
    constructor(dismissStaleReviewsOnPush, requireCodeOwnerReview, requireLastPushApproval, requiredApprovingReviewCount, requiredReviewThreadResolution) { 
        
        RepositoryRulePullRequestParameters.initialize(this, dismissStaleReviewsOnPush, requireCodeOwnerReview, requireLastPushApproval, requiredApprovingReviewCount, requiredReviewThreadResolution);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dismissStaleReviewsOnPush, requireCodeOwnerReview, requireLastPushApproval, requiredApprovingReviewCount, requiredReviewThreadResolution) { 
        obj['dismiss_stale_reviews_on_push'] = dismissStaleReviewsOnPush;
        obj['require_code_owner_review'] = requireCodeOwnerReview;
        obj['require_last_push_approval'] = requireLastPushApproval;
        obj['required_approving_review_count'] = requiredApprovingReviewCount;
        obj['required_review_thread_resolution'] = requiredReviewThreadResolution;
    }

    /**
     * Constructs a <code>RepositoryRulePullRequestParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepositoryRulePullRequestParameters} obj Optional instance to populate.
     * @return {module:model/RepositoryRulePullRequestParameters} The populated <code>RepositoryRulePullRequestParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepositoryRulePullRequestParameters();

            if (data.hasOwnProperty('dismiss_stale_reviews_on_push')) {
                obj['dismiss_stale_reviews_on_push'] = ApiClient.convertToType(data['dismiss_stale_reviews_on_push'], 'Boolean');
            }
            if (data.hasOwnProperty('require_code_owner_review')) {
                obj['require_code_owner_review'] = ApiClient.convertToType(data['require_code_owner_review'], 'Boolean');
            }
            if (data.hasOwnProperty('require_last_push_approval')) {
                obj['require_last_push_approval'] = ApiClient.convertToType(data['require_last_push_approval'], 'Boolean');
            }
            if (data.hasOwnProperty('required_approving_review_count')) {
                obj['required_approving_review_count'] = ApiClient.convertToType(data['required_approving_review_count'], 'Number');
            }
            if (data.hasOwnProperty('required_review_thread_resolution')) {
                obj['required_review_thread_resolution'] = ApiClient.convertToType(data['required_review_thread_resolution'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepositoryRulePullRequestParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepositoryRulePullRequestParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RepositoryRulePullRequestParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

RepositoryRulePullRequestParameters.RequiredProperties = ["dismiss_stale_reviews_on_push", "require_code_owner_review", "require_last_push_approval", "required_approving_review_count", "required_review_thread_resolution"];

/**
 * New, reviewable commits pushed will dismiss previous pull request review approvals.
 * @member {Boolean} dismiss_stale_reviews_on_push
 */
RepositoryRulePullRequestParameters.prototype['dismiss_stale_reviews_on_push'] = undefined;

/**
 * Require an approving review in pull requests that modify files that have a designated code owner.
 * @member {Boolean} require_code_owner_review
 */
RepositoryRulePullRequestParameters.prototype['require_code_owner_review'] = undefined;

/**
 * Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
 * @member {Boolean} require_last_push_approval
 */
RepositoryRulePullRequestParameters.prototype['require_last_push_approval'] = undefined;

/**
 * The number of approving reviews that are required before a pull request can be merged.
 * @member {Number} required_approving_review_count
 */
RepositoryRulePullRequestParameters.prototype['required_approving_review_count'] = undefined;

/**
 * All conversations on code must be resolved before a pull request can be merged.
 * @member {Boolean} required_review_thread_resolution
 */
RepositoryRulePullRequestParameters.prototype['required_review_thread_resolution'] = undefined;






export default RepositoryRulePullRequestParameters;

