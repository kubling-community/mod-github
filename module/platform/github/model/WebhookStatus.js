/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnterpriseWebhooks from './EnterpriseWebhooks';
import OrganizationSimpleWebhooks from './OrganizationSimpleWebhooks';
import RepositoryWebhooks from './RepositoryWebhooks';
import SimpleInstallation from './SimpleInstallation';
import SimpleUserWebhooks from './SimpleUserWebhooks';
import WebhookStatusBranchesInner from './WebhookStatusBranchesInner';
import WebhookStatusCommit from './WebhookStatusCommit';

/**
 * The WebhookStatus model module.
 * @module model/WebhookStatus
 * @version 1.1.4
 */
class WebhookStatus {
    /**
     * Constructs a new <code>WebhookStatus</code>.
     * @alias module:model/WebhookStatus
     * @param branches {Array.<module:model/WebhookStatusBranchesInner>} An array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.
     * @param commit {module:model/WebhookStatusCommit} 
     * @param context {String} 
     * @param createdAt {String} 
     * @param description {String} The optional human-readable description added to the status.
     * @param id {Number} The unique identifier of the status.
     * @param name {String} 
     * @param repository {module:model/RepositoryWebhooks} 
     * @param sender {module:model/SimpleUserWebhooks} 
     * @param sha {String} The Commit SHA.
     * @param state {module:model/WebhookStatus.StateEnum} The new state. Can be `pending`, `success`, `failure`, or `error`.
     * @param targetUrl {String} The optional link added to the status.
     * @param updatedAt {String} 
     */
    constructor(branches, commit, context, createdAt, description, id, name, repository, sender, sha, state, targetUrl, updatedAt) { 
        
        WebhookStatus.initialize(this, branches, commit, context, createdAt, description, id, name, repository, sender, sha, state, targetUrl, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, branches, commit, context, createdAt, description, id, name, repository, sender, sha, state, targetUrl, updatedAt) { 
        obj['branches'] = branches;
        obj['commit'] = commit;
        obj['context'] = context;
        obj['created_at'] = createdAt;
        obj['description'] = description;
        obj['id'] = id;
        obj['name'] = name;
        obj['repository'] = repository;
        obj['sender'] = sender;
        obj['sha'] = sha;
        obj['state'] = state;
        obj['target_url'] = targetUrl;
        obj['updated_at'] = updatedAt;
    }

    /**
     * Constructs a <code>WebhookStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebhookStatus} obj Optional instance to populate.
     * @return {module:model/WebhookStatus} The populated <code>WebhookStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebhookStatus();

            if (data.hasOwnProperty('avatar_url')) {
                obj['avatar_url'] = ApiClient.convertToType(data['avatar_url'], 'String');
            }
            if (data.hasOwnProperty('branches')) {
                obj['branches'] = ApiClient.convertToType(data['branches'], [WebhookStatusBranchesInner]);
            }
            if (data.hasOwnProperty('commit')) {
                obj['commit'] = WebhookStatusCommit.constructFromObject(data['commit']);
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = ApiClient.convertToType(data['context'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enterprise')) {
                obj['enterprise'] = EnterpriseWebhooks.constructFromObject(data['enterprise']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('installation')) {
                obj['installation'] = SimpleInstallation.constructFromObject(data['installation']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = OrganizationSimpleWebhooks.constructFromObject(data['organization']);
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = RepositoryWebhooks.constructFromObject(data['repository']);
            }
            if (data.hasOwnProperty('sender')) {
                obj['sender'] = SimpleUserWebhooks.constructFromObject(data['sender']);
            }
            if (data.hasOwnProperty('sha')) {
                obj['sha'] = ApiClient.convertToType(data['sha'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('target_url')) {
                obj['target_url'] = ApiClient.convertToType(data['target_url'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebhookStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebhookStatus</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WebhookStatus.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['avatar_url'] && !(typeof data['avatar_url'] === 'string' || data['avatar_url'] instanceof String)) {
            throw new Error("Expected the field `avatar_url` to be a primitive type in the JSON string but got " + data['avatar_url']);
        }
        if (data['branches']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['branches'])) {
                throw new Error("Expected the field `branches` to be an array in the JSON data but got " + data['branches']);
            }
            // validate the optional field `branches` (array)
            for (const item of data['branches']) {
                WebhookStatusBranchesInner.validateJSON(item);
            };
        }
        // validate the optional field `commit`
        if (data['commit']) { // data not null
          WebhookStatusCommit.validateJSON(data['commit']);
        }
        // ensure the json data is a string
        if (data['context'] && !(typeof data['context'] === 'string' || data['context'] instanceof String)) {
            throw new Error("Expected the field `context` to be a primitive type in the JSON string but got " + data['context']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `enterprise`
        if (data['enterprise']) { // data not null
          EnterpriseWebhooks.validateJSON(data['enterprise']);
        }
        // validate the optional field `installation`
        if (data['installation']) { // data not null
          SimpleInstallation.validateJSON(data['installation']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `organization`
        if (data['organization']) { // data not null
          OrganizationSimpleWebhooks.validateJSON(data['organization']);
        }
        // validate the optional field `repository`
        if (data['repository']) { // data not null
          RepositoryWebhooks.validateJSON(data['repository']);
        }
        // validate the optional field `sender`
        if (data['sender']) { // data not null
          SimpleUserWebhooks.validateJSON(data['sender']);
        }
        // ensure the json data is a string
        if (data['sha'] && !(typeof data['sha'] === 'string' || data['sha'] instanceof String)) {
            throw new Error("Expected the field `sha` to be a primitive type in the JSON string but got " + data['sha']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['target_url'] && !(typeof data['target_url'] === 'string' || data['target_url'] instanceof String)) {
            throw new Error("Expected the field `target_url` to be a primitive type in the JSON string but got " + data['target_url']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}

WebhookStatus.RequiredProperties = ["branches", "commit", "context", "created_at", "description", "id", "name", "repository", "sender", "sha", "state", "target_url", "updated_at"];

/**
 * @member {String} avatar_url
 */
WebhookStatus.prototype['avatar_url'] = undefined;

/**
 * An array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.
 * @member {Array.<module:model/WebhookStatusBranchesInner>} branches
 */
WebhookStatus.prototype['branches'] = undefined;

/**
 * @member {module:model/WebhookStatusCommit} commit
 */
WebhookStatus.prototype['commit'] = undefined;

/**
 * @member {String} context
 */
WebhookStatus.prototype['context'] = undefined;

/**
 * @member {String} created_at
 */
WebhookStatus.prototype['created_at'] = undefined;

/**
 * The optional human-readable description added to the status.
 * @member {String} description
 */
WebhookStatus.prototype['description'] = undefined;

/**
 * @member {module:model/EnterpriseWebhooks} enterprise
 */
WebhookStatus.prototype['enterprise'] = undefined;

/**
 * The unique identifier of the status.
 * @member {Number} id
 */
WebhookStatus.prototype['id'] = undefined;

/**
 * @member {module:model/SimpleInstallation} installation
 */
WebhookStatus.prototype['installation'] = undefined;

/**
 * @member {String} name
 */
WebhookStatus.prototype['name'] = undefined;

/**
 * @member {module:model/OrganizationSimpleWebhooks} organization
 */
WebhookStatus.prototype['organization'] = undefined;

/**
 * @member {module:model/RepositoryWebhooks} repository
 */
WebhookStatus.prototype['repository'] = undefined;

/**
 * @member {module:model/SimpleUserWebhooks} sender
 */
WebhookStatus.prototype['sender'] = undefined;

/**
 * The Commit SHA.
 * @member {String} sha
 */
WebhookStatus.prototype['sha'] = undefined;

/**
 * The new state. Can be `pending`, `success`, `failure`, or `error`.
 * @member {module:model/WebhookStatus.StateEnum} state
 */
WebhookStatus.prototype['state'] = undefined;

/**
 * The optional link added to the status.
 * @member {String} target_url
 */
WebhookStatus.prototype['target_url'] = undefined;

/**
 * @member {String} updated_at
 */
WebhookStatus.prototype['updated_at'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
WebhookStatus['StateEnum'] = {

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "success"
     * @const
     */
    "success": "success",

    /**
     * value: "failure"
     * @const
     */
    "failure": "failure",

    /**
     * value: "error"
     * @const
     */
    "error": "error"
};



export default WebhookStatus;

