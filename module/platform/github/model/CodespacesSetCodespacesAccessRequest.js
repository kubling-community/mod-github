/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CodespacesSetCodespacesAccessRequest model module.
 * @module model/CodespacesSetCodespacesAccessRequest
 * @version 1.1.4
 */
class CodespacesSetCodespacesAccessRequest {
    /**
     * Constructs a new <code>CodespacesSetCodespacesAccessRequest</code>.
     * @alias module:model/CodespacesSetCodespacesAccessRequest
     * @param visibility {module:model/CodespacesSetCodespacesAccessRequest.VisibilityEnum} Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization.
     */
    constructor(visibility) { 
        
        CodespacesSetCodespacesAccessRequest.initialize(this, visibility);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, visibility) { 
        obj['visibility'] = visibility;
    }

    /**
     * Constructs a <code>CodespacesSetCodespacesAccessRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CodespacesSetCodespacesAccessRequest} obj Optional instance to populate.
     * @return {module:model/CodespacesSetCodespacesAccessRequest} The populated <code>CodespacesSetCodespacesAccessRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CodespacesSetCodespacesAccessRequest();

            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
            if (data.hasOwnProperty('selected_usernames')) {
                obj['selected_usernames'] = ApiClient.convertToType(data['selected_usernames'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CodespacesSetCodespacesAccessRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CodespacesSetCodespacesAccessRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CodespacesSetCodespacesAccessRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['selected_usernames'])) {
            throw new Error("Expected the field `selected_usernames` to be an array in the JSON data but got " + data['selected_usernames']);
        }

        return true;
    }


}

CodespacesSetCodespacesAccessRequest.RequiredProperties = ["visibility"];

/**
 * Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization.
 * @member {module:model/CodespacesSetCodespacesAccessRequest.VisibilityEnum} visibility
 */
CodespacesSetCodespacesAccessRequest.prototype['visibility'] = undefined;

/**
 * The usernames of the organization members who should have access to codespaces in the organization. Required when `visibility` is `selected_members`. The provided list of usernames will replace any existing value.
 * @member {Array.<String>} selected_usernames
 */
CodespacesSetCodespacesAccessRequest.prototype['selected_usernames'] = undefined;





/**
 * Allowed values for the <code>visibility</code> property.
 * @enum {String}
 * @readonly
 */
CodespacesSetCodespacesAccessRequest['VisibilityEnum'] = {

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled",

    /**
     * value: "selected_members"
     * @const
     */
    "selected_members": "selected_members",

    /**
     * value: "all_members"
     * @const
     */
    "all_members": "all_members",

    /**
     * value: "all_members_and_outside_collaborators"
     * @const
     */
    "all_members_and_outside_collaborators": "all_members_and_outside_collaborators"
};



export default CodespacesSetCodespacesAccessRequest;

