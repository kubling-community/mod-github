/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FileExtensionRestriction from './FileExtensionRestriction';
import FilePathRestriction from './FilePathRestriction';
import MaxFilePathLength from './MaxFilePathLength';
import MaxFileSize from './MaxFileSize';
import RepositoryRuleBranchNamePattern from './RepositoryRuleBranchNamePattern';
import RepositoryRuleCodeScanning from './RepositoryRuleCodeScanning';
import RepositoryRuleCodeScanningParameters from './RepositoryRuleCodeScanningParameters';
import RepositoryRuleCommitAuthorEmailPattern from './RepositoryRuleCommitAuthorEmailPattern';
import RepositoryRuleCommitMessagePattern from './RepositoryRuleCommitMessagePattern';
import RepositoryRuleCommitterEmailPattern from './RepositoryRuleCommitterEmailPattern';
import RepositoryRuleCreation from './RepositoryRuleCreation';
import RepositoryRuleDeletion from './RepositoryRuleDeletion';
import RepositoryRuleNonFastForward from './RepositoryRuleNonFastForward';
import RepositoryRulePullRequest from './RepositoryRulePullRequest';
import RepositoryRuleRequiredDeployments from './RepositoryRuleRequiredDeployments';
import RepositoryRuleRequiredLinearHistory from './RepositoryRuleRequiredLinearHistory';
import RepositoryRuleRequiredSignatures from './RepositoryRuleRequiredSignatures';
import RepositoryRuleRequiredStatusChecks from './RepositoryRuleRequiredStatusChecks';
import RepositoryRuleTagNamePattern from './RepositoryRuleTagNamePattern';
import RepositoryRuleUpdate from './RepositoryRuleUpdate';
import RepositoryRuleWorkflows from './RepositoryRuleWorkflows';

/**
 * The RepositoryRule model module.
 * @module model/RepositoryRule
 * @version 1.1.4
 */
class RepositoryRule {
    /**
     * Constructs a new <code>RepositoryRule</code>.
     * A repository rule.
     * @alias module:model/RepositoryRule
     * @param {(module:model/FileExtensionRestriction|module:model/FilePathRestriction|module:model/MaxFilePathLength|module:model/MaxFileSize|module:model/RepositoryRuleBranchNamePattern|module:model/RepositoryRuleCodeScanning|module:model/RepositoryRuleCommitAuthorEmailPattern|module:model/RepositoryRuleCommitMessagePattern|module:model/RepositoryRuleCommitterEmailPattern|module:model/RepositoryRuleCreation|module:model/RepositoryRuleDeletion|module:model/RepositoryRuleNonFastForward|module:model/RepositoryRulePullRequest|module:model/RepositoryRuleRequiredDeployments|module:model/RepositoryRuleRequiredLinearHistory|module:model/RepositoryRuleRequiredSignatures|module:model/RepositoryRuleRequiredStatusChecks|module:model/RepositoryRuleTagNamePattern|module:model/RepositoryRuleUpdate|module:model/RepositoryRuleWorkflows)} instance The actual instance to initialize RepositoryRule.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "RepositoryRuleCreation") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RepositoryRuleCreation.validateJSON(instance); // throw an exception if no match
                // create RepositoryRuleCreation from JS object
                this.actualInstance = RepositoryRuleCreation.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RepositoryRuleCreation
            errorMessages.push("Failed to construct RepositoryRuleCreation: " + err)
        }

        try {
            if (typeof instance === "RepositoryRuleUpdate") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RepositoryRuleUpdate.validateJSON(instance); // throw an exception if no match
                // create RepositoryRuleUpdate from JS object
                this.actualInstance = RepositoryRuleUpdate.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RepositoryRuleUpdate
            errorMessages.push("Failed to construct RepositoryRuleUpdate: " + err)
        }

        try {
            if (typeof instance === "RepositoryRuleDeletion") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RepositoryRuleDeletion.validateJSON(instance); // throw an exception if no match
                // create RepositoryRuleDeletion from JS object
                this.actualInstance = RepositoryRuleDeletion.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RepositoryRuleDeletion
            errorMessages.push("Failed to construct RepositoryRuleDeletion: " + err)
        }

        try {
            if (typeof instance === "RepositoryRuleRequiredLinearHistory") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RepositoryRuleRequiredLinearHistory.validateJSON(instance); // throw an exception if no match
                // create RepositoryRuleRequiredLinearHistory from JS object
                this.actualInstance = RepositoryRuleRequiredLinearHistory.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RepositoryRuleRequiredLinearHistory
            errorMessages.push("Failed to construct RepositoryRuleRequiredLinearHistory: " + err)
        }

        try {
            if (typeof instance === "RepositoryRuleRequiredDeployments") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RepositoryRuleRequiredDeployments.validateJSON(instance); // throw an exception if no match
                // create RepositoryRuleRequiredDeployments from JS object
                this.actualInstance = RepositoryRuleRequiredDeployments.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RepositoryRuleRequiredDeployments
            errorMessages.push("Failed to construct RepositoryRuleRequiredDeployments: " + err)
        }

        try {
            if (typeof instance === "RepositoryRuleRequiredSignatures") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RepositoryRuleRequiredSignatures.validateJSON(instance); // throw an exception if no match
                // create RepositoryRuleRequiredSignatures from JS object
                this.actualInstance = RepositoryRuleRequiredSignatures.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RepositoryRuleRequiredSignatures
            errorMessages.push("Failed to construct RepositoryRuleRequiredSignatures: " + err)
        }

        try {
            if (typeof instance === "RepositoryRulePullRequest") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RepositoryRulePullRequest.validateJSON(instance); // throw an exception if no match
                // create RepositoryRulePullRequest from JS object
                this.actualInstance = RepositoryRulePullRequest.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RepositoryRulePullRequest
            errorMessages.push("Failed to construct RepositoryRulePullRequest: " + err)
        }

        try {
            if (typeof instance === "RepositoryRuleRequiredStatusChecks") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RepositoryRuleRequiredStatusChecks.validateJSON(instance); // throw an exception if no match
                // create RepositoryRuleRequiredStatusChecks from JS object
                this.actualInstance = RepositoryRuleRequiredStatusChecks.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RepositoryRuleRequiredStatusChecks
            errorMessages.push("Failed to construct RepositoryRuleRequiredStatusChecks: " + err)
        }

        try {
            if (typeof instance === "RepositoryRuleNonFastForward") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RepositoryRuleNonFastForward.validateJSON(instance); // throw an exception if no match
                // create RepositoryRuleNonFastForward from JS object
                this.actualInstance = RepositoryRuleNonFastForward.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RepositoryRuleNonFastForward
            errorMessages.push("Failed to construct RepositoryRuleNonFastForward: " + err)
        }

        try {
            if (typeof instance === "RepositoryRuleCommitMessagePattern") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RepositoryRuleCommitMessagePattern.validateJSON(instance); // throw an exception if no match
                // create RepositoryRuleCommitMessagePattern from JS object
                this.actualInstance = RepositoryRuleCommitMessagePattern.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RepositoryRuleCommitMessagePattern
            errorMessages.push("Failed to construct RepositoryRuleCommitMessagePattern: " + err)
        }

        try {
            if (typeof instance === "RepositoryRuleCommitAuthorEmailPattern") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RepositoryRuleCommitAuthorEmailPattern.validateJSON(instance); // throw an exception if no match
                // create RepositoryRuleCommitAuthorEmailPattern from JS object
                this.actualInstance = RepositoryRuleCommitAuthorEmailPattern.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RepositoryRuleCommitAuthorEmailPattern
            errorMessages.push("Failed to construct RepositoryRuleCommitAuthorEmailPattern: " + err)
        }

        try {
            if (typeof instance === "RepositoryRuleCommitterEmailPattern") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RepositoryRuleCommitterEmailPattern.validateJSON(instance); // throw an exception if no match
                // create RepositoryRuleCommitterEmailPattern from JS object
                this.actualInstance = RepositoryRuleCommitterEmailPattern.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RepositoryRuleCommitterEmailPattern
            errorMessages.push("Failed to construct RepositoryRuleCommitterEmailPattern: " + err)
        }

        try {
            if (typeof instance === "RepositoryRuleBranchNamePattern") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RepositoryRuleBranchNamePattern.validateJSON(instance); // throw an exception if no match
                // create RepositoryRuleBranchNamePattern from JS object
                this.actualInstance = RepositoryRuleBranchNamePattern.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RepositoryRuleBranchNamePattern
            errorMessages.push("Failed to construct RepositoryRuleBranchNamePattern: " + err)
        }

        try {
            if (typeof instance === "RepositoryRuleTagNamePattern") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RepositoryRuleTagNamePattern.validateJSON(instance); // throw an exception if no match
                // create RepositoryRuleTagNamePattern from JS object
                this.actualInstance = RepositoryRuleTagNamePattern.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RepositoryRuleTagNamePattern
            errorMessages.push("Failed to construct RepositoryRuleTagNamePattern: " + err)
        }

        try {
            if (typeof instance === "FilePathRestriction") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                FilePathRestriction.validateJSON(instance); // throw an exception if no match
                // create FilePathRestriction from JS object
                this.actualInstance = FilePathRestriction.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into FilePathRestriction
            errorMessages.push("Failed to construct FilePathRestriction: " + err)
        }

        try {
            if (typeof instance === "MaxFilePathLength") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MaxFilePathLength.validateJSON(instance); // throw an exception if no match
                // create MaxFilePathLength from JS object
                this.actualInstance = MaxFilePathLength.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MaxFilePathLength
            errorMessages.push("Failed to construct MaxFilePathLength: " + err)
        }

        try {
            if (typeof instance === "FileExtensionRestriction") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                FileExtensionRestriction.validateJSON(instance); // throw an exception if no match
                // create FileExtensionRestriction from JS object
                this.actualInstance = FileExtensionRestriction.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into FileExtensionRestriction
            errorMessages.push("Failed to construct FileExtensionRestriction: " + err)
        }

        try {
            if (typeof instance === "MaxFileSize") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MaxFileSize.validateJSON(instance); // throw an exception if no match
                // create MaxFileSize from JS object
                this.actualInstance = MaxFileSize.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MaxFileSize
            errorMessages.push("Failed to construct MaxFileSize: " + err)
        }

        try {
            if (typeof instance === "RepositoryRuleWorkflows") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RepositoryRuleWorkflows.validateJSON(instance); // throw an exception if no match
                // create RepositoryRuleWorkflows from JS object
                this.actualInstance = RepositoryRuleWorkflows.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RepositoryRuleWorkflows
            errorMessages.push("Failed to construct RepositoryRuleWorkflows: " + err)
        }

        try {
            if (typeof instance === "RepositoryRuleCodeScanning") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RepositoryRuleCodeScanning.validateJSON(instance); // throw an exception if no match
                // create RepositoryRuleCodeScanning from JS object
                this.actualInstance = RepositoryRuleCodeScanning.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RepositoryRuleCodeScanning
            errorMessages.push("Failed to construct RepositoryRuleCodeScanning: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `RepositoryRule` with oneOf schemas FileExtensionRestriction, FilePathRestriction, MaxFilePathLength, MaxFileSize, RepositoryRuleBranchNamePattern, RepositoryRuleCodeScanning, RepositoryRuleCommitAuthorEmailPattern, RepositoryRuleCommitMessagePattern, RepositoryRuleCommitterEmailPattern, RepositoryRuleCreation, RepositoryRuleDeletion, RepositoryRuleNonFastForward, RepositoryRulePullRequest, RepositoryRuleRequiredDeployments, RepositoryRuleRequiredLinearHistory, RepositoryRuleRequiredSignatures, RepositoryRuleRequiredStatusChecks, RepositoryRuleTagNamePattern, RepositoryRuleUpdate, RepositoryRuleWorkflows. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `RepositoryRule` with oneOf schemas FileExtensionRestriction, FilePathRestriction, MaxFilePathLength, MaxFileSize, RepositoryRuleBranchNamePattern, RepositoryRuleCodeScanning, RepositoryRuleCommitAuthorEmailPattern, RepositoryRuleCommitMessagePattern, RepositoryRuleCommitterEmailPattern, RepositoryRuleCreation, RepositoryRuleDeletion, RepositoryRuleNonFastForward, RepositoryRulePullRequest, RepositoryRuleRequiredDeployments, RepositoryRuleRequiredLinearHistory, RepositoryRuleRequiredSignatures, RepositoryRuleRequiredStatusChecks, RepositoryRuleTagNamePattern, RepositoryRuleUpdate, RepositoryRuleWorkflows. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>RepositoryRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepositoryRule} obj Optional instance to populate.
     * @return {module:model/RepositoryRule} The populated <code>RepositoryRule</code> instance.
     */
    static constructFromObject(data, obj) {
        return new RepositoryRule(data);
    }

    /**
     * Gets the actual instance, which can be <code>FileExtensionRestriction</code>, <code>FilePathRestriction</code>, <code>MaxFilePathLength</code>, <code>MaxFileSize</code>, <code>RepositoryRuleBranchNamePattern</code>, <code>RepositoryRuleCodeScanning</code>, <code>RepositoryRuleCommitAuthorEmailPattern</code>, <code>RepositoryRuleCommitMessagePattern</code>, <code>RepositoryRuleCommitterEmailPattern</code>, <code>RepositoryRuleCreation</code>, <code>RepositoryRuleDeletion</code>, <code>RepositoryRuleNonFastForward</code>, <code>RepositoryRulePullRequest</code>, <code>RepositoryRuleRequiredDeployments</code>, <code>RepositoryRuleRequiredLinearHistory</code>, <code>RepositoryRuleRequiredSignatures</code>, <code>RepositoryRuleRequiredStatusChecks</code>, <code>RepositoryRuleTagNamePattern</code>, <code>RepositoryRuleUpdate</code>, <code>RepositoryRuleWorkflows</code>.
     * @return {(module:model/FileExtensionRestriction|module:model/FilePathRestriction|module:model/MaxFilePathLength|module:model/MaxFileSize|module:model/RepositoryRuleBranchNamePattern|module:model/RepositoryRuleCodeScanning|module:model/RepositoryRuleCommitAuthorEmailPattern|module:model/RepositoryRuleCommitMessagePattern|module:model/RepositoryRuleCommitterEmailPattern|module:model/RepositoryRuleCreation|module:model/RepositoryRuleDeletion|module:model/RepositoryRuleNonFastForward|module:model/RepositoryRulePullRequest|module:model/RepositoryRuleRequiredDeployments|module:model/RepositoryRuleRequiredLinearHistory|module:model/RepositoryRuleRequiredSignatures|module:model/RepositoryRuleRequiredStatusChecks|module:model/RepositoryRuleTagNamePattern|module:model/RepositoryRuleUpdate|module:model/RepositoryRuleWorkflows)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>FileExtensionRestriction</code>, <code>FilePathRestriction</code>, <code>MaxFilePathLength</code>, <code>MaxFileSize</code>, <code>RepositoryRuleBranchNamePattern</code>, <code>RepositoryRuleCodeScanning</code>, <code>RepositoryRuleCommitAuthorEmailPattern</code>, <code>RepositoryRuleCommitMessagePattern</code>, <code>RepositoryRuleCommitterEmailPattern</code>, <code>RepositoryRuleCreation</code>, <code>RepositoryRuleDeletion</code>, <code>RepositoryRuleNonFastForward</code>, <code>RepositoryRulePullRequest</code>, <code>RepositoryRuleRequiredDeployments</code>, <code>RepositoryRuleRequiredLinearHistory</code>, <code>RepositoryRuleRequiredSignatures</code>, <code>RepositoryRuleRequiredStatusChecks</code>, <code>RepositoryRuleTagNamePattern</code>, <code>RepositoryRuleUpdate</code>, <code>RepositoryRuleWorkflows</code>.
     * @param {(module:model/FileExtensionRestriction|module:model/FilePathRestriction|module:model/MaxFilePathLength|module:model/MaxFileSize|module:model/RepositoryRuleBranchNamePattern|module:model/RepositoryRuleCodeScanning|module:model/RepositoryRuleCommitAuthorEmailPattern|module:model/RepositoryRuleCommitMessagePattern|module:model/RepositoryRuleCommitterEmailPattern|module:model/RepositoryRuleCreation|module:model/RepositoryRuleDeletion|module:model/RepositoryRuleNonFastForward|module:model/RepositoryRulePullRequest|module:model/RepositoryRuleRequiredDeployments|module:model/RepositoryRuleRequiredLinearHistory|module:model/RepositoryRuleRequiredSignatures|module:model/RepositoryRuleRequiredStatusChecks|module:model/RepositoryRuleTagNamePattern|module:model/RepositoryRuleUpdate|module:model/RepositoryRuleWorkflows)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = RepositoryRule.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of RepositoryRule from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/RepositoryRule} An instance of RepositoryRule.
     */
    static fromJSON = function(json_string){
        return RepositoryRule.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/RepositoryRule.TypeEnum} type
 */
RepositoryRule.prototype['type'] = undefined;

/**
 * @member {module:model/RepositoryRuleCodeScanningParameters} parameters
 */
RepositoryRule.prototype['parameters'] = undefined;


RepositoryRule.OneOf = ["FileExtensionRestriction", "FilePathRestriction", "MaxFilePathLength", "MaxFileSize", "RepositoryRuleBranchNamePattern", "RepositoryRuleCodeScanning", "RepositoryRuleCommitAuthorEmailPattern", "RepositoryRuleCommitMessagePattern", "RepositoryRuleCommitterEmailPattern", "RepositoryRuleCreation", "RepositoryRuleDeletion", "RepositoryRuleNonFastForward", "RepositoryRulePullRequest", "RepositoryRuleRequiredDeployments", "RepositoryRuleRequiredLinearHistory", "RepositoryRuleRequiredSignatures", "RepositoryRuleRequiredStatusChecks", "RepositoryRuleTagNamePattern", "RepositoryRuleUpdate", "RepositoryRuleWorkflows"];

export default RepositoryRule;

