/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SimpleCommit from './SimpleCommit';

/**
 * The MergeGroup model module.
 * @module model/MergeGroup
 * @version 1.1.4
 */
class MergeGroup {
    /**
     * Constructs a new <code>MergeGroup</code>.
     * A group of pull requests that the merge queue has grouped together to be merged. 
     * @alias module:model/MergeGroup
     * @param headSha {String} The SHA of the merge group.
     * @param headRef {String} The full ref of the merge group.
     * @param baseSha {String} The SHA of the merge group's parent commit.
     * @param baseRef {String} The full ref of the branch the merge group will be merged into.
     * @param headCommit {module:model/SimpleCommit} 
     */
    constructor(headSha, headRef, baseSha, baseRef, headCommit) { 
        
        MergeGroup.initialize(this, headSha, headRef, baseSha, baseRef, headCommit);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, headSha, headRef, baseSha, baseRef, headCommit) { 
        obj['head_sha'] = headSha;
        obj['head_ref'] = headRef;
        obj['base_sha'] = baseSha;
        obj['base_ref'] = baseRef;
        obj['head_commit'] = headCommit;
    }

    /**
     * Constructs a <code>MergeGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MergeGroup} obj Optional instance to populate.
     * @return {module:model/MergeGroup} The populated <code>MergeGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MergeGroup();

            if (data.hasOwnProperty('head_sha')) {
                obj['head_sha'] = ApiClient.convertToType(data['head_sha'], 'String');
            }
            if (data.hasOwnProperty('head_ref')) {
                obj['head_ref'] = ApiClient.convertToType(data['head_ref'], 'String');
            }
            if (data.hasOwnProperty('base_sha')) {
                obj['base_sha'] = ApiClient.convertToType(data['base_sha'], 'String');
            }
            if (data.hasOwnProperty('base_ref')) {
                obj['base_ref'] = ApiClient.convertToType(data['base_ref'], 'String');
            }
            if (data.hasOwnProperty('head_commit')) {
                obj['head_commit'] = SimpleCommit.constructFromObject(data['head_commit']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MergeGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MergeGroup</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MergeGroup.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['head_sha'] && !(typeof data['head_sha'] === 'string' || data['head_sha'] instanceof String)) {
            throw new Error("Expected the field `head_sha` to be a primitive type in the JSON string but got " + data['head_sha']);
        }
        // ensure the json data is a string
        if (data['head_ref'] && !(typeof data['head_ref'] === 'string' || data['head_ref'] instanceof String)) {
            throw new Error("Expected the field `head_ref` to be a primitive type in the JSON string but got " + data['head_ref']);
        }
        // ensure the json data is a string
        if (data['base_sha'] && !(typeof data['base_sha'] === 'string' || data['base_sha'] instanceof String)) {
            throw new Error("Expected the field `base_sha` to be a primitive type in the JSON string but got " + data['base_sha']);
        }
        // ensure the json data is a string
        if (data['base_ref'] && !(typeof data['base_ref'] === 'string' || data['base_ref'] instanceof String)) {
            throw new Error("Expected the field `base_ref` to be a primitive type in the JSON string but got " + data['base_ref']);
        }
        // validate the optional field `head_commit`
        if (data['head_commit']) { // data not null
          SimpleCommit.validateJSON(data['head_commit']);
        }

        return true;
    }


}

MergeGroup.RequiredProperties = ["head_sha", "head_ref", "base_sha", "base_ref", "head_commit"];

/**
 * The SHA of the merge group.
 * @member {String} head_sha
 */
MergeGroup.prototype['head_sha'] = undefined;

/**
 * The full ref of the merge group.
 * @member {String} head_ref
 */
MergeGroup.prototype['head_ref'] = undefined;

/**
 * The SHA of the merge group's parent commit.
 * @member {String} base_sha
 */
MergeGroup.prototype['base_sha'] = undefined;

/**
 * The full ref of the branch the merge group will be merged into.
 * @member {String} base_ref
 */
MergeGroup.prototype['base_ref'] = undefined;

/**
 * @member {module:model/SimpleCommit} head_commit
 */
MergeGroup.prototype['head_commit'] = undefined;






export default MergeGroup;

