/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReferencedWorkflow model module.
 * @module model/ReferencedWorkflow
 * @version 1.1.4
 */
class ReferencedWorkflow {
    /**
     * Constructs a new <code>ReferencedWorkflow</code>.
     * A workflow referenced/reused by the initial caller workflow
     * @alias module:model/ReferencedWorkflow
     * @param path {String} 
     * @param sha {String} 
     */
    constructor(path, sha) { 
        
        ReferencedWorkflow.initialize(this, path, sha);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, path, sha) { 
        obj['path'] = path;
        obj['sha'] = sha;
    }

    /**
     * Constructs a <code>ReferencedWorkflow</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReferencedWorkflow} obj Optional instance to populate.
     * @return {module:model/ReferencedWorkflow} The populated <code>ReferencedWorkflow</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReferencedWorkflow();

            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('sha')) {
                obj['sha'] = ApiClient.convertToType(data['sha'], 'String');
            }
            if (data.hasOwnProperty('ref')) {
                obj['ref'] = ApiClient.convertToType(data['ref'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReferencedWorkflow</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReferencedWorkflow</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReferencedWorkflow.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['sha'] && !(typeof data['sha'] === 'string' || data['sha'] instanceof String)) {
            throw new Error("Expected the field `sha` to be a primitive type in the JSON string but got " + data['sha']);
        }
        // ensure the json data is a string
        if (data['ref'] && !(typeof data['ref'] === 'string' || data['ref'] instanceof String)) {
            throw new Error("Expected the field `ref` to be a primitive type in the JSON string but got " + data['ref']);
        }

        return true;
    }


}

ReferencedWorkflow.RequiredProperties = ["path", "sha"];

/**
 * @member {String} path
 */
ReferencedWorkflow.prototype['path'] = undefined;

/**
 * @member {String} sha
 */
ReferencedWorkflow.prototype['sha'] = undefined;

/**
 * @member {String} ref
 */
ReferencedWorkflow.prototype['ref'] = undefined;






export default ReferencedWorkflow;

