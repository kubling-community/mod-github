/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NullableMinimalRepository from './NullableMinimalRepository';
import NullableSimpleUser from './NullableSimpleUser';

/**
 * The Package model module.
 * @module model/Package
 * @version 1.1.4
 */
class Package {
    /**
     * Constructs a new <code>Package</code>.
     * A software package
     * @alias module:model/Package
     * @param id {Number} Unique identifier of the package.
     * @param name {String} The name of the package.
     * @param packageType {module:model/Package.PackageTypeEnum} 
     * @param url {String} 
     * @param htmlUrl {String} 
     * @param versionCount {Number} The number of versions of the package.
     * @param visibility {module:model/Package.VisibilityEnum} 
     * @param createdAt {Date} 
     * @param updatedAt {Date} 
     */
    constructor(id, name, packageType, url, htmlUrl, versionCount, visibility, createdAt, updatedAt) { 
        
        Package.initialize(this, id, name, packageType, url, htmlUrl, versionCount, visibility, createdAt, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, packageType, url, htmlUrl, versionCount, visibility, createdAt, updatedAt) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['package_type'] = packageType;
        obj['url'] = url;
        obj['html_url'] = htmlUrl;
        obj['version_count'] = versionCount;
        obj['visibility'] = visibility;
        obj['created_at'] = createdAt;
        obj['updated_at'] = updatedAt;
    }

    /**
     * Constructs a <code>Package</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Package} obj Optional instance to populate.
     * @return {module:model/Package} The populated <code>Package</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Package();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('package_type')) {
                obj['package_type'] = ApiClient.convertToType(data['package_type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('version_count')) {
                obj['version_count'] = ApiClient.convertToType(data['version_count'], 'Number');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = NullableSimpleUser.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = NullableMinimalRepository.constructFromObject(data['repository']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Package</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Package</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Package.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['package_type'] && !(typeof data['package_type'] === 'string' || data['package_type'] instanceof String)) {
            throw new Error("Expected the field `package_type` to be a primitive type in the JSON string but got " + data['package_type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          NullableSimpleUser.validateJSON(data['owner']);
        }
        // validate the optional field `repository`
        if (data['repository']) { // data not null
          NullableMinimalRepository.validateJSON(data['repository']);
        }

        return true;
    }


}

Package.RequiredProperties = ["id", "name", "package_type", "url", "html_url", "version_count", "visibility", "created_at", "updated_at"];

/**
 * Unique identifier of the package.
 * @member {Number} id
 */
Package.prototype['id'] = undefined;

/**
 * The name of the package.
 * @member {String} name
 */
Package.prototype['name'] = undefined;

/**
 * @member {module:model/Package.PackageTypeEnum} package_type
 */
Package.prototype['package_type'] = undefined;

/**
 * @member {String} url
 */
Package.prototype['url'] = undefined;

/**
 * @member {String} html_url
 */
Package.prototype['html_url'] = undefined;

/**
 * The number of versions of the package.
 * @member {Number} version_count
 */
Package.prototype['version_count'] = undefined;

/**
 * @member {module:model/Package.VisibilityEnum} visibility
 */
Package.prototype['visibility'] = undefined;

/**
 * @member {module:model/NullableSimpleUser} owner
 */
Package.prototype['owner'] = undefined;

/**
 * @member {module:model/NullableMinimalRepository} repository
 */
Package.prototype['repository'] = undefined;

/**
 * @member {Date} created_at
 */
Package.prototype['created_at'] = undefined;

/**
 * @member {Date} updated_at
 */
Package.prototype['updated_at'] = undefined;





/**
 * Allowed values for the <code>package_type</code> property.
 * @enum {String}
 * @readonly
 */
Package['PackageTypeEnum'] = {

    /**
     * value: "npm"
     * @const
     */
    "npm": "npm",

    /**
     * value: "maven"
     * @const
     */
    "maven": "maven",

    /**
     * value: "rubygems"
     * @const
     */
    "rubygems": "rubygems",

    /**
     * value: "docker"
     * @const
     */
    "docker": "docker",

    /**
     * value: "nuget"
     * @const
     */
    "nuget": "nuget",

    /**
     * value: "container"
     * @const
     */
    "container": "container"
};


/**
 * Allowed values for the <code>visibility</code> property.
 * @enum {String}
 * @readonly
 */
Package['VisibilityEnum'] = {

    /**
     * value: "private"
     * @const
     */
    "private": "private",

    /**
     * value: "public"
     * @const
     */
    "public": "public"
};



export default Package;

