/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MigrationsStartImportRequest model module.
 * @module model/MigrationsStartImportRequest
 * @version 1.1.4
 */
class MigrationsStartImportRequest {
    /**
     * Constructs a new <code>MigrationsStartImportRequest</code>.
     * @alias module:model/MigrationsStartImportRequest
     * @param vcsUrl {String} The URL of the originating repository.
     */
    constructor(vcsUrl) { 
        
        MigrationsStartImportRequest.initialize(this, vcsUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, vcsUrl) { 
        obj['vcs_url'] = vcsUrl;
    }

    /**
     * Constructs a <code>MigrationsStartImportRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MigrationsStartImportRequest} obj Optional instance to populate.
     * @return {module:model/MigrationsStartImportRequest} The populated <code>MigrationsStartImportRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MigrationsStartImportRequest();

            if (data.hasOwnProperty('vcs_url')) {
                obj['vcs_url'] = ApiClient.convertToType(data['vcs_url'], 'String');
            }
            if (data.hasOwnProperty('vcs')) {
                obj['vcs'] = ApiClient.convertToType(data['vcs'], 'String');
            }
            if (data.hasOwnProperty('vcs_username')) {
                obj['vcs_username'] = ApiClient.convertToType(data['vcs_username'], 'String');
            }
            if (data.hasOwnProperty('vcs_password')) {
                obj['vcs_password'] = ApiClient.convertToType(data['vcs_password'], 'String');
            }
            if (data.hasOwnProperty('tfvc_project')) {
                obj['tfvc_project'] = ApiClient.convertToType(data['tfvc_project'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MigrationsStartImportRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MigrationsStartImportRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MigrationsStartImportRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['vcs_url'] && !(typeof data['vcs_url'] === 'string' || data['vcs_url'] instanceof String)) {
            throw new Error("Expected the field `vcs_url` to be a primitive type in the JSON string but got " + data['vcs_url']);
        }
        // ensure the json data is a string
        if (data['vcs'] && !(typeof data['vcs'] === 'string' || data['vcs'] instanceof String)) {
            throw new Error("Expected the field `vcs` to be a primitive type in the JSON string but got " + data['vcs']);
        }
        // ensure the json data is a string
        if (data['vcs_username'] && !(typeof data['vcs_username'] === 'string' || data['vcs_username'] instanceof String)) {
            throw new Error("Expected the field `vcs_username` to be a primitive type in the JSON string but got " + data['vcs_username']);
        }
        // ensure the json data is a string
        if (data['vcs_password'] && !(typeof data['vcs_password'] === 'string' || data['vcs_password'] instanceof String)) {
            throw new Error("Expected the field `vcs_password` to be a primitive type in the JSON string but got " + data['vcs_password']);
        }
        // ensure the json data is a string
        if (data['tfvc_project'] && !(typeof data['tfvc_project'] === 'string' || data['tfvc_project'] instanceof String)) {
            throw new Error("Expected the field `tfvc_project` to be a primitive type in the JSON string but got " + data['tfvc_project']);
        }

        return true;
    }


}

MigrationsStartImportRequest.RequiredProperties = ["vcs_url"];

/**
 * The URL of the originating repository.
 * @member {String} vcs_url
 */
MigrationsStartImportRequest.prototype['vcs_url'] = undefined;

/**
 * The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.
 * @member {module:model/MigrationsStartImportRequest.VcsEnum} vcs
 */
MigrationsStartImportRequest.prototype['vcs'] = undefined;

/**
 * If authentication is required, the username to provide to `vcs_url`.
 * @member {String} vcs_username
 */
MigrationsStartImportRequest.prototype['vcs_username'] = undefined;

/**
 * If authentication is required, the password to provide to `vcs_url`.
 * @member {String} vcs_password
 */
MigrationsStartImportRequest.prototype['vcs_password'] = undefined;

/**
 * For a tfvc import, the name of the project that is being imported.
 * @member {String} tfvc_project
 */
MigrationsStartImportRequest.prototype['tfvc_project'] = undefined;





/**
 * Allowed values for the <code>vcs</code> property.
 * @enum {String}
 * @readonly
 */
MigrationsStartImportRequest['VcsEnum'] = {

    /**
     * value: "subversion"
     * @const
     */
    "subversion": "subversion",

    /**
     * value: "git"
     * @const
     */
    "git": "git",

    /**
     * value: "mercurial"
     * @const
     */
    "mercurial": "mercurial",

    /**
     * value: "tfvc"
     * @const
     */
    "tfvc": "tfvc"
};



export default MigrationsStartImportRequest;

