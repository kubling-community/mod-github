/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NullableSimpleUser from './NullableSimpleUser';
import OrgMembershipPermissions from './OrgMembershipPermissions';
import OrganizationSimple from './OrganizationSimple';

/**
 * The OrgMembership model module.
 * @module model/OrgMembership
 * @version 1.1.4
 */
class OrgMembership {
    /**
     * Constructs a new <code>OrgMembership</code>.
     * Org Membership
     * @alias module:model/OrgMembership
     * @param url {String} 
     * @param state {module:model/OrgMembership.StateEnum} The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
     * @param role {module:model/OrgMembership.RoleEnum} The user's membership type in the organization.
     * @param organizationUrl {String} 
     * @param organization {module:model/OrganizationSimple} 
     * @param user {module:model/NullableSimpleUser} 
     */
    constructor(url, state, role, organizationUrl, organization, user) { 
        
        OrgMembership.initialize(this, url, state, role, organizationUrl, organization, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, url, state, role, organizationUrl, organization, user) { 
        obj['url'] = url;
        obj['state'] = state;
        obj['role'] = role;
        obj['organization_url'] = organizationUrl;
        obj['organization'] = organization;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>OrgMembership</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrgMembership} obj Optional instance to populate.
     * @return {module:model/OrgMembership} The populated <code>OrgMembership</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrgMembership();

            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('organization_url')) {
                obj['organization_url'] = ApiClient.convertToType(data['organization_url'], 'String');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = OrganizationSimple.constructFromObject(data['organization']);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = NullableSimpleUser.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = OrgMembershipPermissions.constructFromObject(data['permissions']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrgMembership</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrgMembership</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrgMembership.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['organization_url'] && !(typeof data['organization_url'] === 'string' || data['organization_url'] instanceof String)) {
            throw new Error("Expected the field `organization_url` to be a primitive type in the JSON string but got " + data['organization_url']);
        }
        // validate the optional field `organization`
        if (data['organization']) { // data not null
          OrganizationSimple.validateJSON(data['organization']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          NullableSimpleUser.validateJSON(data['user']);
        }
        // validate the optional field `permissions`
        if (data['permissions']) { // data not null
          OrgMembershipPermissions.validateJSON(data['permissions']);
        }

        return true;
    }


}

OrgMembership.RequiredProperties = ["url", "state", "role", "organization_url", "organization", "user"];

/**
 * @member {String} url
 */
OrgMembership.prototype['url'] = undefined;

/**
 * The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
 * @member {module:model/OrgMembership.StateEnum} state
 */
OrgMembership.prototype['state'] = undefined;

/**
 * The user's membership type in the organization.
 * @member {module:model/OrgMembership.RoleEnum} role
 */
OrgMembership.prototype['role'] = undefined;

/**
 * @member {String} organization_url
 */
OrgMembership.prototype['organization_url'] = undefined;

/**
 * @member {module:model/OrganizationSimple} organization
 */
OrgMembership.prototype['organization'] = undefined;

/**
 * @member {module:model/NullableSimpleUser} user
 */
OrgMembership.prototype['user'] = undefined;

/**
 * @member {module:model/OrgMembershipPermissions} permissions
 */
OrgMembership.prototype['permissions'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
OrgMembership['StateEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending"
};


/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
OrgMembership['RoleEnum'] = {

    /**
     * value: "admin"
     * @const
     */
    "admin": "admin",

    /**
     * value: "member"
     * @const
     */
    "member": "member",

    /**
     * value: "billing_manager"
     * @const
     */
    "billing_manager": "billing_manager"
};



export default OrgMembership;

