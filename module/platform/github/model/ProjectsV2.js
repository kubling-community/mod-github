/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NullableSimpleUser from './NullableSimpleUser';
import SimpleUser from './SimpleUser';

/**
 * The ProjectsV2 model module.
 * @module model/ProjectsV2
 * @version 1.1.4
 */
class ProjectsV2 {
    /**
     * Constructs a new <code>ProjectsV2</code>.
     * A projects v2 project
     * @alias module:model/ProjectsV2
     * @param id {Number} 
     * @param nodeId {String} 
     * @param owner {module:model/SimpleUser} 
     * @param creator {module:model/SimpleUser} 
     * @param title {String} 
     * @param description {String} 
     * @param _public {Boolean} 
     * @param closedAt {Date} 
     * @param createdAt {Date} 
     * @param updatedAt {Date} 
     * @param number {Number} 
     * @param shortDescription {String} 
     * @param deletedAt {Date} 
     * @param deletedBy {module:model/NullableSimpleUser} 
     */
    constructor(id, nodeId, owner, creator, title, description, _public, closedAt, createdAt, updatedAt, number, shortDescription, deletedAt, deletedBy) { 
        
        ProjectsV2.initialize(this, id, nodeId, owner, creator, title, description, _public, closedAt, createdAt, updatedAt, number, shortDescription, deletedAt, deletedBy);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, nodeId, owner, creator, title, description, _public, closedAt, createdAt, updatedAt, number, shortDescription, deletedAt, deletedBy) { 
        obj['id'] = id;
        obj['node_id'] = nodeId;
        obj['owner'] = owner;
        obj['creator'] = creator;
        obj['title'] = title;
        obj['description'] = description;
        obj['public'] = _public;
        obj['closed_at'] = closedAt;
        obj['created_at'] = createdAt;
        obj['updated_at'] = updatedAt;
        obj['number'] = number;
        obj['short_description'] = shortDescription;
        obj['deleted_at'] = deletedAt;
        obj['deleted_by'] = deletedBy;
    }

    /**
     * Constructs a <code>ProjectsV2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectsV2} obj Optional instance to populate.
     * @return {module:model/ProjectsV2} The populated <code>ProjectsV2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectsV2();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = SimpleUser.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('creator')) {
                obj['creator'] = SimpleUser.constructFromObject(data['creator']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('public')) {
                obj['public'] = ApiClient.convertToType(data['public'], 'Boolean');
            }
            if (data.hasOwnProperty('closed_at')) {
                obj['closed_at'] = ApiClient.convertToType(data['closed_at'], 'Date');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('short_description')) {
                obj['short_description'] = ApiClient.convertToType(data['short_description'], 'String');
            }
            if (data.hasOwnProperty('deleted_at')) {
                obj['deleted_at'] = ApiClient.convertToType(data['deleted_at'], 'Date');
            }
            if (data.hasOwnProperty('deleted_by')) {
                obj['deleted_by'] = NullableSimpleUser.constructFromObject(data['deleted_by']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectsV2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectsV2</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProjectsV2.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          SimpleUser.validateJSON(data['owner']);
        }
        // validate the optional field `creator`
        if (data['creator']) { // data not null
          SimpleUser.validateJSON(data['creator']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['short_description'] && !(typeof data['short_description'] === 'string' || data['short_description'] instanceof String)) {
            throw new Error("Expected the field `short_description` to be a primitive type in the JSON string but got " + data['short_description']);
        }
        // validate the optional field `deleted_by`
        if (data['deleted_by']) { // data not null
          NullableSimpleUser.validateJSON(data['deleted_by']);
        }

        return true;
    }


}

ProjectsV2.RequiredProperties = ["id", "node_id", "owner", "creator", "title", "description", "public", "closed_at", "created_at", "updated_at", "number", "short_description", "deleted_at", "deleted_by"];

/**
 * @member {Number} id
 */
ProjectsV2.prototype['id'] = undefined;

/**
 * @member {String} node_id
 */
ProjectsV2.prototype['node_id'] = undefined;

/**
 * @member {module:model/SimpleUser} owner
 */
ProjectsV2.prototype['owner'] = undefined;

/**
 * @member {module:model/SimpleUser} creator
 */
ProjectsV2.prototype['creator'] = undefined;

/**
 * @member {String} title
 */
ProjectsV2.prototype['title'] = undefined;

/**
 * @member {String} description
 */
ProjectsV2.prototype['description'] = undefined;

/**
 * @member {Boolean} public
 */
ProjectsV2.prototype['public'] = undefined;

/**
 * @member {Date} closed_at
 */
ProjectsV2.prototype['closed_at'] = undefined;

/**
 * @member {Date} created_at
 */
ProjectsV2.prototype['created_at'] = undefined;

/**
 * @member {Date} updated_at
 */
ProjectsV2.prototype['updated_at'] = undefined;

/**
 * @member {Number} number
 */
ProjectsV2.prototype['number'] = undefined;

/**
 * @member {String} short_description
 */
ProjectsV2.prototype['short_description'] = undefined;

/**
 * @member {Date} deleted_at
 */
ProjectsV2.prototype['deleted_at'] = undefined;

/**
 * @member {module:model/NullableSimpleUser} deleted_by
 */
ProjectsV2.prototype['deleted_by'] = undefined;






export default ProjectsV2;

