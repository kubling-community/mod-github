/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CodespaceExportDetails model module.
 * @module model/CodespaceExportDetails
 * @version 1.1.4
 */
class CodespaceExportDetails {
    /**
     * Constructs a new <code>CodespaceExportDetails</code>.
     * An export of a codespace. Also, latest export details for a codespace can be fetched with id &#x3D; latest
     * @alias module:model/CodespaceExportDetails
     */
    constructor() { 
        
        CodespaceExportDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CodespaceExportDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CodespaceExportDetails} obj Optional instance to populate.
     * @return {module:model/CodespaceExportDetails} The populated <code>CodespaceExportDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CodespaceExportDetails();

            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('completed_at')) {
                obj['completed_at'] = ApiClient.convertToType(data['completed_at'], 'Date');
            }
            if (data.hasOwnProperty('branch')) {
                obj['branch'] = ApiClient.convertToType(data['branch'], 'String');
            }
            if (data.hasOwnProperty('sha')) {
                obj['sha'] = ApiClient.convertToType(data['sha'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('export_url')) {
                obj['export_url'] = ApiClient.convertToType(data['export_url'], 'String');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CodespaceExportDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CodespaceExportDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['branch'] && !(typeof data['branch'] === 'string' || data['branch'] instanceof String)) {
            throw new Error("Expected the field `branch` to be a primitive type in the JSON string but got " + data['branch']);
        }
        // ensure the json data is a string
        if (data['sha'] && !(typeof data['sha'] === 'string' || data['sha'] instanceof String)) {
            throw new Error("Expected the field `sha` to be a primitive type in the JSON string but got " + data['sha']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['export_url'] && !(typeof data['export_url'] === 'string' || data['export_url'] instanceof String)) {
            throw new Error("Expected the field `export_url` to be a primitive type in the JSON string but got " + data['export_url']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }

        return true;
    }


}



/**
 * State of the latest export
 * @member {String} state
 */
CodespaceExportDetails.prototype['state'] = undefined;

/**
 * Completion time of the last export operation
 * @member {Date} completed_at
 */
CodespaceExportDetails.prototype['completed_at'] = undefined;

/**
 * Name of the exported branch
 * @member {String} branch
 */
CodespaceExportDetails.prototype['branch'] = undefined;

/**
 * Git commit SHA of the exported branch
 * @member {String} sha
 */
CodespaceExportDetails.prototype['sha'] = undefined;

/**
 * Id for the export details
 * @member {String} id
 */
CodespaceExportDetails.prototype['id'] = undefined;

/**
 * Url for fetching export details
 * @member {String} export_url
 */
CodespaceExportDetails.prototype['export_url'] = undefined;

/**
 * Web url for the exported branch
 * @member {String} html_url
 */
CodespaceExportDetails.prototype['html_url'] = undefined;






export default CodespaceExportDetails;

