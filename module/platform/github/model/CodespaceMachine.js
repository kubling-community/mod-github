/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CodespaceMachine model module.
 * @module model/CodespaceMachine
 * @version 1.1.4
 */
class CodespaceMachine {
    /**
     * Constructs a new <code>CodespaceMachine</code>.
     * A description of the machine powering a codespace.
     * @alias module:model/CodespaceMachine
     * @param name {String} The name of the machine.
     * @param displayName {String} The display name of the machine includes cores, memory, and storage.
     * @param operatingSystem {String} The operating system of the machine.
     * @param storageInBytes {Number} How much storage is available to the codespace.
     * @param memoryInBytes {Number} How much memory is available to the codespace.
     * @param cpus {Number} How many cores are available to the codespace.
     * @param prebuildAvailability {module:model/CodespaceMachine.PrebuildAvailabilityEnum} Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be \"null\" if prebuilds are not supported or prebuild availability could not be determined. Value will be \"none\" if no prebuild is available. Latest values \"ready\" and \"in_progress\" indicate the prebuild availability status.
     */
    constructor(name, displayName, operatingSystem, storageInBytes, memoryInBytes, cpus, prebuildAvailability) { 
        
        CodespaceMachine.initialize(this, name, displayName, operatingSystem, storageInBytes, memoryInBytes, cpus, prebuildAvailability);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, displayName, operatingSystem, storageInBytes, memoryInBytes, cpus, prebuildAvailability) { 
        obj['name'] = name;
        obj['display_name'] = displayName;
        obj['operating_system'] = operatingSystem;
        obj['storage_in_bytes'] = storageInBytes;
        obj['memory_in_bytes'] = memoryInBytes;
        obj['cpus'] = cpus;
        obj['prebuild_availability'] = prebuildAvailability;
    }

    /**
     * Constructs a <code>CodespaceMachine</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CodespaceMachine} obj Optional instance to populate.
     * @return {module:model/CodespaceMachine} The populated <code>CodespaceMachine</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CodespaceMachine();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('display_name')) {
                obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
            }
            if (data.hasOwnProperty('operating_system')) {
                obj['operating_system'] = ApiClient.convertToType(data['operating_system'], 'String');
            }
            if (data.hasOwnProperty('storage_in_bytes')) {
                obj['storage_in_bytes'] = ApiClient.convertToType(data['storage_in_bytes'], 'Number');
            }
            if (data.hasOwnProperty('memory_in_bytes')) {
                obj['memory_in_bytes'] = ApiClient.convertToType(data['memory_in_bytes'], 'Number');
            }
            if (data.hasOwnProperty('cpus')) {
                obj['cpus'] = ApiClient.convertToType(data['cpus'], 'Number');
            }
            if (data.hasOwnProperty('prebuild_availability')) {
                obj['prebuild_availability'] = ApiClient.convertToType(data['prebuild_availability'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CodespaceMachine</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CodespaceMachine</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CodespaceMachine.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['display_name'] && !(typeof data['display_name'] === 'string' || data['display_name'] instanceof String)) {
            throw new Error("Expected the field `display_name` to be a primitive type in the JSON string but got " + data['display_name']);
        }
        // ensure the json data is a string
        if (data['operating_system'] && !(typeof data['operating_system'] === 'string' || data['operating_system'] instanceof String)) {
            throw new Error("Expected the field `operating_system` to be a primitive type in the JSON string but got " + data['operating_system']);
        }
        // ensure the json data is a string
        if (data['prebuild_availability'] && !(typeof data['prebuild_availability'] === 'string' || data['prebuild_availability'] instanceof String)) {
            throw new Error("Expected the field `prebuild_availability` to be a primitive type in the JSON string but got " + data['prebuild_availability']);
        }

        return true;
    }


}

CodespaceMachine.RequiredProperties = ["name", "display_name", "operating_system", "storage_in_bytes", "memory_in_bytes", "cpus", "prebuild_availability"];

/**
 * The name of the machine.
 * @member {String} name
 */
CodespaceMachine.prototype['name'] = undefined;

/**
 * The display name of the machine includes cores, memory, and storage.
 * @member {String} display_name
 */
CodespaceMachine.prototype['display_name'] = undefined;

/**
 * The operating system of the machine.
 * @member {String} operating_system
 */
CodespaceMachine.prototype['operating_system'] = undefined;

/**
 * How much storage is available to the codespace.
 * @member {Number} storage_in_bytes
 */
CodespaceMachine.prototype['storage_in_bytes'] = undefined;

/**
 * How much memory is available to the codespace.
 * @member {Number} memory_in_bytes
 */
CodespaceMachine.prototype['memory_in_bytes'] = undefined;

/**
 * How many cores are available to the codespace.
 * @member {Number} cpus
 */
CodespaceMachine.prototype['cpus'] = undefined;

/**
 * Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be \"null\" if prebuilds are not supported or prebuild availability could not be determined. Value will be \"none\" if no prebuild is available. Latest values \"ready\" and \"in_progress\" indicate the prebuild availability status.
 * @member {module:model/CodespaceMachine.PrebuildAvailabilityEnum} prebuild_availability
 */
CodespaceMachine.prototype['prebuild_availability'] = undefined;





/**
 * Allowed values for the <code>prebuild_availability</code> property.
 * @enum {String}
 * @readonly
 */
CodespaceMachine['PrebuildAvailabilityEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "ready"
     * @const
     */
    "ready": "ready",

    /**
     * value: "in_progress"
     * @const
     */
    "in_progress": "in_progress"
};



export default CodespaceMachine;

