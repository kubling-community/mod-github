/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Autolink model module.
 * @module model/Autolink
 * @version 1.1.4
 */
class Autolink {
    /**
     * Constructs a new <code>Autolink</code>.
     * An autolink reference.
     * @alias module:model/Autolink
     * @param id {Number} 
     * @param keyPrefix {String} The prefix of a key that is linkified.
     * @param urlTemplate {String} A template for the target URL that is generated if a key was found.
     * @param isAlphanumeric {Boolean} Whether this autolink reference matches alphanumeric characters. If false, this autolink reference only matches numeric characters.
     */
    constructor(id, keyPrefix, urlTemplate, isAlphanumeric) { 
        
        Autolink.initialize(this, id, keyPrefix, urlTemplate, isAlphanumeric);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, keyPrefix, urlTemplate, isAlphanumeric) { 
        obj['id'] = id;
        obj['key_prefix'] = keyPrefix;
        obj['url_template'] = urlTemplate;
        obj['is_alphanumeric'] = isAlphanumeric;
    }

    /**
     * Constructs a <code>Autolink</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Autolink} obj Optional instance to populate.
     * @return {module:model/Autolink} The populated <code>Autolink</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Autolink();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('key_prefix')) {
                obj['key_prefix'] = ApiClient.convertToType(data['key_prefix'], 'String');
            }
            if (data.hasOwnProperty('url_template')) {
                obj['url_template'] = ApiClient.convertToType(data['url_template'], 'String');
            }
            if (data.hasOwnProperty('is_alphanumeric')) {
                obj['is_alphanumeric'] = ApiClient.convertToType(data['is_alphanumeric'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Autolink</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Autolink</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Autolink.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['key_prefix'] && !(typeof data['key_prefix'] === 'string' || data['key_prefix'] instanceof String)) {
            throw new Error("Expected the field `key_prefix` to be a primitive type in the JSON string but got " + data['key_prefix']);
        }
        // ensure the json data is a string
        if (data['url_template'] && !(typeof data['url_template'] === 'string' || data['url_template'] instanceof String)) {
            throw new Error("Expected the field `url_template` to be a primitive type in the JSON string but got " + data['url_template']);
        }

        return true;
    }


}

Autolink.RequiredProperties = ["id", "key_prefix", "url_template", "is_alphanumeric"];

/**
 * @member {Number} id
 */
Autolink.prototype['id'] = undefined;

/**
 * The prefix of a key that is linkified.
 * @member {String} key_prefix
 */
Autolink.prototype['key_prefix'] = undefined;

/**
 * A template for the target URL that is generated if a key was found.
 * @member {String} url_template
 */
Autolink.prototype['url_template'] = undefined;

/**
 * Whether this autolink reference matches alphanumeric characters. If false, this autolink reference only matches numeric characters.
 * @member {Boolean} is_alphanumeric
 */
Autolink.prototype['is_alphanumeric'] = undefined;






export default Autolink;

