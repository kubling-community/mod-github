/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthorizationApp from './AuthorizationApp';
import NullableScopedInstallation from './NullableScopedInstallation';
import NullableSimpleUser from './NullableSimpleUser';

/**
 * The Authorization model module.
 * @module model/Authorization
 * @version 1.1.4
 */
class Authorization {
    /**
     * Constructs a new <code>Authorization</code>.
     * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
     * @alias module:model/Authorization
     * @param id {Number} 
     * @param url {String} 
     * @param scopes {Array.<String>} A list of scopes that this authorization is in.
     * @param token {String} 
     * @param tokenLastEight {String} 
     * @param hashedToken {String} 
     * @param app {module:model/AuthorizationApp} 
     * @param note {String} 
     * @param noteUrl {String} 
     * @param updatedAt {Date} 
     * @param createdAt {Date} 
     * @param fingerprint {String} 
     * @param expiresAt {Date} 
     */
    constructor(id, url, scopes, token, tokenLastEight, hashedToken, app, note, noteUrl, updatedAt, createdAt, fingerprint, expiresAt) { 
        
        Authorization.initialize(this, id, url, scopes, token, tokenLastEight, hashedToken, app, note, noteUrl, updatedAt, createdAt, fingerprint, expiresAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, url, scopes, token, tokenLastEight, hashedToken, app, note, noteUrl, updatedAt, createdAt, fingerprint, expiresAt) { 
        obj['id'] = id;
        obj['url'] = url;
        obj['scopes'] = scopes;
        obj['token'] = token;
        obj['token_last_eight'] = tokenLastEight;
        obj['hashed_token'] = hashedToken;
        obj['app'] = app;
        obj['note'] = note;
        obj['note_url'] = noteUrl;
        obj['updated_at'] = updatedAt;
        obj['created_at'] = createdAt;
        obj['fingerprint'] = fingerprint;
        obj['expires_at'] = expiresAt;
    }

    /**
     * Constructs a <code>Authorization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Authorization} obj Optional instance to populate.
     * @return {module:model/Authorization} The populated <code>Authorization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Authorization();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], ['String']);
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('token_last_eight')) {
                obj['token_last_eight'] = ApiClient.convertToType(data['token_last_eight'], 'String');
            }
            if (data.hasOwnProperty('hashed_token')) {
                obj['hashed_token'] = ApiClient.convertToType(data['hashed_token'], 'String');
            }
            if (data.hasOwnProperty('app')) {
                obj['app'] = AuthorizationApp.constructFromObject(data['app']);
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('note_url')) {
                obj['note_url'] = ApiClient.convertToType(data['note_url'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('fingerprint')) {
                obj['fingerprint'] = ApiClient.convertToType(data['fingerprint'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = NullableSimpleUser.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('installation')) {
                obj['installation'] = NullableScopedInstallation.constructFromObject(data['installation']);
            }
            if (data.hasOwnProperty('expires_at')) {
                obj['expires_at'] = ApiClient.convertToType(data['expires_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Authorization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Authorization</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Authorization.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes'])) {
            throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['token_last_eight'] && !(typeof data['token_last_eight'] === 'string' || data['token_last_eight'] instanceof String)) {
            throw new Error("Expected the field `token_last_eight` to be a primitive type in the JSON string but got " + data['token_last_eight']);
        }
        // ensure the json data is a string
        if (data['hashed_token'] && !(typeof data['hashed_token'] === 'string' || data['hashed_token'] instanceof String)) {
            throw new Error("Expected the field `hashed_token` to be a primitive type in the JSON string but got " + data['hashed_token']);
        }
        // validate the optional field `app`
        if (data['app']) { // data not null
          AuthorizationApp.validateJSON(data['app']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['note_url'] && !(typeof data['note_url'] === 'string' || data['note_url'] instanceof String)) {
            throw new Error("Expected the field `note_url` to be a primitive type in the JSON string but got " + data['note_url']);
        }
        // ensure the json data is a string
        if (data['fingerprint'] && !(typeof data['fingerprint'] === 'string' || data['fingerprint'] instanceof String)) {
            throw new Error("Expected the field `fingerprint` to be a primitive type in the JSON string but got " + data['fingerprint']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          NullableSimpleUser.validateJSON(data['user']);
        }
        // validate the optional field `installation`
        if (data['installation']) { // data not null
          NullableScopedInstallation.validateJSON(data['installation']);
        }

        return true;
    }


}

Authorization.RequiredProperties = ["id", "url", "scopes", "token", "token_last_eight", "hashed_token", "app", "note", "note_url", "updated_at", "created_at", "fingerprint", "expires_at"];

/**
 * @member {Number} id
 */
Authorization.prototype['id'] = undefined;

/**
 * @member {String} url
 */
Authorization.prototype['url'] = undefined;

/**
 * A list of scopes that this authorization is in.
 * @member {Array.<String>} scopes
 */
Authorization.prototype['scopes'] = undefined;

/**
 * @member {String} token
 */
Authorization.prototype['token'] = undefined;

/**
 * @member {String} token_last_eight
 */
Authorization.prototype['token_last_eight'] = undefined;

/**
 * @member {String} hashed_token
 */
Authorization.prototype['hashed_token'] = undefined;

/**
 * @member {module:model/AuthorizationApp} app
 */
Authorization.prototype['app'] = undefined;

/**
 * @member {String} note
 */
Authorization.prototype['note'] = undefined;

/**
 * @member {String} note_url
 */
Authorization.prototype['note_url'] = undefined;

/**
 * @member {Date} updated_at
 */
Authorization.prototype['updated_at'] = undefined;

/**
 * @member {Date} created_at
 */
Authorization.prototype['created_at'] = undefined;

/**
 * @member {String} fingerprint
 */
Authorization.prototype['fingerprint'] = undefined;

/**
 * @member {module:model/NullableSimpleUser} user
 */
Authorization.prototype['user'] = undefined;

/**
 * @member {module:model/NullableScopedInstallation} installation
 */
Authorization.prototype['installation'] = undefined;

/**
 * @member {Date} expires_at
 */
Authorization.prototype['expires_at'] = undefined;






export default Authorization;

