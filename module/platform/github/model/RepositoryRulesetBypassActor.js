/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RepositoryRulesetBypassActor model module.
 * @module model/RepositoryRulesetBypassActor
 * @version 1.1.4
 */
class RepositoryRulesetBypassActor {
    /**
     * Constructs a new <code>RepositoryRulesetBypassActor</code>.
     * An actor that can bypass rules in a ruleset
     * @alias module:model/RepositoryRulesetBypassActor
     * @param actorType {module:model/RepositoryRulesetBypassActor.ActorTypeEnum} The type of actor that can bypass a ruleset. 
     * @param bypassMode {module:model/RepositoryRulesetBypassActor.BypassModeEnum} When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests. `pull_request` is not applicable for the `DeployKey` actor type. 
     */
    constructor(actorType, bypassMode) { 
        
        RepositoryRulesetBypassActor.initialize(this, actorType, bypassMode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, actorType, bypassMode) { 
        obj['actor_type'] = actorType;
        obj['bypass_mode'] = bypassMode;
    }

    /**
     * Constructs a <code>RepositoryRulesetBypassActor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepositoryRulesetBypassActor} obj Optional instance to populate.
     * @return {module:model/RepositoryRulesetBypassActor} The populated <code>RepositoryRulesetBypassActor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepositoryRulesetBypassActor();

            if (data.hasOwnProperty('actor_id')) {
                obj['actor_id'] = ApiClient.convertToType(data['actor_id'], 'Number');
            }
            if (data.hasOwnProperty('actor_type')) {
                obj['actor_type'] = ApiClient.convertToType(data['actor_type'], 'String');
            }
            if (data.hasOwnProperty('bypass_mode')) {
                obj['bypass_mode'] = ApiClient.convertToType(data['bypass_mode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepositoryRulesetBypassActor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepositoryRulesetBypassActor</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RepositoryRulesetBypassActor.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['actor_type'] && !(typeof data['actor_type'] === 'string' || data['actor_type'] instanceof String)) {
            throw new Error("Expected the field `actor_type` to be a primitive type in the JSON string but got " + data['actor_type']);
        }
        // ensure the json data is a string
        if (data['bypass_mode'] && !(typeof data['bypass_mode'] === 'string' || data['bypass_mode'] instanceof String)) {
            throw new Error("Expected the field `bypass_mode` to be a primitive type in the JSON string but got " + data['bypass_mode']);
        }

        return true;
    }


}

RepositoryRulesetBypassActor.RequiredProperties = ["actor_type", "bypass_mode"];

/**
 * The ID of the actor that can bypass a ruleset. If `actor_type` is `OrganizationAdmin`, this should be `1`. If `actor_type` is `DeployKey`, this should be null. `OrganizationAdmin` is not applicable for personal repositories. 
 * @member {Number} actor_id
 */
RepositoryRulesetBypassActor.prototype['actor_id'] = undefined;

/**
 * The type of actor that can bypass a ruleset. 
 * @member {module:model/RepositoryRulesetBypassActor.ActorTypeEnum} actor_type
 */
RepositoryRulesetBypassActor.prototype['actor_type'] = undefined;

/**
 * When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests. `pull_request` is not applicable for the `DeployKey` actor type. 
 * @member {module:model/RepositoryRulesetBypassActor.BypassModeEnum} bypass_mode
 */
RepositoryRulesetBypassActor.prototype['bypass_mode'] = undefined;





/**
 * Allowed values for the <code>actor_type</code> property.
 * @enum {String}
 * @readonly
 */
RepositoryRulesetBypassActor['ActorTypeEnum'] = {

    /**
     * value: "Integration"
     * @const
     */
    "Integration": "Integration",

    /**
     * value: "OrganizationAdmin"
     * @const
     */
    "OrganizationAdmin": "OrganizationAdmin",

    /**
     * value: "RepositoryRole"
     * @const
     */
    "RepositoryRole": "RepositoryRole",

    /**
     * value: "Team"
     * @const
     */
    "Team": "Team",

    /**
     * value: "DeployKey"
     * @const
     */
    "DeployKey": "DeployKey"
};


/**
 * Allowed values for the <code>bypass_mode</code> property.
 * @enum {String}
 * @readonly
 */
RepositoryRulesetBypassActor['BypassModeEnum'] = {

    /**
     * value: "always"
     * @const
     */
    "always": "always",

    /**
     * value: "pull_request"
     * @const
     */
    "pull_request": "pull_request"
};



export default RepositoryRulesetBypassActor;

