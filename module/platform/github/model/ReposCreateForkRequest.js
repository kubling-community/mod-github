/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReposCreateForkRequest model module.
 * @module model/ReposCreateForkRequest
 * @version 1.1.4
 */
class ReposCreateForkRequest {
    /**
     * Constructs a new <code>ReposCreateForkRequest</code>.
     * @alias module:model/ReposCreateForkRequest
     */
    constructor() { 
        
        ReposCreateForkRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReposCreateForkRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReposCreateForkRequest} obj Optional instance to populate.
     * @return {module:model/ReposCreateForkRequest} The populated <code>ReposCreateForkRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReposCreateForkRequest();

            if (data.hasOwnProperty('organization')) {
                obj['organization'] = ApiClient.convertToType(data['organization'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('default_branch_only')) {
                obj['default_branch_only'] = ApiClient.convertToType(data['default_branch_only'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReposCreateForkRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReposCreateForkRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['organization'] && !(typeof data['organization'] === 'string' || data['organization'] instanceof String)) {
            throw new Error("Expected the field `organization` to be a primitive type in the JSON string but got " + data['organization']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Optional parameter to specify the organization name if forking into an organization.
 * @member {String} organization
 */
ReposCreateForkRequest.prototype['organization'] = undefined;

/**
 * When forking from an existing repository, a new name for the fork.
 * @member {String} name
 */
ReposCreateForkRequest.prototype['name'] = undefined;

/**
 * When forking from an existing repository, fork with only the default branch.
 * @member {Boolean} default_branch_only
 */
ReposCreateForkRequest.prototype['default_branch_only'] = undefined;






export default ReposCreateForkRequest;

