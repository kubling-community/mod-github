/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DiscussionCategory from './DiscussionCategory';
import Reactions from './Reactions';
import User from './User';

/**
 * The Discussion model module.
 * @module model/Discussion
 * @version 1.1.4
 */
class Discussion {
    /**
     * Constructs a new <code>Discussion</code>.
     * A Discussion in a repository.
     * @alias module:model/Discussion
     * @param activeLockReason {String} 
     * @param answerChosenAt {String} 
     * @param answerChosenBy {module:model/User} 
     * @param answerHtmlUrl {String} 
     * @param authorAssociation {module:model/Discussion.AuthorAssociationEnum} How the author is associated with the repository.
     * @param body {String} 
     * @param category {module:model/DiscussionCategory} 
     * @param comments {Number} 
     * @param createdAt {Date} 
     * @param htmlUrl {String} 
     * @param id {Number} 
     * @param locked {Boolean} 
     * @param nodeId {String} 
     * @param number {Number} 
     * @param repositoryUrl {String} 
     * @param state {module:model/Discussion.StateEnum} The current state of the discussion. `converting` means that the discussion is being converted from an issue. `transferring` means that the discussion is being transferred from another repository.
     * @param stateReason {module:model/Discussion.StateReasonEnum} The reason for the current state
     * @param title {String} 
     * @param updatedAt {Date} 
     * @param user {module:model/User} 
     */
    constructor(activeLockReason, answerChosenAt, answerChosenBy, answerHtmlUrl, authorAssociation, body, category, comments, createdAt, htmlUrl, id, locked, nodeId, number, repositoryUrl, state, stateReason, title, updatedAt, user) { 
        
        Discussion.initialize(this, activeLockReason, answerChosenAt, answerChosenBy, answerHtmlUrl, authorAssociation, body, category, comments, createdAt, htmlUrl, id, locked, nodeId, number, repositoryUrl, state, stateReason, title, updatedAt, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, activeLockReason, answerChosenAt, answerChosenBy, answerHtmlUrl, authorAssociation, body, category, comments, createdAt, htmlUrl, id, locked, nodeId, number, repositoryUrl, state, stateReason, title, updatedAt, user) { 
        obj['active_lock_reason'] = activeLockReason;
        obj['answer_chosen_at'] = answerChosenAt;
        obj['answer_chosen_by'] = answerChosenBy;
        obj['answer_html_url'] = answerHtmlUrl;
        obj['author_association'] = authorAssociation;
        obj['body'] = body;
        obj['category'] = category;
        obj['comments'] = comments;
        obj['created_at'] = createdAt;
        obj['html_url'] = htmlUrl;
        obj['id'] = id;
        obj['locked'] = locked;
        obj['node_id'] = nodeId;
        obj['number'] = number;
        obj['repository_url'] = repositoryUrl;
        obj['state'] = state;
        obj['state_reason'] = stateReason;
        obj['title'] = title;
        obj['updated_at'] = updatedAt;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>Discussion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Discussion} obj Optional instance to populate.
     * @return {module:model/Discussion} The populated <code>Discussion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Discussion();

            if (data.hasOwnProperty('active_lock_reason')) {
                obj['active_lock_reason'] = ApiClient.convertToType(data['active_lock_reason'], 'String');
            }
            if (data.hasOwnProperty('answer_chosen_at')) {
                obj['answer_chosen_at'] = ApiClient.convertToType(data['answer_chosen_at'], 'String');
            }
            if (data.hasOwnProperty('answer_chosen_by')) {
                obj['answer_chosen_by'] = User.constructFromObject(data['answer_chosen_by']);
            }
            if (data.hasOwnProperty('answer_html_url')) {
                obj['answer_html_url'] = ApiClient.convertToType(data['answer_html_url'], 'String');
            }
            if (data.hasOwnProperty('author_association')) {
                obj['author_association'] = ApiClient.convertToType(data['author_association'], 'String');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = DiscussionCategory.constructFromObject(data['category']);
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'Number');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('locked')) {
                obj['locked'] = ApiClient.convertToType(data['locked'], 'Boolean');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('reactions')) {
                obj['reactions'] = Reactions.constructFromObject(data['reactions']);
            }
            if (data.hasOwnProperty('repository_url')) {
                obj['repository_url'] = ApiClient.convertToType(data['repository_url'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('state_reason')) {
                obj['state_reason'] = ApiClient.convertToType(data['state_reason'], 'String');
            }
            if (data.hasOwnProperty('timeline_url')) {
                obj['timeline_url'] = ApiClient.convertToType(data['timeline_url'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Discussion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Discussion</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Discussion.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['active_lock_reason'] && !(typeof data['active_lock_reason'] === 'string' || data['active_lock_reason'] instanceof String)) {
            throw new Error("Expected the field `active_lock_reason` to be a primitive type in the JSON string but got " + data['active_lock_reason']);
        }
        // ensure the json data is a string
        if (data['answer_chosen_at'] && !(typeof data['answer_chosen_at'] === 'string' || data['answer_chosen_at'] instanceof String)) {
            throw new Error("Expected the field `answer_chosen_at` to be a primitive type in the JSON string but got " + data['answer_chosen_at']);
        }
        // validate the optional field `answer_chosen_by`
        if (data['answer_chosen_by']) { // data not null
          User.validateJSON(data['answer_chosen_by']);
        }
        // ensure the json data is a string
        if (data['answer_html_url'] && !(typeof data['answer_html_url'] === 'string' || data['answer_html_url'] instanceof String)) {
            throw new Error("Expected the field `answer_html_url` to be a primitive type in the JSON string but got " + data['answer_html_url']);
        }
        // ensure the json data is a string
        if (data['author_association'] && !(typeof data['author_association'] === 'string' || data['author_association'] instanceof String)) {
            throw new Error("Expected the field `author_association` to be a primitive type in the JSON string but got " + data['author_association']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // validate the optional field `category`
        if (data['category']) { // data not null
          DiscussionCategory.validateJSON(data['category']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // validate the optional field `reactions`
        if (data['reactions']) { // data not null
          Reactions.validateJSON(data['reactions']);
        }
        // ensure the json data is a string
        if (data['repository_url'] && !(typeof data['repository_url'] === 'string' || data['repository_url'] instanceof String)) {
            throw new Error("Expected the field `repository_url` to be a primitive type in the JSON string but got " + data['repository_url']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['state_reason'] && !(typeof data['state_reason'] === 'string' || data['state_reason'] instanceof String)) {
            throw new Error("Expected the field `state_reason` to be a primitive type in the JSON string but got " + data['state_reason']);
        }
        // ensure the json data is a string
        if (data['timeline_url'] && !(typeof data['timeline_url'] === 'string' || data['timeline_url'] instanceof String)) {
            throw new Error("Expected the field `timeline_url` to be a primitive type in the JSON string but got " + data['timeline_url']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}

Discussion.RequiredProperties = ["active_lock_reason", "answer_chosen_at", "answer_chosen_by", "answer_html_url", "author_association", "body", "category", "comments", "created_at", "html_url", "id", "locked", "node_id", "number", "repository_url", "state", "state_reason", "title", "updated_at", "user"];

/**
 * @member {String} active_lock_reason
 */
Discussion.prototype['active_lock_reason'] = undefined;

/**
 * @member {String} answer_chosen_at
 */
Discussion.prototype['answer_chosen_at'] = undefined;

/**
 * @member {module:model/User} answer_chosen_by
 */
Discussion.prototype['answer_chosen_by'] = undefined;

/**
 * @member {String} answer_html_url
 */
Discussion.prototype['answer_html_url'] = undefined;

/**
 * How the author is associated with the repository.
 * @member {module:model/Discussion.AuthorAssociationEnum} author_association
 */
Discussion.prototype['author_association'] = undefined;

/**
 * @member {String} body
 */
Discussion.prototype['body'] = undefined;

/**
 * @member {module:model/DiscussionCategory} category
 */
Discussion.prototype['category'] = undefined;

/**
 * @member {Number} comments
 */
Discussion.prototype['comments'] = undefined;

/**
 * @member {Date} created_at
 */
Discussion.prototype['created_at'] = undefined;

/**
 * @member {String} html_url
 */
Discussion.prototype['html_url'] = undefined;

/**
 * @member {Number} id
 */
Discussion.prototype['id'] = undefined;

/**
 * @member {Boolean} locked
 */
Discussion.prototype['locked'] = undefined;

/**
 * @member {String} node_id
 */
Discussion.prototype['node_id'] = undefined;

/**
 * @member {Number} number
 */
Discussion.prototype['number'] = undefined;

/**
 * @member {module:model/Reactions} reactions
 */
Discussion.prototype['reactions'] = undefined;

/**
 * @member {String} repository_url
 */
Discussion.prototype['repository_url'] = undefined;

/**
 * The current state of the discussion. `converting` means that the discussion is being converted from an issue. `transferring` means that the discussion is being transferred from another repository.
 * @member {module:model/Discussion.StateEnum} state
 */
Discussion.prototype['state'] = undefined;

/**
 * The reason for the current state
 * @member {module:model/Discussion.StateReasonEnum} state_reason
 */
Discussion.prototype['state_reason'] = undefined;

/**
 * @member {String} timeline_url
 */
Discussion.prototype['timeline_url'] = undefined;

/**
 * @member {String} title
 */
Discussion.prototype['title'] = undefined;

/**
 * @member {Date} updated_at
 */
Discussion.prototype['updated_at'] = undefined;

/**
 * @member {module:model/User} user
 */
Discussion.prototype['user'] = undefined;





/**
 * Allowed values for the <code>author_association</code> property.
 * @enum {String}
 * @readonly
 */
Discussion['AuthorAssociationEnum'] = {

    /**
     * value: "COLLABORATOR"
     * @const
     */
    "COLLABORATOR": "COLLABORATOR",

    /**
     * value: "CONTRIBUTOR"
     * @const
     */
    "CONTRIBUTOR": "CONTRIBUTOR",

    /**
     * value: "FIRST_TIMER"
     * @const
     */
    "FIRST_TIMER": "FIRST_TIMER",

    /**
     * value: "FIRST_TIME_CONTRIBUTOR"
     * @const
     */
    "FIRST_TIME_CONTRIBUTOR": "FIRST_TIME_CONTRIBUTOR",

    /**
     * value: "MANNEQUIN"
     * @const
     */
    "MANNEQUIN": "MANNEQUIN",

    /**
     * value: "MEMBER"
     * @const
     */
    "MEMBER": "MEMBER",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "OWNER"
     * @const
     */
    "OWNER": "OWNER"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Discussion['StateEnum'] = {

    /**
     * value: "open"
     * @const
     */
    "open": "open",

    /**
     * value: "closed"
     * @const
     */
    "closed": "closed",

    /**
     * value: "locked"
     * @const
     */
    "locked": "locked",

    /**
     * value: "converting"
     * @const
     */
    "converting": "converting",

    /**
     * value: "transferring"
     * @const
     */
    "transferring": "transferring"
};


/**
 * Allowed values for the <code>state_reason</code> property.
 * @enum {String}
 * @readonly
 */
Discussion['StateReasonEnum'] = {

    /**
     * value: "resolved"
     * @const
     */
    "resolved": "resolved",

    /**
     * value: "outdated"
     * @const
     */
    "outdated": "outdated",

    /**
     * value: "duplicate"
     * @const
     */
    "duplicate": "duplicate",

    /**
     * value: "reopened"
     * @const
     */
    "reopened": "reopened"
};



export default Discussion;

