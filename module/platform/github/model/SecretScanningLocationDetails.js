/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SecretScanningLocationCommit from './SecretScanningLocationCommit';
import SecretScanningLocationDiscussionBody from './SecretScanningLocationDiscussionBody';
import SecretScanningLocationDiscussionComment from './SecretScanningLocationDiscussionComment';
import SecretScanningLocationDiscussionTitle from './SecretScanningLocationDiscussionTitle';
import SecretScanningLocationIssueBody from './SecretScanningLocationIssueBody';
import SecretScanningLocationIssueComment from './SecretScanningLocationIssueComment';
import SecretScanningLocationIssueTitle from './SecretScanningLocationIssueTitle';
import SecretScanningLocationPullRequestBody from './SecretScanningLocationPullRequestBody';
import SecretScanningLocationPullRequestComment from './SecretScanningLocationPullRequestComment';
import SecretScanningLocationPullRequestReview from './SecretScanningLocationPullRequestReview';
import SecretScanningLocationPullRequestReviewComment from './SecretScanningLocationPullRequestReviewComment';
import SecretScanningLocationPullRequestTitle from './SecretScanningLocationPullRequestTitle';
import SecretScanningLocationWikiCommit from './SecretScanningLocationWikiCommit';

/**
 * The SecretScanningLocationDetails model module.
 * @module model/SecretScanningLocationDetails
 * @version 1.1.4
 */
class SecretScanningLocationDetails {
    /**
     * Constructs a new <code>SecretScanningLocationDetails</code>.
     * @alias module:model/SecretScanningLocationDetails
     * @param {(module:model/SecretScanningLocationCommit|module:model/SecretScanningLocationDiscussionBody|module:model/SecretScanningLocationDiscussionComment|module:model/SecretScanningLocationDiscussionTitle|module:model/SecretScanningLocationIssueBody|module:model/SecretScanningLocationIssueComment|module:model/SecretScanningLocationIssueTitle|module:model/SecretScanningLocationPullRequestBody|module:model/SecretScanningLocationPullRequestComment|module:model/SecretScanningLocationPullRequestReview|module:model/SecretScanningLocationPullRequestReviewComment|module:model/SecretScanningLocationPullRequestTitle|module:model/SecretScanningLocationWikiCommit)} instance The actual instance to initialize SecretScanningLocationDetails.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "SecretScanningLocationCommit") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SecretScanningLocationCommit.validateJSON(instance); // throw an exception if no match
                // create SecretScanningLocationCommit from JS object
                this.actualInstance = SecretScanningLocationCommit.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SecretScanningLocationCommit
            errorMessages.push("Failed to construct SecretScanningLocationCommit: " + err)
        }

        try {
            if (typeof instance === "SecretScanningLocationWikiCommit") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SecretScanningLocationWikiCommit.validateJSON(instance); // throw an exception if no match
                // create SecretScanningLocationWikiCommit from JS object
                this.actualInstance = SecretScanningLocationWikiCommit.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SecretScanningLocationWikiCommit
            errorMessages.push("Failed to construct SecretScanningLocationWikiCommit: " + err)
        }

        try {
            if (typeof instance === "SecretScanningLocationIssueTitle") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SecretScanningLocationIssueTitle.validateJSON(instance); // throw an exception if no match
                // create SecretScanningLocationIssueTitle from JS object
                this.actualInstance = SecretScanningLocationIssueTitle.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SecretScanningLocationIssueTitle
            errorMessages.push("Failed to construct SecretScanningLocationIssueTitle: " + err)
        }

        try {
            if (typeof instance === "SecretScanningLocationIssueBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SecretScanningLocationIssueBody.validateJSON(instance); // throw an exception if no match
                // create SecretScanningLocationIssueBody from JS object
                this.actualInstance = SecretScanningLocationIssueBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SecretScanningLocationIssueBody
            errorMessages.push("Failed to construct SecretScanningLocationIssueBody: " + err)
        }

        try {
            if (typeof instance === "SecretScanningLocationIssueComment") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SecretScanningLocationIssueComment.validateJSON(instance); // throw an exception if no match
                // create SecretScanningLocationIssueComment from JS object
                this.actualInstance = SecretScanningLocationIssueComment.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SecretScanningLocationIssueComment
            errorMessages.push("Failed to construct SecretScanningLocationIssueComment: " + err)
        }

        try {
            if (typeof instance === "SecretScanningLocationDiscussionTitle") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SecretScanningLocationDiscussionTitle.validateJSON(instance); // throw an exception if no match
                // create SecretScanningLocationDiscussionTitle from JS object
                this.actualInstance = SecretScanningLocationDiscussionTitle.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SecretScanningLocationDiscussionTitle
            errorMessages.push("Failed to construct SecretScanningLocationDiscussionTitle: " + err)
        }

        try {
            if (typeof instance === "SecretScanningLocationDiscussionBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SecretScanningLocationDiscussionBody.validateJSON(instance); // throw an exception if no match
                // create SecretScanningLocationDiscussionBody from JS object
                this.actualInstance = SecretScanningLocationDiscussionBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SecretScanningLocationDiscussionBody
            errorMessages.push("Failed to construct SecretScanningLocationDiscussionBody: " + err)
        }

        try {
            if (typeof instance === "SecretScanningLocationDiscussionComment") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SecretScanningLocationDiscussionComment.validateJSON(instance); // throw an exception if no match
                // create SecretScanningLocationDiscussionComment from JS object
                this.actualInstance = SecretScanningLocationDiscussionComment.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SecretScanningLocationDiscussionComment
            errorMessages.push("Failed to construct SecretScanningLocationDiscussionComment: " + err)
        }

        try {
            if (typeof instance === "SecretScanningLocationPullRequestTitle") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SecretScanningLocationPullRequestTitle.validateJSON(instance); // throw an exception if no match
                // create SecretScanningLocationPullRequestTitle from JS object
                this.actualInstance = SecretScanningLocationPullRequestTitle.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SecretScanningLocationPullRequestTitle
            errorMessages.push("Failed to construct SecretScanningLocationPullRequestTitle: " + err)
        }

        try {
            if (typeof instance === "SecretScanningLocationPullRequestBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SecretScanningLocationPullRequestBody.validateJSON(instance); // throw an exception if no match
                // create SecretScanningLocationPullRequestBody from JS object
                this.actualInstance = SecretScanningLocationPullRequestBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SecretScanningLocationPullRequestBody
            errorMessages.push("Failed to construct SecretScanningLocationPullRequestBody: " + err)
        }

        try {
            if (typeof instance === "SecretScanningLocationPullRequestComment") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SecretScanningLocationPullRequestComment.validateJSON(instance); // throw an exception if no match
                // create SecretScanningLocationPullRequestComment from JS object
                this.actualInstance = SecretScanningLocationPullRequestComment.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SecretScanningLocationPullRequestComment
            errorMessages.push("Failed to construct SecretScanningLocationPullRequestComment: " + err)
        }

        try {
            if (typeof instance === "SecretScanningLocationPullRequestReview") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SecretScanningLocationPullRequestReview.validateJSON(instance); // throw an exception if no match
                // create SecretScanningLocationPullRequestReview from JS object
                this.actualInstance = SecretScanningLocationPullRequestReview.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SecretScanningLocationPullRequestReview
            errorMessages.push("Failed to construct SecretScanningLocationPullRequestReview: " + err)
        }

        try {
            if (typeof instance === "SecretScanningLocationPullRequestReviewComment") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SecretScanningLocationPullRequestReviewComment.validateJSON(instance); // throw an exception if no match
                // create SecretScanningLocationPullRequestReviewComment from JS object
                this.actualInstance = SecretScanningLocationPullRequestReviewComment.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SecretScanningLocationPullRequestReviewComment
            errorMessages.push("Failed to construct SecretScanningLocationPullRequestReviewComment: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `SecretScanningLocationDetails` with oneOf schemas SecretScanningLocationCommit, SecretScanningLocationDiscussionBody, SecretScanningLocationDiscussionComment, SecretScanningLocationDiscussionTitle, SecretScanningLocationIssueBody, SecretScanningLocationIssueComment, SecretScanningLocationIssueTitle, SecretScanningLocationPullRequestBody, SecretScanningLocationPullRequestComment, SecretScanningLocationPullRequestReview, SecretScanningLocationPullRequestReviewComment, SecretScanningLocationPullRequestTitle, SecretScanningLocationWikiCommit. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `SecretScanningLocationDetails` with oneOf schemas SecretScanningLocationCommit, SecretScanningLocationDiscussionBody, SecretScanningLocationDiscussionComment, SecretScanningLocationDiscussionTitle, SecretScanningLocationIssueBody, SecretScanningLocationIssueComment, SecretScanningLocationIssueTitle, SecretScanningLocationPullRequestBody, SecretScanningLocationPullRequestComment, SecretScanningLocationPullRequestReview, SecretScanningLocationPullRequestReviewComment, SecretScanningLocationPullRequestTitle, SecretScanningLocationWikiCommit. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>SecretScanningLocationDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SecretScanningLocationDetails} obj Optional instance to populate.
     * @return {module:model/SecretScanningLocationDetails} The populated <code>SecretScanningLocationDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        return new SecretScanningLocationDetails(data);
    }

    /**
     * Gets the actual instance, which can be <code>SecretScanningLocationCommit</code>, <code>SecretScanningLocationDiscussionBody</code>, <code>SecretScanningLocationDiscussionComment</code>, <code>SecretScanningLocationDiscussionTitle</code>, <code>SecretScanningLocationIssueBody</code>, <code>SecretScanningLocationIssueComment</code>, <code>SecretScanningLocationIssueTitle</code>, <code>SecretScanningLocationPullRequestBody</code>, <code>SecretScanningLocationPullRequestComment</code>, <code>SecretScanningLocationPullRequestReview</code>, <code>SecretScanningLocationPullRequestReviewComment</code>, <code>SecretScanningLocationPullRequestTitle</code>, <code>SecretScanningLocationWikiCommit</code>.
     * @return {(module:model/SecretScanningLocationCommit|module:model/SecretScanningLocationDiscussionBody|module:model/SecretScanningLocationDiscussionComment|module:model/SecretScanningLocationDiscussionTitle|module:model/SecretScanningLocationIssueBody|module:model/SecretScanningLocationIssueComment|module:model/SecretScanningLocationIssueTitle|module:model/SecretScanningLocationPullRequestBody|module:model/SecretScanningLocationPullRequestComment|module:model/SecretScanningLocationPullRequestReview|module:model/SecretScanningLocationPullRequestReviewComment|module:model/SecretScanningLocationPullRequestTitle|module:model/SecretScanningLocationWikiCommit)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>SecretScanningLocationCommit</code>, <code>SecretScanningLocationDiscussionBody</code>, <code>SecretScanningLocationDiscussionComment</code>, <code>SecretScanningLocationDiscussionTitle</code>, <code>SecretScanningLocationIssueBody</code>, <code>SecretScanningLocationIssueComment</code>, <code>SecretScanningLocationIssueTitle</code>, <code>SecretScanningLocationPullRequestBody</code>, <code>SecretScanningLocationPullRequestComment</code>, <code>SecretScanningLocationPullRequestReview</code>, <code>SecretScanningLocationPullRequestReviewComment</code>, <code>SecretScanningLocationPullRequestTitle</code>, <code>SecretScanningLocationWikiCommit</code>.
     * @param {(module:model/SecretScanningLocationCommit|module:model/SecretScanningLocationDiscussionBody|module:model/SecretScanningLocationDiscussionComment|module:model/SecretScanningLocationDiscussionTitle|module:model/SecretScanningLocationIssueBody|module:model/SecretScanningLocationIssueComment|module:model/SecretScanningLocationIssueTitle|module:model/SecretScanningLocationPullRequestBody|module:model/SecretScanningLocationPullRequestComment|module:model/SecretScanningLocationPullRequestReview|module:model/SecretScanningLocationPullRequestReviewComment|module:model/SecretScanningLocationPullRequestTitle|module:model/SecretScanningLocationWikiCommit)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = SecretScanningLocationDetails.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of SecretScanningLocationDetails from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/SecretScanningLocationDetails} An instance of SecretScanningLocationDetails.
     */
    static fromJSON = function(json_string){
        return SecretScanningLocationDetails.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The file path of the wiki page
 * @member {String} path
 */
SecretScanningLocationDetails.prototype['path'] = undefined;

/**
 * Line number at which the secret starts in the file
 * @member {Number} start_line
 */
SecretScanningLocationDetails.prototype['start_line'] = undefined;

/**
 * Line number at which the secret ends in the file
 * @member {Number} end_line
 */
SecretScanningLocationDetails.prototype['end_line'] = undefined;

/**
 * The column at which the secret starts within the start line when the file is interpreted as 8-bit ASCII.
 * @member {Number} start_column
 */
SecretScanningLocationDetails.prototype['start_column'] = undefined;

/**
 * The column at which the secret ends within the end line when the file is interpreted as 8-bit ASCII.
 * @member {Number} end_column
 */
SecretScanningLocationDetails.prototype['end_column'] = undefined;

/**
 * SHA-1 hash ID of the associated blob
 * @member {String} blob_sha
 */
SecretScanningLocationDetails.prototype['blob_sha'] = undefined;

/**
 * The API URL to get the associated blob resource
 * @member {String} blob_url
 */
SecretScanningLocationDetails.prototype['blob_url'] = undefined;

/**
 * SHA-1 hash ID of the associated commit
 * @member {String} commit_sha
 */
SecretScanningLocationDetails.prototype['commit_sha'] = undefined;

/**
 * The GitHub URL to get the associated wiki commit
 * @member {String} commit_url
 */
SecretScanningLocationDetails.prototype['commit_url'] = undefined;

/**
 * The GitHub URL to get the associated wiki page
 * @member {String} page_url
 */
SecretScanningLocationDetails.prototype['page_url'] = undefined;

/**
 * The API URL to get the issue where the secret was detected.
 * @member {String} issue_title_url
 */
SecretScanningLocationDetails.prototype['issue_title_url'] = undefined;

/**
 * The API URL to get the issue where the secret was detected.
 * @member {String} issue_body_url
 */
SecretScanningLocationDetails.prototype['issue_body_url'] = undefined;

/**
 * The API URL to get the issue comment where the secret was detected.
 * @member {String} issue_comment_url
 */
SecretScanningLocationDetails.prototype['issue_comment_url'] = undefined;

/**
 * The URL to the discussion where the secret was detected.
 * @member {String} discussion_title_url
 */
SecretScanningLocationDetails.prototype['discussion_title_url'] = undefined;

/**
 * The URL to the discussion where the secret was detected.
 * @member {String} discussion_body_url
 */
SecretScanningLocationDetails.prototype['discussion_body_url'] = undefined;

/**
 * The API URL to get the discussion comment where the secret was detected.
 * @member {String} discussion_comment_url
 */
SecretScanningLocationDetails.prototype['discussion_comment_url'] = undefined;

/**
 * The API URL to get the pull request where the secret was detected.
 * @member {String} pull_request_title_url
 */
SecretScanningLocationDetails.prototype['pull_request_title_url'] = undefined;

/**
 * The API URL to get the pull request where the secret was detected.
 * @member {String} pull_request_body_url
 */
SecretScanningLocationDetails.prototype['pull_request_body_url'] = undefined;

/**
 * The API URL to get the pull request comment where the secret was detected.
 * @member {String} pull_request_comment_url
 */
SecretScanningLocationDetails.prototype['pull_request_comment_url'] = undefined;

/**
 * The API URL to get the pull request review where the secret was detected.
 * @member {String} pull_request_review_url
 */
SecretScanningLocationDetails.prototype['pull_request_review_url'] = undefined;

/**
 * The API URL to get the pull request review comment where the secret was detected.
 * @member {String} pull_request_review_comment_url
 */
SecretScanningLocationDetails.prototype['pull_request_review_comment_url'] = undefined;


SecretScanningLocationDetails.OneOf = ["SecretScanningLocationCommit", "SecretScanningLocationDiscussionBody", "SecretScanningLocationDiscussionComment", "SecretScanningLocationDiscussionTitle", "SecretScanningLocationIssueBody", "SecretScanningLocationIssueComment", "SecretScanningLocationIssueTitle", "SecretScanningLocationPullRequestBody", "SecretScanningLocationPullRequestComment", "SecretScanningLocationPullRequestReview", "SecretScanningLocationPullRequestReviewComment", "SecretScanningLocationPullRequestTitle", "SecretScanningLocationWikiCommit"];

export default SecretScanningLocationDetails;

