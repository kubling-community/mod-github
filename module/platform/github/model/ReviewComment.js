/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthorAssociation from './AuthorAssociation';
import NullableSimpleUser from './NullableSimpleUser';
import ReactionRollup from './ReactionRollup';
import ReviewCommentLinks from './ReviewCommentLinks';

/**
 * The ReviewComment model module.
 * @module model/ReviewComment
 * @version 1.1.4
 */
class ReviewComment {
    /**
     * Constructs a new <code>ReviewComment</code>.
     * Legacy Review Comment
     * @alias module:model/ReviewComment
     * @param url {String} 
     * @param pullRequestReviewId {Number} 
     * @param id {Number} 
     * @param nodeId {String} 
     * @param diffHunk {String} 
     * @param path {String} 
     * @param position {Number} 
     * @param originalPosition {Number} 
     * @param commitId {String} 
     * @param originalCommitId {String} 
     * @param user {module:model/NullableSimpleUser} 
     * @param body {String} 
     * @param createdAt {Date} 
     * @param updatedAt {Date} 
     * @param htmlUrl {String} 
     * @param pullRequestUrl {String} 
     * @param authorAssociation {module:model/AuthorAssociation} 
     * @param links {module:model/ReviewCommentLinks} 
     */
    constructor(url, pullRequestReviewId, id, nodeId, diffHunk, path, position, originalPosition, commitId, originalCommitId, user, body, createdAt, updatedAt, htmlUrl, pullRequestUrl, authorAssociation, links) { 
        
        ReviewComment.initialize(this, url, pullRequestReviewId, id, nodeId, diffHunk, path, position, originalPosition, commitId, originalCommitId, user, body, createdAt, updatedAt, htmlUrl, pullRequestUrl, authorAssociation, links);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, url, pullRequestReviewId, id, nodeId, diffHunk, path, position, originalPosition, commitId, originalCommitId, user, body, createdAt, updatedAt, htmlUrl, pullRequestUrl, authorAssociation, links) { 
        obj['url'] = url;
        obj['pull_request_review_id'] = pullRequestReviewId;
        obj['id'] = id;
        obj['node_id'] = nodeId;
        obj['diff_hunk'] = diffHunk;
        obj['path'] = path;
        obj['position'] = position;
        obj['original_position'] = originalPosition;
        obj['commit_id'] = commitId;
        obj['original_commit_id'] = originalCommitId;
        obj['user'] = user;
        obj['body'] = body;
        obj['created_at'] = createdAt;
        obj['updated_at'] = updatedAt;
        obj['html_url'] = htmlUrl;
        obj['pull_request_url'] = pullRequestUrl;
        obj['author_association'] = authorAssociation;
        obj['_links'] = links;
    }

    /**
     * Constructs a <code>ReviewComment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReviewComment} obj Optional instance to populate.
     * @return {module:model/ReviewComment} The populated <code>ReviewComment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReviewComment();

            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('pull_request_review_id')) {
                obj['pull_request_review_id'] = ApiClient.convertToType(data['pull_request_review_id'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('diff_hunk')) {
                obj['diff_hunk'] = ApiClient.convertToType(data['diff_hunk'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'Number');
            }
            if (data.hasOwnProperty('original_position')) {
                obj['original_position'] = ApiClient.convertToType(data['original_position'], 'Number');
            }
            if (data.hasOwnProperty('commit_id')) {
                obj['commit_id'] = ApiClient.convertToType(data['commit_id'], 'String');
            }
            if (data.hasOwnProperty('original_commit_id')) {
                obj['original_commit_id'] = ApiClient.convertToType(data['original_commit_id'], 'String');
            }
            if (data.hasOwnProperty('in_reply_to_id')) {
                obj['in_reply_to_id'] = ApiClient.convertToType(data['in_reply_to_id'], 'Number');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = NullableSimpleUser.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('pull_request_url')) {
                obj['pull_request_url'] = ApiClient.convertToType(data['pull_request_url'], 'String');
            }
            if (data.hasOwnProperty('author_association')) {
                obj['author_association'] = AuthorAssociation.constructFromObject(data['author_association']);
            }
            if (data.hasOwnProperty('_links')) {
                obj['_links'] = ReviewCommentLinks.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('body_text')) {
                obj['body_text'] = ApiClient.convertToType(data['body_text'], 'String');
            }
            if (data.hasOwnProperty('body_html')) {
                obj['body_html'] = ApiClient.convertToType(data['body_html'], 'String');
            }
            if (data.hasOwnProperty('reactions')) {
                obj['reactions'] = ReactionRollup.constructFromObject(data['reactions']);
            }
            if (data.hasOwnProperty('side')) {
                obj['side'] = ApiClient.convertToType(data['side'], 'String');
            }
            if (data.hasOwnProperty('start_side')) {
                obj['start_side'] = ApiClient.convertToType(data['start_side'], 'String');
            }
            if (data.hasOwnProperty('line')) {
                obj['line'] = ApiClient.convertToType(data['line'], 'Number');
            }
            if (data.hasOwnProperty('original_line')) {
                obj['original_line'] = ApiClient.convertToType(data['original_line'], 'Number');
            }
            if (data.hasOwnProperty('start_line')) {
                obj['start_line'] = ApiClient.convertToType(data['start_line'], 'Number');
            }
            if (data.hasOwnProperty('original_start_line')) {
                obj['original_start_line'] = ApiClient.convertToType(data['original_start_line'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReviewComment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReviewComment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReviewComment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // ensure the json data is a string
        if (data['diff_hunk'] && !(typeof data['diff_hunk'] === 'string' || data['diff_hunk'] instanceof String)) {
            throw new Error("Expected the field `diff_hunk` to be a primitive type in the JSON string but got " + data['diff_hunk']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['commit_id'] && !(typeof data['commit_id'] === 'string' || data['commit_id'] instanceof String)) {
            throw new Error("Expected the field `commit_id` to be a primitive type in the JSON string but got " + data['commit_id']);
        }
        // ensure the json data is a string
        if (data['original_commit_id'] && !(typeof data['original_commit_id'] === 'string' || data['original_commit_id'] instanceof String)) {
            throw new Error("Expected the field `original_commit_id` to be a primitive type in the JSON string but got " + data['original_commit_id']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          NullableSimpleUser.validateJSON(data['user']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['pull_request_url'] && !(typeof data['pull_request_url'] === 'string' || data['pull_request_url'] instanceof String)) {
            throw new Error("Expected the field `pull_request_url` to be a primitive type in the JSON string but got " + data['pull_request_url']);
        }
        // validate the optional field `_links`
        if (data['_links']) { // data not null
          ReviewCommentLinks.validateJSON(data['_links']);
        }
        // ensure the json data is a string
        if (data['body_text'] && !(typeof data['body_text'] === 'string' || data['body_text'] instanceof String)) {
            throw new Error("Expected the field `body_text` to be a primitive type in the JSON string but got " + data['body_text']);
        }
        // ensure the json data is a string
        if (data['body_html'] && !(typeof data['body_html'] === 'string' || data['body_html'] instanceof String)) {
            throw new Error("Expected the field `body_html` to be a primitive type in the JSON string but got " + data['body_html']);
        }
        // validate the optional field `reactions`
        if (data['reactions']) { // data not null
          ReactionRollup.validateJSON(data['reactions']);
        }
        // ensure the json data is a string
        if (data['side'] && !(typeof data['side'] === 'string' || data['side'] instanceof String)) {
            throw new Error("Expected the field `side` to be a primitive type in the JSON string but got " + data['side']);
        }
        // ensure the json data is a string
        if (data['start_side'] && !(typeof data['start_side'] === 'string' || data['start_side'] instanceof String)) {
            throw new Error("Expected the field `start_side` to be a primitive type in the JSON string but got " + data['start_side']);
        }

        return true;
    }


}

ReviewComment.RequiredProperties = ["url", "pull_request_review_id", "id", "node_id", "diff_hunk", "path", "position", "original_position", "commit_id", "original_commit_id", "user", "body", "created_at", "updated_at", "html_url", "pull_request_url", "author_association", "_links"];

/**
 * @member {String} url
 */
ReviewComment.prototype['url'] = undefined;

/**
 * @member {Number} pull_request_review_id
 */
ReviewComment.prototype['pull_request_review_id'] = undefined;

/**
 * @member {Number} id
 */
ReviewComment.prototype['id'] = undefined;

/**
 * @member {String} node_id
 */
ReviewComment.prototype['node_id'] = undefined;

/**
 * @member {String} diff_hunk
 */
ReviewComment.prototype['diff_hunk'] = undefined;

/**
 * @member {String} path
 */
ReviewComment.prototype['path'] = undefined;

/**
 * @member {Number} position
 */
ReviewComment.prototype['position'] = undefined;

/**
 * @member {Number} original_position
 */
ReviewComment.prototype['original_position'] = undefined;

/**
 * @member {String} commit_id
 */
ReviewComment.prototype['commit_id'] = undefined;

/**
 * @member {String} original_commit_id
 */
ReviewComment.prototype['original_commit_id'] = undefined;

/**
 * @member {Number} in_reply_to_id
 */
ReviewComment.prototype['in_reply_to_id'] = undefined;

/**
 * @member {module:model/NullableSimpleUser} user
 */
ReviewComment.prototype['user'] = undefined;

/**
 * @member {String} body
 */
ReviewComment.prototype['body'] = undefined;

/**
 * @member {Date} created_at
 */
ReviewComment.prototype['created_at'] = undefined;

/**
 * @member {Date} updated_at
 */
ReviewComment.prototype['updated_at'] = undefined;

/**
 * @member {String} html_url
 */
ReviewComment.prototype['html_url'] = undefined;

/**
 * @member {String} pull_request_url
 */
ReviewComment.prototype['pull_request_url'] = undefined;

/**
 * @member {module:model/AuthorAssociation} author_association
 */
ReviewComment.prototype['author_association'] = undefined;

/**
 * @member {module:model/ReviewCommentLinks} _links
 */
ReviewComment.prototype['_links'] = undefined;

/**
 * @member {String} body_text
 */
ReviewComment.prototype['body_text'] = undefined;

/**
 * @member {String} body_html
 */
ReviewComment.prototype['body_html'] = undefined;

/**
 * @member {module:model/ReactionRollup} reactions
 */
ReviewComment.prototype['reactions'] = undefined;

/**
 * The side of the first line of the range for a multi-line comment.
 * @member {module:model/ReviewComment.SideEnum} side
 * @default 'RIGHT'
 */
ReviewComment.prototype['side'] = 'RIGHT';

/**
 * The side of the first line of the range for a multi-line comment.
 * @member {module:model/ReviewComment.StartSideEnum} start_side
 * @default 'RIGHT'
 */
ReviewComment.prototype['start_side'] = 'RIGHT';

/**
 * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
 * @member {Number} line
 */
ReviewComment.prototype['line'] = undefined;

/**
 * The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
 * @member {Number} original_line
 */
ReviewComment.prototype['original_line'] = undefined;

/**
 * The first line of the range for a multi-line comment.
 * @member {Number} start_line
 */
ReviewComment.prototype['start_line'] = undefined;

/**
 * The original first line of the range for a multi-line comment.
 * @member {Number} original_start_line
 */
ReviewComment.prototype['original_start_line'] = undefined;





/**
 * Allowed values for the <code>side</code> property.
 * @enum {String}
 * @readonly
 */
ReviewComment['SideEnum'] = {

    /**
     * value: "LEFT"
     * @const
     */
    "LEFT": "LEFT",

    /**
     * value: "RIGHT"
     * @const
     */
    "RIGHT": "RIGHT"
};


/**
 * Allowed values for the <code>start_side</code> property.
 * @enum {String}
 * @readonly
 */
ReviewComment['StartSideEnum'] = {

    /**
     * value: "LEFT"
     * @const
     */
    "LEFT": "LEFT",

    /**
     * value: "RIGHT"
     * @const
     */
    "RIGHT": "RIGHT"
};



export default ReviewComment;

