/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CodeScanningAnalysisTool from './CodeScanningAnalysisTool';

/**
 * The CodeScanningAnalysis model module.
 * @module model/CodeScanningAnalysis
 * @version 1.1.4
 */
class CodeScanningAnalysis {
    /**
     * Constructs a new <code>CodeScanningAnalysis</code>.
     * @alias module:model/CodeScanningAnalysis
     * @param ref {String} The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`, `refs/heads/<branch name>` or simply `<branch name>`.
     * @param commitSha {String} The SHA of the commit to which the analysis you are uploading relates.
     * @param analysisKey {String} Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
     * @param environment {String} Identifies the variable values associated with the environment in which this analysis was performed.
     * @param error {String} 
     * @param createdAt {Date} The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @param resultsCount {Number} The total number of results in the analysis.
     * @param rulesCount {Number} The total number of rules used in the analysis.
     * @param id {Number} Unique identifier for this analysis.
     * @param url {String} The REST API URL of the analysis resource.
     * @param sarifId {String} An identifier for the upload.
     * @param tool {module:model/CodeScanningAnalysisTool} 
     * @param deletable {Boolean} 
     * @param warning {String} Warning generated when processing the analysis
     */
    constructor(ref, commitSha, analysisKey, environment, error, createdAt, resultsCount, rulesCount, id, url, sarifId, tool, deletable, warning) { 
        
        CodeScanningAnalysis.initialize(this, ref, commitSha, analysisKey, environment, error, createdAt, resultsCount, rulesCount, id, url, sarifId, tool, deletable, warning);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ref, commitSha, analysisKey, environment, error, createdAt, resultsCount, rulesCount, id, url, sarifId, tool, deletable, warning) { 
        obj['ref'] = ref;
        obj['commit_sha'] = commitSha;
        obj['analysis_key'] = analysisKey;
        obj['environment'] = environment;
        obj['error'] = error;
        obj['created_at'] = createdAt;
        obj['results_count'] = resultsCount;
        obj['rules_count'] = rulesCount;
        obj['id'] = id;
        obj['url'] = url;
        obj['sarif_id'] = sarifId;
        obj['tool'] = tool;
        obj['deletable'] = deletable;
        obj['warning'] = warning;
    }

    /**
     * Constructs a <code>CodeScanningAnalysis</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CodeScanningAnalysis} obj Optional instance to populate.
     * @return {module:model/CodeScanningAnalysis} The populated <code>CodeScanningAnalysis</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CodeScanningAnalysis();

            if (data.hasOwnProperty('ref')) {
                obj['ref'] = ApiClient.convertToType(data['ref'], 'String');
            }
            if (data.hasOwnProperty('commit_sha')) {
                obj['commit_sha'] = ApiClient.convertToType(data['commit_sha'], 'String');
            }
            if (data.hasOwnProperty('analysis_key')) {
                obj['analysis_key'] = ApiClient.convertToType(data['analysis_key'], 'String');
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = ApiClient.convertToType(data['environment'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('results_count')) {
                obj['results_count'] = ApiClient.convertToType(data['results_count'], 'Number');
            }
            if (data.hasOwnProperty('rules_count')) {
                obj['rules_count'] = ApiClient.convertToType(data['rules_count'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('sarif_id')) {
                obj['sarif_id'] = ApiClient.convertToType(data['sarif_id'], 'String');
            }
            if (data.hasOwnProperty('tool')) {
                obj['tool'] = CodeScanningAnalysisTool.constructFromObject(data['tool']);
            }
            if (data.hasOwnProperty('deletable')) {
                obj['deletable'] = ApiClient.convertToType(data['deletable'], 'Boolean');
            }
            if (data.hasOwnProperty('warning')) {
                obj['warning'] = ApiClient.convertToType(data['warning'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CodeScanningAnalysis</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CodeScanningAnalysis</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CodeScanningAnalysis.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ref'] && !(typeof data['ref'] === 'string' || data['ref'] instanceof String)) {
            throw new Error("Expected the field `ref` to be a primitive type in the JSON string but got " + data['ref']);
        }
        // ensure the json data is a string
        if (data['commit_sha'] && !(typeof data['commit_sha'] === 'string' || data['commit_sha'] instanceof String)) {
            throw new Error("Expected the field `commit_sha` to be a primitive type in the JSON string but got " + data['commit_sha']);
        }
        // ensure the json data is a string
        if (data['analysis_key'] && !(typeof data['analysis_key'] === 'string' || data['analysis_key'] instanceof String)) {
            throw new Error("Expected the field `analysis_key` to be a primitive type in the JSON string but got " + data['analysis_key']);
        }
        // ensure the json data is a string
        if (data['environment'] && !(typeof data['environment'] === 'string' || data['environment'] instanceof String)) {
            throw new Error("Expected the field `environment` to be a primitive type in the JSON string but got " + data['environment']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['sarif_id'] && !(typeof data['sarif_id'] === 'string' || data['sarif_id'] instanceof String)) {
            throw new Error("Expected the field `sarif_id` to be a primitive type in the JSON string but got " + data['sarif_id']);
        }
        // validate the optional field `tool`
        if (data['tool']) { // data not null
          CodeScanningAnalysisTool.validateJSON(data['tool']);
        }
        // ensure the json data is a string
        if (data['warning'] && !(typeof data['warning'] === 'string' || data['warning'] instanceof String)) {
            throw new Error("Expected the field `warning` to be a primitive type in the JSON string but got " + data['warning']);
        }

        return true;
    }


}

CodeScanningAnalysis.RequiredProperties = ["ref", "commit_sha", "analysis_key", "environment", "error", "created_at", "results_count", "rules_count", "id", "url", "sarif_id", "tool", "deletable", "warning"];

/**
 * The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`, `refs/heads/<branch name>` or simply `<branch name>`.
 * @member {String} ref
 */
CodeScanningAnalysis.prototype['ref'] = undefined;

/**
 * The SHA of the commit to which the analysis you are uploading relates.
 * @member {String} commit_sha
 */
CodeScanningAnalysis.prototype['commit_sha'] = undefined;

/**
 * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
 * @member {String} analysis_key
 */
CodeScanningAnalysis.prototype['analysis_key'] = undefined;

/**
 * Identifies the variable values associated with the environment in which this analysis was performed.
 * @member {String} environment
 */
CodeScanningAnalysis.prototype['environment'] = undefined;

/**
 * Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.
 * @member {String} category
 */
CodeScanningAnalysis.prototype['category'] = undefined;

/**
 * @member {String} error
 */
CodeScanningAnalysis.prototype['error'] = undefined;

/**
 * The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @member {Date} created_at
 */
CodeScanningAnalysis.prototype['created_at'] = undefined;

/**
 * The total number of results in the analysis.
 * @member {Number} results_count
 */
CodeScanningAnalysis.prototype['results_count'] = undefined;

/**
 * The total number of rules used in the analysis.
 * @member {Number} rules_count
 */
CodeScanningAnalysis.prototype['rules_count'] = undefined;

/**
 * Unique identifier for this analysis.
 * @member {Number} id
 */
CodeScanningAnalysis.prototype['id'] = undefined;

/**
 * The REST API URL of the analysis resource.
 * @member {String} url
 */
CodeScanningAnalysis.prototype['url'] = undefined;

/**
 * An identifier for the upload.
 * @member {String} sarif_id
 */
CodeScanningAnalysis.prototype['sarif_id'] = undefined;

/**
 * @member {module:model/CodeScanningAnalysisTool} tool
 */
CodeScanningAnalysis.prototype['tool'] = undefined;

/**
 * @member {Boolean} deletable
 */
CodeScanningAnalysis.prototype['deletable'] = undefined;

/**
 * Warning generated when processing the analysis
 * @member {String} warning
 */
CodeScanningAnalysis.prototype['warning'] = undefined;






export default CodeScanningAnalysis;

