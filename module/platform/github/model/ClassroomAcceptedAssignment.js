/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SimpleClassroomAssignment from './SimpleClassroomAssignment';
import SimpleClassroomRepository from './SimpleClassroomRepository';
import SimpleClassroomUser from './SimpleClassroomUser';

/**
 * The ClassroomAcceptedAssignment model module.
 * @module model/ClassroomAcceptedAssignment
 * @version 1.1.4
 */
class ClassroomAcceptedAssignment {
    /**
     * Constructs a new <code>ClassroomAcceptedAssignment</code>.
     * A GitHub Classroom accepted assignment
     * @alias module:model/ClassroomAcceptedAssignment
     * @param id {Number} Unique identifier of the repository.
     * @param submitted {Boolean} Whether an accepted assignment has been submitted.
     * @param passing {Boolean} Whether a submission passed.
     * @param commitCount {Number} Count of student commits.
     * @param grade {String} Most recent grade.
     * @param students {Array.<module:model/SimpleClassroomUser>} 
     * @param repository {module:model/SimpleClassroomRepository} 
     * @param assignment {module:model/SimpleClassroomAssignment} 
     */
    constructor(id, submitted, passing, commitCount, grade, students, repository, assignment) { 
        
        ClassroomAcceptedAssignment.initialize(this, id, submitted, passing, commitCount, grade, students, repository, assignment);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, submitted, passing, commitCount, grade, students, repository, assignment) { 
        obj['id'] = id;
        obj['submitted'] = submitted;
        obj['passing'] = passing;
        obj['commit_count'] = commitCount;
        obj['grade'] = grade;
        obj['students'] = students;
        obj['repository'] = repository;
        obj['assignment'] = assignment;
    }

    /**
     * Constructs a <code>ClassroomAcceptedAssignment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClassroomAcceptedAssignment} obj Optional instance to populate.
     * @return {module:model/ClassroomAcceptedAssignment} The populated <code>ClassroomAcceptedAssignment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClassroomAcceptedAssignment();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('submitted')) {
                obj['submitted'] = ApiClient.convertToType(data['submitted'], 'Boolean');
            }
            if (data.hasOwnProperty('passing')) {
                obj['passing'] = ApiClient.convertToType(data['passing'], 'Boolean');
            }
            if (data.hasOwnProperty('commit_count')) {
                obj['commit_count'] = ApiClient.convertToType(data['commit_count'], 'Number');
            }
            if (data.hasOwnProperty('grade')) {
                obj['grade'] = ApiClient.convertToType(data['grade'], 'String');
            }
            if (data.hasOwnProperty('students')) {
                obj['students'] = ApiClient.convertToType(data['students'], [SimpleClassroomUser]);
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = SimpleClassroomRepository.constructFromObject(data['repository']);
            }
            if (data.hasOwnProperty('assignment')) {
                obj['assignment'] = SimpleClassroomAssignment.constructFromObject(data['assignment']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClassroomAcceptedAssignment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClassroomAcceptedAssignment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ClassroomAcceptedAssignment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['grade'] && !(typeof data['grade'] === 'string' || data['grade'] instanceof String)) {
            throw new Error("Expected the field `grade` to be a primitive type in the JSON string but got " + data['grade']);
        }
        if (data['students']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['students'])) {
                throw new Error("Expected the field `students` to be an array in the JSON data but got " + data['students']);
            }
            // validate the optional field `students` (array)
            for (const item of data['students']) {
                SimpleClassroomUser.validateJSON(item);
            };
        }
        // validate the optional field `repository`
        if (data['repository']) { // data not null
          SimpleClassroomRepository.validateJSON(data['repository']);
        }
        // validate the optional field `assignment`
        if (data['assignment']) { // data not null
          SimpleClassroomAssignment.validateJSON(data['assignment']);
        }

        return true;
    }


}

ClassroomAcceptedAssignment.RequiredProperties = ["id", "submitted", "passing", "commit_count", "grade", "students", "repository", "assignment"];

/**
 * Unique identifier of the repository.
 * @member {Number} id
 */
ClassroomAcceptedAssignment.prototype['id'] = undefined;

/**
 * Whether an accepted assignment has been submitted.
 * @member {Boolean} submitted
 */
ClassroomAcceptedAssignment.prototype['submitted'] = undefined;

/**
 * Whether a submission passed.
 * @member {Boolean} passing
 */
ClassroomAcceptedAssignment.prototype['passing'] = undefined;

/**
 * Count of student commits.
 * @member {Number} commit_count
 */
ClassroomAcceptedAssignment.prototype['commit_count'] = undefined;

/**
 * Most recent grade.
 * @member {String} grade
 */
ClassroomAcceptedAssignment.prototype['grade'] = undefined;

/**
 * @member {Array.<module:model/SimpleClassroomUser>} students
 */
ClassroomAcceptedAssignment.prototype['students'] = undefined;

/**
 * @member {module:model/SimpleClassroomRepository} repository
 */
ClassroomAcceptedAssignment.prototype['repository'] = undefined;

/**
 * @member {module:model/SimpleClassroomAssignment} assignment
 */
ClassroomAcceptedAssignment.prototype['assignment'] = undefined;






export default ClassroomAcceptedAssignment;

