/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomPropertyValueValue from './CustomPropertyValueValue';

/**
 * The CustomPropertyValue model module.
 * @module model/CustomPropertyValue
 * @version 1.1.4
 */
class CustomPropertyValue {
    /**
     * Constructs a new <code>CustomPropertyValue</code>.
     * Custom property name and associated value
     * @alias module:model/CustomPropertyValue
     * @param propertyName {String} The name of the property
     * @param value {module:model/CustomPropertyValueValue} 
     */
    constructor(propertyName, value) { 
        
        CustomPropertyValue.initialize(this, propertyName, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, propertyName, value) { 
        obj['property_name'] = propertyName;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>CustomPropertyValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomPropertyValue} obj Optional instance to populate.
     * @return {module:model/CustomPropertyValue} The populated <code>CustomPropertyValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomPropertyValue();

            if (data.hasOwnProperty('property_name')) {
                obj['property_name'] = ApiClient.convertToType(data['property_name'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = CustomPropertyValueValue.constructFromObject(data['value']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomPropertyValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomPropertyValue</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CustomPropertyValue.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['property_name'] && !(typeof data['property_name'] === 'string' || data['property_name'] instanceof String)) {
            throw new Error("Expected the field `property_name` to be a primitive type in the JSON string but got " + data['property_name']);
        }
        // validate the optional field `value`
        if (data['value']) { // data not null
          CustomPropertyValueValue.validateJSON(data['value']);
        }

        return true;
    }


}

CustomPropertyValue.RequiredProperties = ["property_name", "value"];

/**
 * The name of the property
 * @member {String} property_name
 */
CustomPropertyValue.prototype['property_name'] = undefined;

/**
 * @member {module:model/CustomPropertyValueValue} value
 */
CustomPropertyValue.prototype['value'] = undefined;






export default CustomPropertyValue;

