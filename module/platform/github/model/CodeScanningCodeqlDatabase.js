/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SimpleUser from './SimpleUser';

/**
 * The CodeScanningCodeqlDatabase model module.
 * @module model/CodeScanningCodeqlDatabase
 * @version 1.1.4
 */
class CodeScanningCodeqlDatabase {
    /**
     * Constructs a new <code>CodeScanningCodeqlDatabase</code>.
     * A CodeQL database.
     * @alias module:model/CodeScanningCodeqlDatabase
     * @param id {Number} The ID of the CodeQL database.
     * @param name {String} The name of the CodeQL database.
     * @param language {String} The language of the CodeQL database.
     * @param uploader {module:model/SimpleUser} 
     * @param contentType {String} The MIME type of the CodeQL database file.
     * @param size {Number} The size of the CodeQL database file in bytes.
     * @param createdAt {Date} The date and time at which the CodeQL database was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
     * @param updatedAt {Date} The date and time at which the CodeQL database was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
     * @param url {String} The URL at which to download the CodeQL database. The `Accept` header must be set to the value of the `content_type` property.
     */
    constructor(id, name, language, uploader, contentType, size, createdAt, updatedAt, url) { 
        
        CodeScanningCodeqlDatabase.initialize(this, id, name, language, uploader, contentType, size, createdAt, updatedAt, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, language, uploader, contentType, size, createdAt, updatedAt, url) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['language'] = language;
        obj['uploader'] = uploader;
        obj['content_type'] = contentType;
        obj['size'] = size;
        obj['created_at'] = createdAt;
        obj['updated_at'] = updatedAt;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>CodeScanningCodeqlDatabase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CodeScanningCodeqlDatabase} obj Optional instance to populate.
     * @return {module:model/CodeScanningCodeqlDatabase} The populated <code>CodeScanningCodeqlDatabase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CodeScanningCodeqlDatabase();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('uploader')) {
                obj['uploader'] = SimpleUser.constructFromObject(data['uploader']);
            }
            if (data.hasOwnProperty('content_type')) {
                obj['content_type'] = ApiClient.convertToType(data['content_type'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('commit_oid')) {
                obj['commit_oid'] = ApiClient.convertToType(data['commit_oid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CodeScanningCodeqlDatabase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CodeScanningCodeqlDatabase</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CodeScanningCodeqlDatabase.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // validate the optional field `uploader`
        if (data['uploader']) { // data not null
          SimpleUser.validateJSON(data['uploader']);
        }
        // ensure the json data is a string
        if (data['content_type'] && !(typeof data['content_type'] === 'string' || data['content_type'] instanceof String)) {
            throw new Error("Expected the field `content_type` to be a primitive type in the JSON string but got " + data['content_type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['commit_oid'] && !(typeof data['commit_oid'] === 'string' || data['commit_oid'] instanceof String)) {
            throw new Error("Expected the field `commit_oid` to be a primitive type in the JSON string but got " + data['commit_oid']);
        }

        return true;
    }


}

CodeScanningCodeqlDatabase.RequiredProperties = ["id", "name", "language", "uploader", "content_type", "size", "created_at", "updated_at", "url"];

/**
 * The ID of the CodeQL database.
 * @member {Number} id
 */
CodeScanningCodeqlDatabase.prototype['id'] = undefined;

/**
 * The name of the CodeQL database.
 * @member {String} name
 */
CodeScanningCodeqlDatabase.prototype['name'] = undefined;

/**
 * The language of the CodeQL database.
 * @member {String} language
 */
CodeScanningCodeqlDatabase.prototype['language'] = undefined;

/**
 * @member {module:model/SimpleUser} uploader
 */
CodeScanningCodeqlDatabase.prototype['uploader'] = undefined;

/**
 * The MIME type of the CodeQL database file.
 * @member {String} content_type
 */
CodeScanningCodeqlDatabase.prototype['content_type'] = undefined;

/**
 * The size of the CodeQL database file in bytes.
 * @member {Number} size
 */
CodeScanningCodeqlDatabase.prototype['size'] = undefined;

/**
 * The date and time at which the CodeQL database was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
 * @member {Date} created_at
 */
CodeScanningCodeqlDatabase.prototype['created_at'] = undefined;

/**
 * The date and time at which the CodeQL database was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
 * @member {Date} updated_at
 */
CodeScanningCodeqlDatabase.prototype['updated_at'] = undefined;

/**
 * The URL at which to download the CodeQL database. The `Accept` header must be set to the value of the `content_type` property.
 * @member {String} url
 */
CodeScanningCodeqlDatabase.prototype['url'] = undefined;

/**
 * The commit SHA of the repository at the time the CodeQL database was created.
 * @member {String} commit_oid
 */
CodeScanningCodeqlDatabase.prototype['commit_oid'] = undefined;






export default CodeScanningCodeqlDatabase;

