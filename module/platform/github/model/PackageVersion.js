/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PackageVersionMetadata from './PackageVersionMetadata';

/**
 * The PackageVersion model module.
 * @module model/PackageVersion
 * @version 1.1.4
 */
class PackageVersion {
    /**
     * Constructs a new <code>PackageVersion</code>.
     * A version of a software package
     * @alias module:model/PackageVersion
     * @param id {Number} Unique identifier of the package version.
     * @param name {String} The name of the package version.
     * @param url {String} 
     * @param packageHtmlUrl {String} 
     * @param createdAt {Date} 
     * @param updatedAt {Date} 
     */
    constructor(id, name, url, packageHtmlUrl, createdAt, updatedAt) { 
        
        PackageVersion.initialize(this, id, name, url, packageHtmlUrl, createdAt, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, url, packageHtmlUrl, createdAt, updatedAt) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['url'] = url;
        obj['package_html_url'] = packageHtmlUrl;
        obj['created_at'] = createdAt;
        obj['updated_at'] = updatedAt;
    }

    /**
     * Constructs a <code>PackageVersion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PackageVersion} obj Optional instance to populate.
     * @return {module:model/PackageVersion} The populated <code>PackageVersion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PackageVersion();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('package_html_url')) {
                obj['package_html_url'] = ApiClient.convertToType(data['package_html_url'], 'String');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('deleted_at')) {
                obj['deleted_at'] = ApiClient.convertToType(data['deleted_at'], 'Date');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = PackageVersionMetadata.constructFromObject(data['metadata']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PackageVersion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PackageVersion</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PackageVersion.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['package_html_url'] && !(typeof data['package_html_url'] === 'string' || data['package_html_url'] instanceof String)) {
            throw new Error("Expected the field `package_html_url` to be a primitive type in the JSON string but got " + data['package_html_url']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['license'] && !(typeof data['license'] === 'string' || data['license'] instanceof String)) {
            throw new Error("Expected the field `license` to be a primitive type in the JSON string but got " + data['license']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          PackageVersionMetadata.validateJSON(data['metadata']);
        }

        return true;
    }


}

PackageVersion.RequiredProperties = ["id", "name", "url", "package_html_url", "created_at", "updated_at"];

/**
 * Unique identifier of the package version.
 * @member {Number} id
 */
PackageVersion.prototype['id'] = undefined;

/**
 * The name of the package version.
 * @member {String} name
 */
PackageVersion.prototype['name'] = undefined;

/**
 * @member {String} url
 */
PackageVersion.prototype['url'] = undefined;

/**
 * @member {String} package_html_url
 */
PackageVersion.prototype['package_html_url'] = undefined;

/**
 * @member {String} html_url
 */
PackageVersion.prototype['html_url'] = undefined;

/**
 * @member {String} license
 */
PackageVersion.prototype['license'] = undefined;

/**
 * @member {String} description
 */
PackageVersion.prototype['description'] = undefined;

/**
 * @member {Date} created_at
 */
PackageVersion.prototype['created_at'] = undefined;

/**
 * @member {Date} updated_at
 */
PackageVersion.prototype['updated_at'] = undefined;

/**
 * @member {Date} deleted_at
 */
PackageVersion.prototype['deleted_at'] = undefined;

/**
 * @member {module:model/PackageVersionMetadata} metadata
 */
PackageVersion.prototype['metadata'] = undefined;






export default PackageVersion;

