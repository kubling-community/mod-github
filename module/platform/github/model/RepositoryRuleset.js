/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RepositoryRule from './RepositoryRule';
import RepositoryRuleEnforcement from './RepositoryRuleEnforcement';
import RepositoryRulesetBypassActor from './RepositoryRulesetBypassActor';
import RepositoryRulesetConditions from './RepositoryRulesetConditions';
import RepositoryRulesetLinks from './RepositoryRulesetLinks';

/**
 * The RepositoryRuleset model module.
 * @module model/RepositoryRuleset
 * @version 1.1.4
 */
class RepositoryRuleset {
    /**
     * Constructs a new <code>RepositoryRuleset</code>.
     * A set of rules to apply when specified conditions are met.
     * @alias module:model/RepositoryRuleset
     * @param id {Number} The ID of the ruleset
     * @param name {String} The name of the ruleset
     * @param source {String} The name of the source
     * @param enforcement {module:model/RepositoryRuleEnforcement} 
     */
    constructor(id, name, source, enforcement) { 
        
        RepositoryRuleset.initialize(this, id, name, source, enforcement);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, source, enforcement) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['source'] = source;
        obj['enforcement'] = enforcement;
    }

    /**
     * Constructs a <code>RepositoryRuleset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepositoryRuleset} obj Optional instance to populate.
     * @return {module:model/RepositoryRuleset} The populated <code>RepositoryRuleset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepositoryRuleset();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'String');
            }
            if (data.hasOwnProperty('source_type')) {
                obj['source_type'] = ApiClient.convertToType(data['source_type'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('enforcement')) {
                obj['enforcement'] = RepositoryRuleEnforcement.constructFromObject(data['enforcement']);
            }
            if (data.hasOwnProperty('bypass_actors')) {
                obj['bypass_actors'] = ApiClient.convertToType(data['bypass_actors'], [RepositoryRulesetBypassActor]);
            }
            if (data.hasOwnProperty('current_user_can_bypass')) {
                obj['current_user_can_bypass'] = ApiClient.convertToType(data['current_user_can_bypass'], 'String');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('_links')) {
                obj['_links'] = RepositoryRulesetLinks.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = RepositoryRulesetConditions.constructFromObject(data['conditions']);
            }
            if (data.hasOwnProperty('rules')) {
                obj['rules'] = ApiClient.convertToType(data['rules'], [RepositoryRule]);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepositoryRuleset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepositoryRuleset</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RepositoryRuleset.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['target'] && !(typeof data['target'] === 'string' || data['target'] instanceof String)) {
            throw new Error("Expected the field `target` to be a primitive type in the JSON string but got " + data['target']);
        }
        // ensure the json data is a string
        if (data['source_type'] && !(typeof data['source_type'] === 'string' || data['source_type'] instanceof String)) {
            throw new Error("Expected the field `source_type` to be a primitive type in the JSON string but got " + data['source_type']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        if (data['bypass_actors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['bypass_actors'])) {
                throw new Error("Expected the field `bypass_actors` to be an array in the JSON data but got " + data['bypass_actors']);
            }
            // validate the optional field `bypass_actors` (array)
            for (const item of data['bypass_actors']) {
                RepositoryRulesetBypassActor.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['current_user_can_bypass'] && !(typeof data['current_user_can_bypass'] === 'string' || data['current_user_can_bypass'] instanceof String)) {
            throw new Error("Expected the field `current_user_can_bypass` to be a primitive type in the JSON string but got " + data['current_user_can_bypass']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // validate the optional field `_links`
        if (data['_links']) { // data not null
          RepositoryRulesetLinks.validateJSON(data['_links']);
        }
        // validate the optional field `conditions`
        if (data['conditions']) { // data not null
          RepositoryRulesetConditions.validateJSON(data['conditions']);
        }
        if (data['rules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rules'])) {
                throw new Error("Expected the field `rules` to be an array in the JSON data but got " + data['rules']);
            }
            // validate the optional field `rules` (array)
            for (const item of data['rules']) {
                RepositoryRule.validateJSON(item);
            };
        }

        return true;
    }


}

RepositoryRuleset.RequiredProperties = ["id", "name", "source", "enforcement"];

/**
 * The ID of the ruleset
 * @member {Number} id
 */
RepositoryRuleset.prototype['id'] = undefined;

/**
 * The name of the ruleset
 * @member {String} name
 */
RepositoryRuleset.prototype['name'] = undefined;

/**
 * The target of the ruleset  **Note**: The `push` target is in beta and is subject to change.
 * @member {module:model/RepositoryRuleset.TargetEnum} target
 */
RepositoryRuleset.prototype['target'] = undefined;

/**
 * The type of the source of the ruleset
 * @member {module:model/RepositoryRuleset.SourceTypeEnum} source_type
 */
RepositoryRuleset.prototype['source_type'] = undefined;

/**
 * The name of the source
 * @member {String} source
 */
RepositoryRuleset.prototype['source'] = undefined;

/**
 * @member {module:model/RepositoryRuleEnforcement} enforcement
 */
RepositoryRuleset.prototype['enforcement'] = undefined;

/**
 * The actors that can bypass the rules in this ruleset
 * @member {Array.<module:model/RepositoryRulesetBypassActor>} bypass_actors
 */
RepositoryRuleset.prototype['bypass_actors'] = undefined;

/**
 * The bypass type of the user making the API request for this ruleset. This field is only returned when querying the repository-level endpoint.
 * @member {module:model/RepositoryRuleset.CurrentUserCanBypassEnum} current_user_can_bypass
 */
RepositoryRuleset.prototype['current_user_can_bypass'] = undefined;

/**
 * @member {String} node_id
 */
RepositoryRuleset.prototype['node_id'] = undefined;

/**
 * @member {module:model/RepositoryRulesetLinks} _links
 */
RepositoryRuleset.prototype['_links'] = undefined;

/**
 * @member {module:model/RepositoryRulesetConditions} conditions
 */
RepositoryRuleset.prototype['conditions'] = undefined;

/**
 * @member {Array.<module:model/RepositoryRule>} rules
 */
RepositoryRuleset.prototype['rules'] = undefined;

/**
 * @member {Date} created_at
 */
RepositoryRuleset.prototype['created_at'] = undefined;

/**
 * @member {Date} updated_at
 */
RepositoryRuleset.prototype['updated_at'] = undefined;





/**
 * Allowed values for the <code>target</code> property.
 * @enum {String}
 * @readonly
 */
RepositoryRuleset['TargetEnum'] = {

    /**
     * value: "branch"
     * @const
     */
    "branch": "branch",

    /**
     * value: "tag"
     * @const
     */
    "tag": "tag",

    /**
     * value: "push"
     * @const
     */
    "push": "push"
};


/**
 * Allowed values for the <code>source_type</code> property.
 * @enum {String}
 * @readonly
 */
RepositoryRuleset['SourceTypeEnum'] = {

    /**
     * value: "Repository"
     * @const
     */
    "Repository": "Repository",

    /**
     * value: "Organization"
     * @const
     */
    "Organization": "Organization"
};


/**
 * Allowed values for the <code>current_user_can_bypass</code> property.
 * @enum {String}
 * @readonly
 */
RepositoryRuleset['CurrentUserCanBypassEnum'] = {

    /**
     * value: "always"
     * @const
     */
    "always": "always",

    /**
     * value: "pull_requests_only"
     * @const
     */
    "pull_requests_only": "pull_requests_only",

    /**
     * value: "never"
     * @const
     */
    "never": "never"
};



export default RepositoryRuleset;

