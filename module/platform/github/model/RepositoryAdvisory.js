/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GlobalAdvisoryCvss from './GlobalAdvisoryCvss';
import GlobalAdvisoryCwesInner from './GlobalAdvisoryCwesInner';
import GlobalAdvisoryIdentifiersInner from './GlobalAdvisoryIdentifiersInner';
import RepositoryAdvisoryAuthor from './RepositoryAdvisoryAuthor';
import RepositoryAdvisoryCredit from './RepositoryAdvisoryCredit';
import RepositoryAdvisoryCreditsInner from './RepositoryAdvisoryCreditsInner';
import RepositoryAdvisoryPrivateFork from './RepositoryAdvisoryPrivateFork';
import RepositoryAdvisoryPublisher from './RepositoryAdvisoryPublisher';
import RepositoryAdvisorySubmission from './RepositoryAdvisorySubmission';
import RepositoryAdvisoryVulnerability from './RepositoryAdvisoryVulnerability';
import SimpleUser from './SimpleUser';
import Team from './Team';

/**
 * The RepositoryAdvisory model module.
 * @module model/RepositoryAdvisory
 * @version 1.1.4
 */
class RepositoryAdvisory {
    /**
     * Constructs a new <code>RepositoryAdvisory</code>.
     * A repository security advisory.
     * @alias module:model/RepositoryAdvisory
     * @param ghsaId {String} The GitHub Security Advisory ID.
     * @param cveId {String} The Common Vulnerabilities and Exposures (CVE) ID.
     * @param url {String} The API URL for the advisory.
     * @param htmlUrl {String} The URL for the advisory.
     * @param summary {String} A short summary of the advisory.
     * @param description {String} A detailed description of what the advisory entails.
     * @param severity {module:model/RepositoryAdvisory.SeverityEnum} The severity of the advisory.
     * @param author {module:model/RepositoryAdvisoryAuthor} 
     * @param publisher {module:model/RepositoryAdvisoryPublisher} 
     * @param identifiers {Array.<module:model/GlobalAdvisoryIdentifiersInner>} 
     * @param state {module:model/RepositoryAdvisory.StateEnum} The state of the advisory.
     * @param createdAt {Date} The date and time of when the advisory was created, in ISO 8601 format.
     * @param updatedAt {Date} The date and time of when the advisory was last updated, in ISO 8601 format.
     * @param publishedAt {Date} The date and time of when the advisory was published, in ISO 8601 format.
     * @param closedAt {Date} The date and time of when the advisory was closed, in ISO 8601 format.
     * @param withdrawnAt {Date} The date and time of when the advisory was withdrawn, in ISO 8601 format.
     * @param submission {module:model/RepositoryAdvisorySubmission} 
     * @param vulnerabilities {Array.<module:model/RepositoryAdvisoryVulnerability>} 
     * @param cvss {module:model/GlobalAdvisoryCvss} 
     * @param cwes {Array.<module:model/GlobalAdvisoryCwesInner>} 
     * @param cweIds {Array.<String>} A list of only the CWE IDs.
     * @param credits {Array.<module:model/RepositoryAdvisoryCreditsInner>} 
     * @param creditsDetailed {Array.<module:model/RepositoryAdvisoryCredit>} 
     * @param collaboratingUsers {Array.<module:model/SimpleUser>} A list of users that collaborate on the advisory.
     * @param collaboratingTeams {Array.<module:model/Team>} A list of teams that collaborate on the advisory.
     * @param privateFork {module:model/RepositoryAdvisoryPrivateFork} 
     */
    constructor(ghsaId, cveId, url, htmlUrl, summary, description, severity, author, publisher, identifiers, state, createdAt, updatedAt, publishedAt, closedAt, withdrawnAt, submission, vulnerabilities, cvss, cwes, cweIds, credits, creditsDetailed, collaboratingUsers, collaboratingTeams, privateFork) { 
        
        RepositoryAdvisory.initialize(this, ghsaId, cveId, url, htmlUrl, summary, description, severity, author, publisher, identifiers, state, createdAt, updatedAt, publishedAt, closedAt, withdrawnAt, submission, vulnerabilities, cvss, cwes, cweIds, credits, creditsDetailed, collaboratingUsers, collaboratingTeams, privateFork);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ghsaId, cveId, url, htmlUrl, summary, description, severity, author, publisher, identifiers, state, createdAt, updatedAt, publishedAt, closedAt, withdrawnAt, submission, vulnerabilities, cvss, cwes, cweIds, credits, creditsDetailed, collaboratingUsers, collaboratingTeams, privateFork) { 
        obj['ghsa_id'] = ghsaId;
        obj['cve_id'] = cveId;
        obj['url'] = url;
        obj['html_url'] = htmlUrl;
        obj['summary'] = summary;
        obj['description'] = description;
        obj['severity'] = severity;
        obj['author'] = author;
        obj['publisher'] = publisher;
        obj['identifiers'] = identifiers;
        obj['state'] = state;
        obj['created_at'] = createdAt;
        obj['updated_at'] = updatedAt;
        obj['published_at'] = publishedAt;
        obj['closed_at'] = closedAt;
        obj['withdrawn_at'] = withdrawnAt;
        obj['submission'] = submission;
        obj['vulnerabilities'] = vulnerabilities;
        obj['cvss'] = cvss;
        obj['cwes'] = cwes;
        obj['cwe_ids'] = cweIds;
        obj['credits'] = credits;
        obj['credits_detailed'] = creditsDetailed;
        obj['collaborating_users'] = collaboratingUsers;
        obj['collaborating_teams'] = collaboratingTeams;
        obj['private_fork'] = privateFork;
    }

    /**
     * Constructs a <code>RepositoryAdvisory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepositoryAdvisory} obj Optional instance to populate.
     * @return {module:model/RepositoryAdvisory} The populated <code>RepositoryAdvisory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepositoryAdvisory();

            if (data.hasOwnProperty('ghsa_id')) {
                obj['ghsa_id'] = ApiClient.convertToType(data['ghsa_id'], 'String');
            }
            if (data.hasOwnProperty('cve_id')) {
                obj['cve_id'] = ApiClient.convertToType(data['cve_id'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = RepositoryAdvisoryAuthor.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('publisher')) {
                obj['publisher'] = RepositoryAdvisoryPublisher.constructFromObject(data['publisher']);
            }
            if (data.hasOwnProperty('identifiers')) {
                obj['identifiers'] = ApiClient.convertToType(data['identifiers'], [GlobalAdvisoryIdentifiersInner]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('published_at')) {
                obj['published_at'] = ApiClient.convertToType(data['published_at'], 'Date');
            }
            if (data.hasOwnProperty('closed_at')) {
                obj['closed_at'] = ApiClient.convertToType(data['closed_at'], 'Date');
            }
            if (data.hasOwnProperty('withdrawn_at')) {
                obj['withdrawn_at'] = ApiClient.convertToType(data['withdrawn_at'], 'Date');
            }
            if (data.hasOwnProperty('submission')) {
                obj['submission'] = RepositoryAdvisorySubmission.constructFromObject(data['submission']);
            }
            if (data.hasOwnProperty('vulnerabilities')) {
                obj['vulnerabilities'] = ApiClient.convertToType(data['vulnerabilities'], [RepositoryAdvisoryVulnerability]);
            }
            if (data.hasOwnProperty('cvss')) {
                obj['cvss'] = GlobalAdvisoryCvss.constructFromObject(data['cvss']);
            }
            if (data.hasOwnProperty('cwes')) {
                obj['cwes'] = ApiClient.convertToType(data['cwes'], [GlobalAdvisoryCwesInner]);
            }
            if (data.hasOwnProperty('cwe_ids')) {
                obj['cwe_ids'] = ApiClient.convertToType(data['cwe_ids'], ['String']);
            }
            if (data.hasOwnProperty('credits')) {
                obj['credits'] = ApiClient.convertToType(data['credits'], [RepositoryAdvisoryCreditsInner]);
            }
            if (data.hasOwnProperty('credits_detailed')) {
                obj['credits_detailed'] = ApiClient.convertToType(data['credits_detailed'], [RepositoryAdvisoryCredit]);
            }
            if (data.hasOwnProperty('collaborating_users')) {
                obj['collaborating_users'] = ApiClient.convertToType(data['collaborating_users'], [SimpleUser]);
            }
            if (data.hasOwnProperty('collaborating_teams')) {
                obj['collaborating_teams'] = ApiClient.convertToType(data['collaborating_teams'], [Team]);
            }
            if (data.hasOwnProperty('private_fork')) {
                obj['private_fork'] = RepositoryAdvisoryPrivateFork.constructFromObject(data['private_fork']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepositoryAdvisory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepositoryAdvisory</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RepositoryAdvisory.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ghsa_id'] && !(typeof data['ghsa_id'] === 'string' || data['ghsa_id'] instanceof String)) {
            throw new Error("Expected the field `ghsa_id` to be a primitive type in the JSON string but got " + data['ghsa_id']);
        }
        // ensure the json data is a string
        if (data['cve_id'] && !(typeof data['cve_id'] === 'string' || data['cve_id'] instanceof String)) {
            throw new Error("Expected the field `cve_id` to be a primitive type in the JSON string but got " + data['cve_id']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // validate the optional field `author`
        if (data['author']) { // data not null
          RepositoryAdvisoryAuthor.validateJSON(data['author']);
        }
        // validate the optional field `publisher`
        if (data['publisher']) { // data not null
          RepositoryAdvisoryPublisher.validateJSON(data['publisher']);
        }
        if (data['identifiers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['identifiers'])) {
                throw new Error("Expected the field `identifiers` to be an array in the JSON data but got " + data['identifiers']);
            }
            // validate the optional field `identifiers` (array)
            for (const item of data['identifiers']) {
                GlobalAdvisoryIdentifiersInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `submission`
        if (data['submission']) { // data not null
          RepositoryAdvisorySubmission.validateJSON(data['submission']);
        }
        if (data['vulnerabilities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vulnerabilities'])) {
                throw new Error("Expected the field `vulnerabilities` to be an array in the JSON data but got " + data['vulnerabilities']);
            }
            // validate the optional field `vulnerabilities` (array)
            for (const item of data['vulnerabilities']) {
                RepositoryAdvisoryVulnerability.validateJSON(item);
            };
        }
        // validate the optional field `cvss`
        if (data['cvss']) { // data not null
          GlobalAdvisoryCvss.validateJSON(data['cvss']);
        }
        if (data['cwes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cwes'])) {
                throw new Error("Expected the field `cwes` to be an array in the JSON data but got " + data['cwes']);
            }
            // validate the optional field `cwes` (array)
            for (const item of data['cwes']) {
                GlobalAdvisoryCwesInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['cwe_ids'])) {
            throw new Error("Expected the field `cwe_ids` to be an array in the JSON data but got " + data['cwe_ids']);
        }
        if (data['credits']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['credits'])) {
                throw new Error("Expected the field `credits` to be an array in the JSON data but got " + data['credits']);
            }
            // validate the optional field `credits` (array)
            for (const item of data['credits']) {
                RepositoryAdvisoryCreditsInner.validateJSON(item);
            };
        }
        if (data['credits_detailed']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['credits_detailed'])) {
                throw new Error("Expected the field `credits_detailed` to be an array in the JSON data but got " + data['credits_detailed']);
            }
            // validate the optional field `credits_detailed` (array)
            for (const item of data['credits_detailed']) {
                RepositoryAdvisoryCredit.validateJSON(item);
            };
        }
        if (data['collaborating_users']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['collaborating_users'])) {
                throw new Error("Expected the field `collaborating_users` to be an array in the JSON data but got " + data['collaborating_users']);
            }
            // validate the optional field `collaborating_users` (array)
            for (const item of data['collaborating_users']) {
                SimpleUser.validateJSON(item);
            };
        }
        if (data['collaborating_teams']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['collaborating_teams'])) {
                throw new Error("Expected the field `collaborating_teams` to be an array in the JSON data but got " + data['collaborating_teams']);
            }
            // validate the optional field `collaborating_teams` (array)
            for (const item of data['collaborating_teams']) {
                Team.validateJSON(item);
            };
        }
        // validate the optional field `private_fork`
        if (data['private_fork']) { // data not null
          RepositoryAdvisoryPrivateFork.validateJSON(data['private_fork']);
        }

        return true;
    }


}

RepositoryAdvisory.RequiredProperties = ["ghsa_id", "cve_id", "url", "html_url", "summary", "description", "severity", "author", "publisher", "identifiers", "state", "created_at", "updated_at", "published_at", "closed_at", "withdrawn_at", "submission", "vulnerabilities", "cvss", "cwes", "cwe_ids", "credits", "credits_detailed", "collaborating_users", "collaborating_teams", "private_fork"];

/**
 * The GitHub Security Advisory ID.
 * @member {String} ghsa_id
 */
RepositoryAdvisory.prototype['ghsa_id'] = undefined;

/**
 * The Common Vulnerabilities and Exposures (CVE) ID.
 * @member {String} cve_id
 */
RepositoryAdvisory.prototype['cve_id'] = undefined;

/**
 * The API URL for the advisory.
 * @member {String} url
 */
RepositoryAdvisory.prototype['url'] = undefined;

/**
 * The URL for the advisory.
 * @member {String} html_url
 */
RepositoryAdvisory.prototype['html_url'] = undefined;

/**
 * A short summary of the advisory.
 * @member {String} summary
 */
RepositoryAdvisory.prototype['summary'] = undefined;

/**
 * A detailed description of what the advisory entails.
 * @member {String} description
 */
RepositoryAdvisory.prototype['description'] = undefined;

/**
 * The severity of the advisory.
 * @member {module:model/RepositoryAdvisory.SeverityEnum} severity
 */
RepositoryAdvisory.prototype['severity'] = undefined;

/**
 * @member {module:model/RepositoryAdvisoryAuthor} author
 */
RepositoryAdvisory.prototype['author'] = undefined;

/**
 * @member {module:model/RepositoryAdvisoryPublisher} publisher
 */
RepositoryAdvisory.prototype['publisher'] = undefined;

/**
 * @member {Array.<module:model/GlobalAdvisoryIdentifiersInner>} identifiers
 */
RepositoryAdvisory.prototype['identifiers'] = undefined;

/**
 * The state of the advisory.
 * @member {module:model/RepositoryAdvisory.StateEnum} state
 */
RepositoryAdvisory.prototype['state'] = undefined;

/**
 * The date and time of when the advisory was created, in ISO 8601 format.
 * @member {Date} created_at
 */
RepositoryAdvisory.prototype['created_at'] = undefined;

/**
 * The date and time of when the advisory was last updated, in ISO 8601 format.
 * @member {Date} updated_at
 */
RepositoryAdvisory.prototype['updated_at'] = undefined;

/**
 * The date and time of when the advisory was published, in ISO 8601 format.
 * @member {Date} published_at
 */
RepositoryAdvisory.prototype['published_at'] = undefined;

/**
 * The date and time of when the advisory was closed, in ISO 8601 format.
 * @member {Date} closed_at
 */
RepositoryAdvisory.prototype['closed_at'] = undefined;

/**
 * The date and time of when the advisory was withdrawn, in ISO 8601 format.
 * @member {Date} withdrawn_at
 */
RepositoryAdvisory.prototype['withdrawn_at'] = undefined;

/**
 * @member {module:model/RepositoryAdvisorySubmission} submission
 */
RepositoryAdvisory.prototype['submission'] = undefined;

/**
 * @member {Array.<module:model/RepositoryAdvisoryVulnerability>} vulnerabilities
 */
RepositoryAdvisory.prototype['vulnerabilities'] = undefined;

/**
 * @member {module:model/GlobalAdvisoryCvss} cvss
 */
RepositoryAdvisory.prototype['cvss'] = undefined;

/**
 * @member {Array.<module:model/GlobalAdvisoryCwesInner>} cwes
 */
RepositoryAdvisory.prototype['cwes'] = undefined;

/**
 * A list of only the CWE IDs.
 * @member {Array.<String>} cwe_ids
 */
RepositoryAdvisory.prototype['cwe_ids'] = undefined;

/**
 * @member {Array.<module:model/RepositoryAdvisoryCreditsInner>} credits
 */
RepositoryAdvisory.prototype['credits'] = undefined;

/**
 * @member {Array.<module:model/RepositoryAdvisoryCredit>} credits_detailed
 */
RepositoryAdvisory.prototype['credits_detailed'] = undefined;

/**
 * A list of users that collaborate on the advisory.
 * @member {Array.<module:model/SimpleUser>} collaborating_users
 */
RepositoryAdvisory.prototype['collaborating_users'] = undefined;

/**
 * A list of teams that collaborate on the advisory.
 * @member {Array.<module:model/Team>} collaborating_teams
 */
RepositoryAdvisory.prototype['collaborating_teams'] = undefined;

/**
 * @member {module:model/RepositoryAdvisoryPrivateFork} private_fork
 */
RepositoryAdvisory.prototype['private_fork'] = undefined;





/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
RepositoryAdvisory['SeverityEnum'] = {

    /**
     * value: "critical"
     * @const
     */
    "critical": "critical",

    /**
     * value: "high"
     * @const
     */
    "high": "high",

    /**
     * value: "medium"
     * @const
     */
    "medium": "medium",

    /**
     * value: "low"
     * @const
     */
    "low": "low"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
RepositoryAdvisory['StateEnum'] = {

    /**
     * value: "published"
     * @const
     */
    "published": "published",

    /**
     * value: "closed"
     * @const
     */
    "closed": "closed",

    /**
     * value: "withdrawn"
     * @const
     */
    "withdrawn": "withdrawn",

    /**
     * value: "draft"
     * @const
     */
    "draft": "draft",

    /**
     * value: "triage"
     * @const
     */
    "triage": "triage"
};



export default RepositoryAdvisory;

