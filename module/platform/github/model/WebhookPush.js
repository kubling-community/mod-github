/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Commit from './Commit';
import Commit1 from './Commit1';
import Committer1 from './Committer1';
import EnterpriseWebhooks from './EnterpriseWebhooks';
import OrganizationSimpleWebhooks from './OrganizationSimpleWebhooks';
import Repository2 from './Repository2';
import SimpleInstallation from './SimpleInstallation';
import SimpleUserWebhooks from './SimpleUserWebhooks';

/**
 * The WebhookPush model module.
 * @module model/WebhookPush
 * @version 1.1.4
 */
class WebhookPush {
    /**
     * Constructs a new <code>WebhookPush</code>.
     * @alias module:model/WebhookPush
     * @param after {String} The SHA of the most recent commit on `ref` after the push.
     * @param baseRef {String} 
     * @param before {String} The SHA of the most recent commit on `ref` before the push.
     * @param commits {Array.<module:model/Commit>} An array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the `compare` between the `before` commit and the `after` commit.) The array includes a maximum of 2048 commits. If necessary, you can use the [Commits API](https://docs.github.com/rest/commits) to fetch additional commits.
     * @param compare {String} URL that shows the changes in this `ref` update, from the `before` commit to the `after` commit. For a newly created `ref` that is directly based on the default branch, this is the comparison between the head of the default branch and the `after` commit. Otherwise, this shows all commits until the `after` commit.
     * @param created {Boolean} Whether this push created the `ref`.
     * @param deleted {Boolean} Whether this push deleted the `ref`.
     * @param forced {Boolean} Whether this push was a force push of the `ref`.
     * @param headCommit {module:model/Commit1} 
     * @param pusher {module:model/Committer1} 
     * @param ref {String} The full git ref that was pushed. Example: `refs/heads/main` or `refs/tags/v3.14.1`.
     * @param repository {module:model/Repository2} 
     */
    constructor(after, baseRef, before, commits, compare, created, deleted, forced, headCommit, pusher, ref, repository) { 
        
        WebhookPush.initialize(this, after, baseRef, before, commits, compare, created, deleted, forced, headCommit, pusher, ref, repository);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, after, baseRef, before, commits, compare, created, deleted, forced, headCommit, pusher, ref, repository) { 
        obj['after'] = after;
        obj['base_ref'] = baseRef;
        obj['before'] = before;
        obj['commits'] = commits;
        obj['compare'] = compare;
        obj['created'] = created;
        obj['deleted'] = deleted;
        obj['forced'] = forced;
        obj['head_commit'] = headCommit;
        obj['pusher'] = pusher;
        obj['ref'] = ref;
        obj['repository'] = repository;
    }

    /**
     * Constructs a <code>WebhookPush</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebhookPush} obj Optional instance to populate.
     * @return {module:model/WebhookPush} The populated <code>WebhookPush</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebhookPush();

            if (data.hasOwnProperty('after')) {
                obj['after'] = ApiClient.convertToType(data['after'], 'String');
            }
            if (data.hasOwnProperty('base_ref')) {
                obj['base_ref'] = ApiClient.convertToType(data['base_ref'], 'String');
            }
            if (data.hasOwnProperty('before')) {
                obj['before'] = ApiClient.convertToType(data['before'], 'String');
            }
            if (data.hasOwnProperty('commits')) {
                obj['commits'] = ApiClient.convertToType(data['commits'], [Commit]);
            }
            if (data.hasOwnProperty('compare')) {
                obj['compare'] = ApiClient.convertToType(data['compare'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Boolean');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('enterprise')) {
                obj['enterprise'] = EnterpriseWebhooks.constructFromObject(data['enterprise']);
            }
            if (data.hasOwnProperty('forced')) {
                obj['forced'] = ApiClient.convertToType(data['forced'], 'Boolean');
            }
            if (data.hasOwnProperty('head_commit')) {
                obj['head_commit'] = Commit1.constructFromObject(data['head_commit']);
            }
            if (data.hasOwnProperty('installation')) {
                obj['installation'] = SimpleInstallation.constructFromObject(data['installation']);
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = OrganizationSimpleWebhooks.constructFromObject(data['organization']);
            }
            if (data.hasOwnProperty('pusher')) {
                obj['pusher'] = Committer1.constructFromObject(data['pusher']);
            }
            if (data.hasOwnProperty('ref')) {
                obj['ref'] = ApiClient.convertToType(data['ref'], 'String');
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = Repository2.constructFromObject(data['repository']);
            }
            if (data.hasOwnProperty('sender')) {
                obj['sender'] = SimpleUserWebhooks.constructFromObject(data['sender']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebhookPush</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebhookPush</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WebhookPush.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['after'] && !(typeof data['after'] === 'string' || data['after'] instanceof String)) {
            throw new Error("Expected the field `after` to be a primitive type in the JSON string but got " + data['after']);
        }
        // ensure the json data is a string
        if (data['base_ref'] && !(typeof data['base_ref'] === 'string' || data['base_ref'] instanceof String)) {
            throw new Error("Expected the field `base_ref` to be a primitive type in the JSON string but got " + data['base_ref']);
        }
        // ensure the json data is a string
        if (data['before'] && !(typeof data['before'] === 'string' || data['before'] instanceof String)) {
            throw new Error("Expected the field `before` to be a primitive type in the JSON string but got " + data['before']);
        }
        if (data['commits']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['commits'])) {
                throw new Error("Expected the field `commits` to be an array in the JSON data but got " + data['commits']);
            }
            // validate the optional field `commits` (array)
            for (const item of data['commits']) {
                Commit.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['compare'] && !(typeof data['compare'] === 'string' || data['compare'] instanceof String)) {
            throw new Error("Expected the field `compare` to be a primitive type in the JSON string but got " + data['compare']);
        }
        // validate the optional field `enterprise`
        if (data['enterprise']) { // data not null
          EnterpriseWebhooks.validateJSON(data['enterprise']);
        }
        // validate the optional field `head_commit`
        if (data['head_commit']) { // data not null
          Commit1.validateJSON(data['head_commit']);
        }
        // validate the optional field `installation`
        if (data['installation']) { // data not null
          SimpleInstallation.validateJSON(data['installation']);
        }
        // validate the optional field `organization`
        if (data['organization']) { // data not null
          OrganizationSimpleWebhooks.validateJSON(data['organization']);
        }
        // validate the optional field `pusher`
        if (data['pusher']) { // data not null
          Committer1.validateJSON(data['pusher']);
        }
        // ensure the json data is a string
        if (data['ref'] && !(typeof data['ref'] === 'string' || data['ref'] instanceof String)) {
            throw new Error("Expected the field `ref` to be a primitive type in the JSON string but got " + data['ref']);
        }
        // validate the optional field `repository`
        if (data['repository']) { // data not null
          Repository2.validateJSON(data['repository']);
        }
        // validate the optional field `sender`
        if (data['sender']) { // data not null
          SimpleUserWebhooks.validateJSON(data['sender']);
        }

        return true;
    }


}

WebhookPush.RequiredProperties = ["after", "base_ref", "before", "commits", "compare", "created", "deleted", "forced", "head_commit", "pusher", "ref", "repository"];

/**
 * The SHA of the most recent commit on `ref` after the push.
 * @member {String} after
 */
WebhookPush.prototype['after'] = undefined;

/**
 * @member {String} base_ref
 */
WebhookPush.prototype['base_ref'] = undefined;

/**
 * The SHA of the most recent commit on `ref` before the push.
 * @member {String} before
 */
WebhookPush.prototype['before'] = undefined;

/**
 * An array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the `compare` between the `before` commit and the `after` commit.) The array includes a maximum of 2048 commits. If necessary, you can use the [Commits API](https://docs.github.com/rest/commits) to fetch additional commits.
 * @member {Array.<module:model/Commit>} commits
 */
WebhookPush.prototype['commits'] = undefined;

/**
 * URL that shows the changes in this `ref` update, from the `before` commit to the `after` commit. For a newly created `ref` that is directly based on the default branch, this is the comparison between the head of the default branch and the `after` commit. Otherwise, this shows all commits until the `after` commit.
 * @member {String} compare
 */
WebhookPush.prototype['compare'] = undefined;

/**
 * Whether this push created the `ref`.
 * @member {Boolean} created
 */
WebhookPush.prototype['created'] = undefined;

/**
 * Whether this push deleted the `ref`.
 * @member {Boolean} deleted
 */
WebhookPush.prototype['deleted'] = undefined;

/**
 * @member {module:model/EnterpriseWebhooks} enterprise
 */
WebhookPush.prototype['enterprise'] = undefined;

/**
 * Whether this push was a force push of the `ref`.
 * @member {Boolean} forced
 */
WebhookPush.prototype['forced'] = undefined;

/**
 * @member {module:model/Commit1} head_commit
 */
WebhookPush.prototype['head_commit'] = undefined;

/**
 * @member {module:model/SimpleInstallation} installation
 */
WebhookPush.prototype['installation'] = undefined;

/**
 * @member {module:model/OrganizationSimpleWebhooks} organization
 */
WebhookPush.prototype['organization'] = undefined;

/**
 * @member {module:model/Committer1} pusher
 */
WebhookPush.prototype['pusher'] = undefined;

/**
 * The full git ref that was pushed. Example: `refs/heads/main` or `refs/tags/v3.14.1`.
 * @member {String} ref
 */
WebhookPush.prototype['ref'] = undefined;

/**
 * @member {module:model/Repository2} repository
 */
WebhookPush.prototype['repository'] = undefined;

/**
 * @member {module:model/SimpleUserWebhooks} sender
 */
WebhookPush.prototype['sender'] = undefined;






export default WebhookPush;

