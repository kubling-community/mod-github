/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CopilotSeatBreakdown model module.
 * @module model/CopilotSeatBreakdown
 * @version 1.1.4
 */
class CopilotSeatBreakdown {
    /**
     * Constructs a new <code>CopilotSeatBreakdown</code>.
     * The breakdown of Copilot Business seats for the organization.
     * @alias module:model/CopilotSeatBreakdown
     */
    constructor() { 
        
        CopilotSeatBreakdown.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CopilotSeatBreakdown</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CopilotSeatBreakdown} obj Optional instance to populate.
     * @return {module:model/CopilotSeatBreakdown} The populated <code>CopilotSeatBreakdown</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CopilotSeatBreakdown();

            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('added_this_cycle')) {
                obj['added_this_cycle'] = ApiClient.convertToType(data['added_this_cycle'], 'Number');
            }
            if (data.hasOwnProperty('pending_cancellation')) {
                obj['pending_cancellation'] = ApiClient.convertToType(data['pending_cancellation'], 'Number');
            }
            if (data.hasOwnProperty('pending_invitation')) {
                obj['pending_invitation'] = ApiClient.convertToType(data['pending_invitation'], 'Number');
            }
            if (data.hasOwnProperty('active_this_cycle')) {
                obj['active_this_cycle'] = ApiClient.convertToType(data['active_this_cycle'], 'Number');
            }
            if (data.hasOwnProperty('inactive_this_cycle')) {
                obj['inactive_this_cycle'] = ApiClient.convertToType(data['inactive_this_cycle'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CopilotSeatBreakdown</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CopilotSeatBreakdown</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The total number of seats being billed for the organization as of the current billing cycle.
 * @member {Number} total
 */
CopilotSeatBreakdown.prototype['total'] = undefined;

/**
 * Seats added during the current billing cycle.
 * @member {Number} added_this_cycle
 */
CopilotSeatBreakdown.prototype['added_this_cycle'] = undefined;

/**
 * The number of seats that are pending cancellation at the end of the current billing cycle.
 * @member {Number} pending_cancellation
 */
CopilotSeatBreakdown.prototype['pending_cancellation'] = undefined;

/**
 * The number of seats that have been assigned to users that have not yet accepted an invitation to this organization.
 * @member {Number} pending_invitation
 */
CopilotSeatBreakdown.prototype['pending_invitation'] = undefined;

/**
 * The number of seats that have used Copilot during the current billing cycle.
 * @member {Number} active_this_cycle
 */
CopilotSeatBreakdown.prototype['active_this_cycle'] = undefined;

/**
 * The number of seats that have not used Copilot during the current billing cycle.
 * @member {Number} inactive_this_cycle
 */
CopilotSeatBreakdown.prototype['inactive_this_cycle'] = undefined;






export default CopilotSeatBreakdown;

