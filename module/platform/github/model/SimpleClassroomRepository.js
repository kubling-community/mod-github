/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SimpleClassroomRepository model module.
 * @module model/SimpleClassroomRepository
 * @version 1.1.4
 */
class SimpleClassroomRepository {
    /**
     * Constructs a new <code>SimpleClassroomRepository</code>.
     * A GitHub repository view for Classroom
     * @alias module:model/SimpleClassroomRepository
     * @param id {Number} A unique identifier of the repository.
     * @param fullName {String} The full, globally unique name of the repository.
     * @param htmlUrl {String} The URL to view the repository on GitHub.com.
     * @param nodeId {String} The GraphQL identifier of the repository.
     * @param _private {Boolean} Whether the repository is private.
     * @param defaultBranch {String} The default branch for the repository.
     */
    constructor(id, fullName, htmlUrl, nodeId, _private, defaultBranch) { 
        
        SimpleClassroomRepository.initialize(this, id, fullName, htmlUrl, nodeId, _private, defaultBranch);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, fullName, htmlUrl, nodeId, _private, defaultBranch) { 
        obj['id'] = id;
        obj['full_name'] = fullName;
        obj['html_url'] = htmlUrl;
        obj['node_id'] = nodeId;
        obj['private'] = _private;
        obj['default_branch'] = defaultBranch;
    }

    /**
     * Constructs a <code>SimpleClassroomRepository</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimpleClassroomRepository} obj Optional instance to populate.
     * @return {module:model/SimpleClassroomRepository} The populated <code>SimpleClassroomRepository</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimpleClassroomRepository();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('full_name')) {
                obj['full_name'] = ApiClient.convertToType(data['full_name'], 'String');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('private')) {
                obj['private'] = ApiClient.convertToType(data['private'], 'Boolean');
            }
            if (data.hasOwnProperty('default_branch')) {
                obj['default_branch'] = ApiClient.convertToType(data['default_branch'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SimpleClassroomRepository</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SimpleClassroomRepository</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SimpleClassroomRepository.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['full_name'] && !(typeof data['full_name'] === 'string' || data['full_name'] instanceof String)) {
            throw new Error("Expected the field `full_name` to be a primitive type in the JSON string but got " + data['full_name']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // ensure the json data is a string
        if (data['default_branch'] && !(typeof data['default_branch'] === 'string' || data['default_branch'] instanceof String)) {
            throw new Error("Expected the field `default_branch` to be a primitive type in the JSON string but got " + data['default_branch']);
        }

        return true;
    }


}

SimpleClassroomRepository.RequiredProperties = ["id", "full_name", "html_url", "node_id", "private", "default_branch"];

/**
 * A unique identifier of the repository.
 * @member {Number} id
 */
SimpleClassroomRepository.prototype['id'] = undefined;

/**
 * The full, globally unique name of the repository.
 * @member {String} full_name
 */
SimpleClassroomRepository.prototype['full_name'] = undefined;

/**
 * The URL to view the repository on GitHub.com.
 * @member {String} html_url
 */
SimpleClassroomRepository.prototype['html_url'] = undefined;

/**
 * The GraphQL identifier of the repository.
 * @member {String} node_id
 */
SimpleClassroomRepository.prototype['node_id'] = undefined;

/**
 * Whether the repository is private.
 * @member {Boolean} private
 */
SimpleClassroomRepository.prototype['private'] = undefined;

/**
 * The default branch for the repository.
 * @member {String} default_branch
 */
SimpleClassroomRepository.prototype['default_branch'] = undefined;






export default SimpleClassroomRepository;

