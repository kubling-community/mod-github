/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnterpriseWebhooks from './EnterpriseWebhooks';
import OrganizationSimpleWebhooks from './OrganizationSimpleWebhooks';
import RepositoryWebhooks from './RepositoryWebhooks';
import SimpleInstallation from './SimpleInstallation';
import SimpleUserWebhooks from './SimpleUserWebhooks';

/**
 * The WebhookCreate model module.
 * @module model/WebhookCreate
 * @version 1.1.4
 */
class WebhookCreate {
    /**
     * Constructs a new <code>WebhookCreate</code>.
     * @alias module:model/WebhookCreate
     * @param description {String} The repository's current description.
     * @param masterBranch {String} The name of the repository's default branch (usually `main`).
     * @param pusherType {String} The pusher type for the event. Can be either `user` or a deploy key.
     * @param ref {String} The [`git ref`](https://docs.github.com/rest/git/refs#get-a-reference) resource.
     * @param refType {module:model/WebhookCreate.RefTypeEnum} The type of Git ref object created in the repository.
     * @param repository {module:model/RepositoryWebhooks} 
     * @param sender {module:model/SimpleUserWebhooks} 
     */
    constructor(description, masterBranch, pusherType, ref, refType, repository, sender) { 
        
        WebhookCreate.initialize(this, description, masterBranch, pusherType, ref, refType, repository, sender);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, masterBranch, pusherType, ref, refType, repository, sender) { 
        obj['description'] = description;
        obj['master_branch'] = masterBranch;
        obj['pusher_type'] = pusherType;
        obj['ref'] = ref;
        obj['ref_type'] = refType;
        obj['repository'] = repository;
        obj['sender'] = sender;
    }

    /**
     * Constructs a <code>WebhookCreate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebhookCreate} obj Optional instance to populate.
     * @return {module:model/WebhookCreate} The populated <code>WebhookCreate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebhookCreate();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enterprise')) {
                obj['enterprise'] = EnterpriseWebhooks.constructFromObject(data['enterprise']);
            }
            if (data.hasOwnProperty('installation')) {
                obj['installation'] = SimpleInstallation.constructFromObject(data['installation']);
            }
            if (data.hasOwnProperty('master_branch')) {
                obj['master_branch'] = ApiClient.convertToType(data['master_branch'], 'String');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = OrganizationSimpleWebhooks.constructFromObject(data['organization']);
            }
            if (data.hasOwnProperty('pusher_type')) {
                obj['pusher_type'] = ApiClient.convertToType(data['pusher_type'], 'String');
            }
            if (data.hasOwnProperty('ref')) {
                obj['ref'] = ApiClient.convertToType(data['ref'], 'String');
            }
            if (data.hasOwnProperty('ref_type')) {
                obj['ref_type'] = ApiClient.convertToType(data['ref_type'], 'String');
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = RepositoryWebhooks.constructFromObject(data['repository']);
            }
            if (data.hasOwnProperty('sender')) {
                obj['sender'] = SimpleUserWebhooks.constructFromObject(data['sender']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebhookCreate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebhookCreate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WebhookCreate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `enterprise`
        if (data['enterprise']) { // data not null
          EnterpriseWebhooks.validateJSON(data['enterprise']);
        }
        // validate the optional field `installation`
        if (data['installation']) { // data not null
          SimpleInstallation.validateJSON(data['installation']);
        }
        // ensure the json data is a string
        if (data['master_branch'] && !(typeof data['master_branch'] === 'string' || data['master_branch'] instanceof String)) {
            throw new Error("Expected the field `master_branch` to be a primitive type in the JSON string but got " + data['master_branch']);
        }
        // validate the optional field `organization`
        if (data['organization']) { // data not null
          OrganizationSimpleWebhooks.validateJSON(data['organization']);
        }
        // ensure the json data is a string
        if (data['pusher_type'] && !(typeof data['pusher_type'] === 'string' || data['pusher_type'] instanceof String)) {
            throw new Error("Expected the field `pusher_type` to be a primitive type in the JSON string but got " + data['pusher_type']);
        }
        // ensure the json data is a string
        if (data['ref'] && !(typeof data['ref'] === 'string' || data['ref'] instanceof String)) {
            throw new Error("Expected the field `ref` to be a primitive type in the JSON string but got " + data['ref']);
        }
        // ensure the json data is a string
        if (data['ref_type'] && !(typeof data['ref_type'] === 'string' || data['ref_type'] instanceof String)) {
            throw new Error("Expected the field `ref_type` to be a primitive type in the JSON string but got " + data['ref_type']);
        }
        // validate the optional field `repository`
        if (data['repository']) { // data not null
          RepositoryWebhooks.validateJSON(data['repository']);
        }
        // validate the optional field `sender`
        if (data['sender']) { // data not null
          SimpleUserWebhooks.validateJSON(data['sender']);
        }

        return true;
    }


}

WebhookCreate.RequiredProperties = ["description", "master_branch", "pusher_type", "ref", "ref_type", "repository", "sender"];

/**
 * The repository's current description.
 * @member {String} description
 */
WebhookCreate.prototype['description'] = undefined;

/**
 * @member {module:model/EnterpriseWebhooks} enterprise
 */
WebhookCreate.prototype['enterprise'] = undefined;

/**
 * @member {module:model/SimpleInstallation} installation
 */
WebhookCreate.prototype['installation'] = undefined;

/**
 * The name of the repository's default branch (usually `main`).
 * @member {String} master_branch
 */
WebhookCreate.prototype['master_branch'] = undefined;

/**
 * @member {module:model/OrganizationSimpleWebhooks} organization
 */
WebhookCreate.prototype['organization'] = undefined;

/**
 * The pusher type for the event. Can be either `user` or a deploy key.
 * @member {String} pusher_type
 */
WebhookCreate.prototype['pusher_type'] = undefined;

/**
 * The [`git ref`](https://docs.github.com/rest/git/refs#get-a-reference) resource.
 * @member {String} ref
 */
WebhookCreate.prototype['ref'] = undefined;

/**
 * The type of Git ref object created in the repository.
 * @member {module:model/WebhookCreate.RefTypeEnum} ref_type
 */
WebhookCreate.prototype['ref_type'] = undefined;

/**
 * @member {module:model/RepositoryWebhooks} repository
 */
WebhookCreate.prototype['repository'] = undefined;

/**
 * @member {module:model/SimpleUserWebhooks} sender
 */
WebhookCreate.prototype['sender'] = undefined;





/**
 * Allowed values for the <code>ref_type</code> property.
 * @enum {String}
 * @readonly
 */
WebhookCreate['RefTypeEnum'] = {

    /**
     * value: "tag"
     * @const
     */
    "tag": "tag",

    /**
     * value: "branch"
     * @const
     */
    "branch": "branch"
};



export default WebhookCreate;

