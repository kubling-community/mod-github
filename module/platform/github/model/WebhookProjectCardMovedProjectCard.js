/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WebhookProjectCardMovedProjectCardAllOfCreator from './WebhookProjectCardMovedProjectCardAllOfCreator';

/**
 * The WebhookProjectCardMovedProjectCard model module.
 * @module model/WebhookProjectCardMovedProjectCard
 * @version 1.1.4
 */
class WebhookProjectCardMovedProjectCard {
    /**
     * Constructs a new <code>WebhookProjectCardMovedProjectCard</code>.
     * @alias module:model/WebhookProjectCardMovedProjectCard
     * @param afterId {Number} 
     * @param archived {Boolean} 
     * @param columnId {Number} 
     * @param columnUrl {String} 
     * @param createdAt {String} 
     * @param creator {module:model/WebhookProjectCardMovedProjectCardAllOfCreator} 
     * @param id {Number} 
     * @param nodeId {String} 
     * @param note {String} 
     * @param projectUrl {String} 
     * @param updatedAt {String} 
     * @param url {String} 
     */
    constructor(afterId, archived, columnId, columnUrl, createdAt, creator, id, nodeId, note, projectUrl, updatedAt, url) { 
        
        WebhookProjectCardMovedProjectCard.initialize(this, afterId, archived, columnId, columnUrl, createdAt, creator, id, nodeId, note, projectUrl, updatedAt, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, afterId, archived, columnId, columnUrl, createdAt, creator, id, nodeId, note, projectUrl, updatedAt, url) { 
        obj['after_id'] = afterId;
        obj['archived'] = archived;
        obj['column_id'] = columnId;
        obj['column_url'] = columnUrl;
        obj['created_at'] = createdAt;
        obj['creator'] = creator;
        obj['id'] = id;
        obj['node_id'] = nodeId;
        obj['note'] = note;
        obj['project_url'] = projectUrl;
        obj['updated_at'] = updatedAt;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>WebhookProjectCardMovedProjectCard</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebhookProjectCardMovedProjectCard} obj Optional instance to populate.
     * @return {module:model/WebhookProjectCardMovedProjectCard} The populated <code>WebhookProjectCardMovedProjectCard</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebhookProjectCardMovedProjectCard();

            if (data.hasOwnProperty('after_id')) {
                obj['after_id'] = ApiClient.convertToType(data['after_id'], 'Number');
            }
            if (data.hasOwnProperty('archived')) {
                obj['archived'] = ApiClient.convertToType(data['archived'], 'Boolean');
            }
            if (data.hasOwnProperty('column_id')) {
                obj['column_id'] = ApiClient.convertToType(data['column_id'], 'Number');
            }
            if (data.hasOwnProperty('column_url')) {
                obj['column_url'] = ApiClient.convertToType(data['column_url'], 'String');
            }
            if (data.hasOwnProperty('content_url')) {
                obj['content_url'] = ApiClient.convertToType(data['content_url'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('creator')) {
                obj['creator'] = WebhookProjectCardMovedProjectCardAllOfCreator.constructFromObject(data['creator']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('project_url')) {
                obj['project_url'] = ApiClient.convertToType(data['project_url'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebhookProjectCardMovedProjectCard</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebhookProjectCardMovedProjectCard</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WebhookProjectCardMovedProjectCard.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['column_url'] && !(typeof data['column_url'] === 'string' || data['column_url'] instanceof String)) {
            throw new Error("Expected the field `column_url` to be a primitive type in the JSON string but got " + data['column_url']);
        }
        // ensure the json data is a string
        if (data['content_url'] && !(typeof data['content_url'] === 'string' || data['content_url'] instanceof String)) {
            throw new Error("Expected the field `content_url` to be a primitive type in the JSON string but got " + data['content_url']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // validate the optional field `creator`
        if (data['creator']) { // data not null
          WebhookProjectCardMovedProjectCardAllOfCreator.validateJSON(data['creator']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['project_url'] && !(typeof data['project_url'] === 'string' || data['project_url'] instanceof String)) {
            throw new Error("Expected the field `project_url` to be a primitive type in the JSON string but got " + data['project_url']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

WebhookProjectCardMovedProjectCard.RequiredProperties = ["after_id", "archived", "column_id", "column_url", "created_at", "creator", "id", "node_id", "note", "project_url", "updated_at", "url"];

/**
 * @member {Number} after_id
 */
WebhookProjectCardMovedProjectCard.prototype['after_id'] = undefined;

/**
 * @member {Boolean} archived
 */
WebhookProjectCardMovedProjectCard.prototype['archived'] = undefined;

/**
 * @member {Number} column_id
 */
WebhookProjectCardMovedProjectCard.prototype['column_id'] = undefined;

/**
 * @member {String} column_url
 */
WebhookProjectCardMovedProjectCard.prototype['column_url'] = undefined;

/**
 * @member {String} content_url
 */
WebhookProjectCardMovedProjectCard.prototype['content_url'] = undefined;

/**
 * @member {String} created_at
 */
WebhookProjectCardMovedProjectCard.prototype['created_at'] = undefined;

/**
 * @member {module:model/WebhookProjectCardMovedProjectCardAllOfCreator} creator
 */
WebhookProjectCardMovedProjectCard.prototype['creator'] = undefined;

/**
 * @member {Number} id
 */
WebhookProjectCardMovedProjectCard.prototype['id'] = undefined;

/**
 * @member {String} node_id
 */
WebhookProjectCardMovedProjectCard.prototype['node_id'] = undefined;

/**
 * @member {String} note
 */
WebhookProjectCardMovedProjectCard.prototype['note'] = undefined;

/**
 * @member {String} project_url
 */
WebhookProjectCardMovedProjectCard.prototype['project_url'] = undefined;

/**
 * @member {String} updated_at
 */
WebhookProjectCardMovedProjectCard.prototype['updated_at'] = undefined;

/**
 * @member {String} url
 */
WebhookProjectCardMovedProjectCard.prototype['url'] = undefined;






export default WebhookProjectCardMovedProjectCard;

