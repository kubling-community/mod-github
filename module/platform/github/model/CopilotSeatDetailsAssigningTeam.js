/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NullableTeamSimple from './NullableTeamSimple';
import Team from './Team';
import TeamPermissions from './TeamPermissions';

/**
 * The CopilotSeatDetailsAssigningTeam model module.
 * @module model/CopilotSeatDetailsAssigningTeam
 * @version 1.1.4
 */
class CopilotSeatDetailsAssigningTeam {
    /**
     * Constructs a new <code>CopilotSeatDetailsAssigningTeam</code>.
     * The team that granted access to GitHub Copilot to the assignee. This will be null if the user was assigned a seat individually.
     * @alias module:model/CopilotSeatDetailsAssigningTeam
     * @param {(module:model/Team)} instance The actual instance to initialize CopilotSeatDetailsAssigningTeam.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "Team") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Team.validateJSON(instance); // throw an exception if no match
                // create Team from JS object
                this.actualInstance = Team.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Team
            errorMessages.push("Failed to construct Team: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `CopilotSeatDetailsAssigningTeam` with oneOf schemas Team. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `CopilotSeatDetailsAssigningTeam` with oneOf schemas Team. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>CopilotSeatDetailsAssigningTeam</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CopilotSeatDetailsAssigningTeam} obj Optional instance to populate.
     * @return {module:model/CopilotSeatDetailsAssigningTeam} The populated <code>CopilotSeatDetailsAssigningTeam</code> instance.
     */
    static constructFromObject(data, obj) {
        return new CopilotSeatDetailsAssigningTeam(data);
    }

    /**
     * Gets the actual instance, which can be <code>Team</code>.
     * @return {(module:model/Team)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>Team</code>.
     * @param {(module:model/Team)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = CopilotSeatDetailsAssigningTeam.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of CopilotSeatDetailsAssigningTeam from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/CopilotSeatDetailsAssigningTeam} An instance of CopilotSeatDetailsAssigningTeam.
     */
    static fromJSON = function(json_string){
        return CopilotSeatDetailsAssigningTeam.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {Number} id
 */
CopilotSeatDetailsAssigningTeam.prototype['id'] = undefined;

/**
 * @member {String} node_id
 */
CopilotSeatDetailsAssigningTeam.prototype['node_id'] = undefined;

/**
 * @member {String} name
 */
CopilotSeatDetailsAssigningTeam.prototype['name'] = undefined;

/**
 * @member {String} slug
 */
CopilotSeatDetailsAssigningTeam.prototype['slug'] = undefined;

/**
 * @member {String} description
 */
CopilotSeatDetailsAssigningTeam.prototype['description'] = undefined;

/**
 * @member {String} privacy
 */
CopilotSeatDetailsAssigningTeam.prototype['privacy'] = undefined;

/**
 * @member {String} notification_setting
 */
CopilotSeatDetailsAssigningTeam.prototype['notification_setting'] = undefined;

/**
 * @member {String} permission
 */
CopilotSeatDetailsAssigningTeam.prototype['permission'] = undefined;

/**
 * @member {module:model/TeamPermissions} permissions
 */
CopilotSeatDetailsAssigningTeam.prototype['permissions'] = undefined;

/**
 * @member {String} url
 */
CopilotSeatDetailsAssigningTeam.prototype['url'] = undefined;

/**
 * @member {String} html_url
 */
CopilotSeatDetailsAssigningTeam.prototype['html_url'] = undefined;

/**
 * @member {String} members_url
 */
CopilotSeatDetailsAssigningTeam.prototype['members_url'] = undefined;

/**
 * @member {String} repositories_url
 */
CopilotSeatDetailsAssigningTeam.prototype['repositories_url'] = undefined;

/**
 * @member {module:model/NullableTeamSimple} parent
 */
CopilotSeatDetailsAssigningTeam.prototype['parent'] = undefined;


CopilotSeatDetailsAssigningTeam.OneOf = ["Team"];

export default CopilotSeatDetailsAssigningTeam;

