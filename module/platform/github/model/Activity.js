/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NullableSimpleUser from './NullableSimpleUser';

/**
 * The Activity model module.
 * @module model/Activity
 * @version 1.1.4
 */
class Activity {
    /**
     * Constructs a new <code>Activity</code>.
     * Activity
     * @alias module:model/Activity
     * @param id {Number} 
     * @param nodeId {String} 
     * @param before {String} The SHA of the commit before the activity.
     * @param after {String} The SHA of the commit after the activity.
     * @param ref {String} The full Git reference, formatted as `refs/heads/<branch name>`.
     * @param timestamp {Date} The time when the activity occurred.
     * @param activityType {module:model/Activity.ActivityTypeEnum} The type of the activity that was performed.
     * @param actor {module:model/NullableSimpleUser} 
     */
    constructor(id, nodeId, before, after, ref, timestamp, activityType, actor) { 
        
        Activity.initialize(this, id, nodeId, before, after, ref, timestamp, activityType, actor);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, nodeId, before, after, ref, timestamp, activityType, actor) { 
        obj['id'] = id;
        obj['node_id'] = nodeId;
        obj['before'] = before;
        obj['after'] = after;
        obj['ref'] = ref;
        obj['timestamp'] = timestamp;
        obj['activity_type'] = activityType;
        obj['actor'] = actor;
    }

    /**
     * Constructs a <code>Activity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Activity} obj Optional instance to populate.
     * @return {module:model/Activity} The populated <code>Activity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Activity();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('before')) {
                obj['before'] = ApiClient.convertToType(data['before'], 'String');
            }
            if (data.hasOwnProperty('after')) {
                obj['after'] = ApiClient.convertToType(data['after'], 'String');
            }
            if (data.hasOwnProperty('ref')) {
                obj['ref'] = ApiClient.convertToType(data['ref'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('activity_type')) {
                obj['activity_type'] = ApiClient.convertToType(data['activity_type'], 'String');
            }
            if (data.hasOwnProperty('actor')) {
                obj['actor'] = NullableSimpleUser.constructFromObject(data['actor']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Activity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Activity</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Activity.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // ensure the json data is a string
        if (data['before'] && !(typeof data['before'] === 'string' || data['before'] instanceof String)) {
            throw new Error("Expected the field `before` to be a primitive type in the JSON string but got " + data['before']);
        }
        // ensure the json data is a string
        if (data['after'] && !(typeof data['after'] === 'string' || data['after'] instanceof String)) {
            throw new Error("Expected the field `after` to be a primitive type in the JSON string but got " + data['after']);
        }
        // ensure the json data is a string
        if (data['ref'] && !(typeof data['ref'] === 'string' || data['ref'] instanceof String)) {
            throw new Error("Expected the field `ref` to be a primitive type in the JSON string but got " + data['ref']);
        }
        // ensure the json data is a string
        if (data['activity_type'] && !(typeof data['activity_type'] === 'string' || data['activity_type'] instanceof String)) {
            throw new Error("Expected the field `activity_type` to be a primitive type in the JSON string but got " + data['activity_type']);
        }
        // validate the optional field `actor`
        if (data['actor']) { // data not null
          NullableSimpleUser.validateJSON(data['actor']);
        }

        return true;
    }


}

Activity.RequiredProperties = ["id", "node_id", "before", "after", "ref", "timestamp", "activity_type", "actor"];

/**
 * @member {Number} id
 */
Activity.prototype['id'] = undefined;

/**
 * @member {String} node_id
 */
Activity.prototype['node_id'] = undefined;

/**
 * The SHA of the commit before the activity.
 * @member {String} before
 */
Activity.prototype['before'] = undefined;

/**
 * The SHA of the commit after the activity.
 * @member {String} after
 */
Activity.prototype['after'] = undefined;

/**
 * The full Git reference, formatted as `refs/heads/<branch name>`.
 * @member {String} ref
 */
Activity.prototype['ref'] = undefined;

/**
 * The time when the activity occurred.
 * @member {Date} timestamp
 */
Activity.prototype['timestamp'] = undefined;

/**
 * The type of the activity that was performed.
 * @member {module:model/Activity.ActivityTypeEnum} activity_type
 */
Activity.prototype['activity_type'] = undefined;

/**
 * @member {module:model/NullableSimpleUser} actor
 */
Activity.prototype['actor'] = undefined;





/**
 * Allowed values for the <code>activity_type</code> property.
 * @enum {String}
 * @readonly
 */
Activity['ActivityTypeEnum'] = {

    /**
     * value: "push"
     * @const
     */
    "push": "push",

    /**
     * value: "force_push"
     * @const
     */
    "force_push": "force_push",

    /**
     * value: "branch_deletion"
     * @const
     */
    "branch_deletion": "branch_deletion",

    /**
     * value: "branch_creation"
     * @const
     */
    "branch_creation": "branch_creation",

    /**
     * value: "pr_merge"
     * @const
     */
    "pr_merge": "pr_merge",

    /**
     * value: "merge_queue_merge"
     * @const
     */
    "merge_queue_merge": "merge_queue_merge"
};



export default Activity;

