/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Manifest from './Manifest';
import Metadata1 from './Metadata1';
import SnapshotDetector from './SnapshotDetector';
import SnapshotJob from './SnapshotJob';

/**
 * The Snapshot model module.
 * @module model/Snapshot
 * @version 1.1.4
 */
class Snapshot {
    /**
     * Constructs a new <code>Snapshot</code>.
     * Create a new snapshot of a repository&#39;s dependencies.
     * @alias module:model/Snapshot
     * @param version {Number} The version of the repository snapshot submission.
     * @param job {module:model/SnapshotJob} 
     * @param sha {String} The commit SHA associated with this dependency snapshot. Maximum length: 40 characters.
     * @param ref {String} The repository branch that triggered this snapshot.
     * @param detector {module:model/SnapshotDetector} 
     * @param scanned {Date} The time at which the snapshot was scanned.
     */
    constructor(version, job, sha, ref, detector, scanned) { 
        
        Snapshot.initialize(this, version, job, sha, ref, detector, scanned);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, version, job, sha, ref, detector, scanned) { 
        obj['version'] = version;
        obj['job'] = job;
        obj['sha'] = sha;
        obj['ref'] = ref;
        obj['detector'] = detector;
        obj['scanned'] = scanned;
    }

    /**
     * Constructs a <code>Snapshot</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Snapshot} obj Optional instance to populate.
     * @return {module:model/Snapshot} The populated <code>Snapshot</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Snapshot();

            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
            if (data.hasOwnProperty('job')) {
                obj['job'] = SnapshotJob.constructFromObject(data['job']);
            }
            if (data.hasOwnProperty('sha')) {
                obj['sha'] = ApiClient.convertToType(data['sha'], 'String');
            }
            if (data.hasOwnProperty('ref')) {
                obj['ref'] = ApiClient.convertToType(data['ref'], 'String');
            }
            if (data.hasOwnProperty('detector')) {
                obj['detector'] = SnapshotDetector.constructFromObject(data['detector']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': Metadata1});
            }
            if (data.hasOwnProperty('manifests')) {
                obj['manifests'] = ApiClient.convertToType(data['manifests'], {'String': Manifest});
            }
            if (data.hasOwnProperty('scanned')) {
                obj['scanned'] = ApiClient.convertToType(data['scanned'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Snapshot</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Snapshot</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Snapshot.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `job`
        if (data['job']) { // data not null
          SnapshotJob.validateJSON(data['job']);
        }
        // ensure the json data is a string
        if (data['sha'] && !(typeof data['sha'] === 'string' || data['sha'] instanceof String)) {
            throw new Error("Expected the field `sha` to be a primitive type in the JSON string but got " + data['sha']);
        }
        // ensure the json data is a string
        if (data['ref'] && !(typeof data['ref'] === 'string' || data['ref'] instanceof String)) {
            throw new Error("Expected the field `ref` to be a primitive type in the JSON string but got " + data['ref']);
        }
        // validate the optional field `detector`
        if (data['detector']) { // data not null
          SnapshotDetector.validateJSON(data['detector']);
        }

        return true;
    }


}

Snapshot.RequiredProperties = ["version", "job", "sha", "ref", "detector", "scanned"];

/**
 * The version of the repository snapshot submission.
 * @member {Number} version
 */
Snapshot.prototype['version'] = undefined;

/**
 * @member {module:model/SnapshotJob} job
 */
Snapshot.prototype['job'] = undefined;

/**
 * The commit SHA associated with this dependency snapshot. Maximum length: 40 characters.
 * @member {String} sha
 */
Snapshot.prototype['sha'] = undefined;

/**
 * The repository branch that triggered this snapshot.
 * @member {String} ref
 */
Snapshot.prototype['ref'] = undefined;

/**
 * @member {module:model/SnapshotDetector} detector
 */
Snapshot.prototype['detector'] = undefined;

/**
 * User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
 * @member {Object.<String, module:model/Metadata1>} metadata
 */
Snapshot.prototype['metadata'] = undefined;

/**
 * A collection of package manifests, which are a collection of related dependencies declared in a file or representing a logical group of dependencies.
 * @member {Object.<String, module:model/Manifest>} manifests
 */
Snapshot.prototype['manifests'] = undefined;

/**
 * The time at which the snapshot was scanned.
 * @member {Date} scanned
 */
Snapshot.prototype['scanned'] = undefined;






export default Snapshot;

