/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApiOverviewDomains model module.
 * @module model/ApiOverviewDomains
 * @version 1.1.4
 */
class ApiOverviewDomains {
    /**
     * Constructs a new <code>ApiOverviewDomains</code>.
     * @alias module:model/ApiOverviewDomains
     */
    constructor() { 
        
        ApiOverviewDomains.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiOverviewDomains</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiOverviewDomains} obj Optional instance to populate.
     * @return {module:model/ApiOverviewDomains} The populated <code>ApiOverviewDomains</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiOverviewDomains();

            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], ['String']);
            }
            if (data.hasOwnProperty('codespaces')) {
                obj['codespaces'] = ApiClient.convertToType(data['codespaces'], ['String']);
            }
            if (data.hasOwnProperty('copilot')) {
                obj['copilot'] = ApiClient.convertToType(data['copilot'], ['String']);
            }
            if (data.hasOwnProperty('packages')) {
                obj['packages'] = ApiClient.convertToType(data['packages'], ['String']);
            }
            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiOverviewDomains</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiOverviewDomains</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['website'])) {
            throw new Error("Expected the field `website` to be an array in the JSON data but got " + data['website']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['codespaces'])) {
            throw new Error("Expected the field `codespaces` to be an array in the JSON data but got " + data['codespaces']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['copilot'])) {
            throw new Error("Expected the field `copilot` to be an array in the JSON data but got " + data['copilot']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['packages'])) {
            throw new Error("Expected the field `packages` to be an array in the JSON data but got " + data['packages']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['actions'])) {
            throw new Error("Expected the field `actions` to be an array in the JSON data but got " + data['actions']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} website
 */
ApiOverviewDomains.prototype['website'] = undefined;

/**
 * @member {Array.<String>} codespaces
 */
ApiOverviewDomains.prototype['codespaces'] = undefined;

/**
 * @member {Array.<String>} copilot
 */
ApiOverviewDomains.prototype['copilot'] = undefined;

/**
 * @member {Array.<String>} packages
 */
ApiOverviewDomains.prototype['packages'] = undefined;

/**
 * @member {Array.<String>} actions
 */
ApiOverviewDomains.prototype['actions'] = undefined;






export default ApiOverviewDomains;

