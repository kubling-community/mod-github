/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RepositoryIdAndRefName from './RepositoryIdAndRefName';
import RepositoryNameAndRefName from './RepositoryNameAndRefName';
import RepositoryPropertyAndRefName from './RepositoryPropertyAndRefName';
import RepositoryRulesetConditionsRefName from './RepositoryRulesetConditionsRefName';
import RepositoryRulesetConditionsRepositoryIdTargetRepositoryId from './RepositoryRulesetConditionsRepositoryIdTargetRepositoryId';
import RepositoryRulesetConditionsRepositoryNameTargetRepositoryName from './RepositoryRulesetConditionsRepositoryNameTargetRepositoryName';
import RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty from './RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty';

/**
 * The OrgRulesetConditions model module.
 * @module model/OrgRulesetConditions
 * @version 1.1.4
 */
class OrgRulesetConditions {
    /**
     * Constructs a new <code>OrgRulesetConditions</code>.
     * Conditions for an organization ruleset. The conditions object should contain both &#x60;repository_name&#x60; and &#x60;ref_name&#x60; properties or both &#x60;repository_id&#x60; and &#x60;ref_name&#x60; properties. 
     * @alias module:model/OrgRulesetConditions
     * @param {(module:model/RepositoryIdAndRefName|module:model/RepositoryNameAndRefName|module:model/RepositoryPropertyAndRefName)} instance The actual instance to initialize OrgRulesetConditions.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "RepositoryNameAndRefName") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RepositoryNameAndRefName.validateJSON(instance); // throw an exception if no match
                // create RepositoryNameAndRefName from JS object
                this.actualInstance = RepositoryNameAndRefName.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RepositoryNameAndRefName
            errorMessages.push("Failed to construct RepositoryNameAndRefName: " + err)
        }

        try {
            if (typeof instance === "RepositoryIdAndRefName") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RepositoryIdAndRefName.validateJSON(instance); // throw an exception if no match
                // create RepositoryIdAndRefName from JS object
                this.actualInstance = RepositoryIdAndRefName.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RepositoryIdAndRefName
            errorMessages.push("Failed to construct RepositoryIdAndRefName: " + err)
        }

        try {
            if (typeof instance === "RepositoryPropertyAndRefName") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RepositoryPropertyAndRefName.validateJSON(instance); // throw an exception if no match
                // create RepositoryPropertyAndRefName from JS object
                this.actualInstance = RepositoryPropertyAndRefName.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RepositoryPropertyAndRefName
            errorMessages.push("Failed to construct RepositoryPropertyAndRefName: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `OrgRulesetConditions` with oneOf schemas RepositoryIdAndRefName, RepositoryNameAndRefName, RepositoryPropertyAndRefName. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `OrgRulesetConditions` with oneOf schemas RepositoryIdAndRefName, RepositoryNameAndRefName, RepositoryPropertyAndRefName. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>OrgRulesetConditions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrgRulesetConditions} obj Optional instance to populate.
     * @return {module:model/OrgRulesetConditions} The populated <code>OrgRulesetConditions</code> instance.
     */
    static constructFromObject(data, obj) {
        return new OrgRulesetConditions(data);
    }

    /**
     * Gets the actual instance, which can be <code>RepositoryIdAndRefName</code>, <code>RepositoryNameAndRefName</code>, <code>RepositoryPropertyAndRefName</code>.
     * @return {(module:model/RepositoryIdAndRefName|module:model/RepositoryNameAndRefName|module:model/RepositoryPropertyAndRefName)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>RepositoryIdAndRefName</code>, <code>RepositoryNameAndRefName</code>, <code>RepositoryPropertyAndRefName</code>.
     * @param {(module:model/RepositoryIdAndRefName|module:model/RepositoryNameAndRefName|module:model/RepositoryPropertyAndRefName)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = OrgRulesetConditions.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of OrgRulesetConditions from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/OrgRulesetConditions} An instance of OrgRulesetConditions.
     */
    static fromJSON = function(json_string){
        return OrgRulesetConditions.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/RepositoryRulesetConditionsRefName} ref_name
 */
OrgRulesetConditions.prototype['ref_name'] = undefined;

/**
 * @member {module:model/RepositoryRulesetConditionsRepositoryNameTargetRepositoryName} repository_name
 */
OrgRulesetConditions.prototype['repository_name'] = undefined;

/**
 * @member {module:model/RepositoryRulesetConditionsRepositoryIdTargetRepositoryId} repository_id
 */
OrgRulesetConditions.prototype['repository_id'] = undefined;

/**
 * @member {module:model/RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty} repository_property
 */
OrgRulesetConditions.prototype['repository_property'] = undefined;


OrgRulesetConditions.OneOf = ["RepositoryIdAndRefName", "RepositoryNameAndRefName", "RepositoryPropertyAndRefName"];

export default OrgRulesetConditions;

