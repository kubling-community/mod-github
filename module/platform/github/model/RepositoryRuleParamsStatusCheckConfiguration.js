/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RepositoryRuleParamsStatusCheckConfiguration model module.
 * @module model/RepositoryRuleParamsStatusCheckConfiguration
 * @version 1.1.4
 */
class RepositoryRuleParamsStatusCheckConfiguration {
    /**
     * Constructs a new <code>RepositoryRuleParamsStatusCheckConfiguration</code>.
     * Required status check
     * @alias module:model/RepositoryRuleParamsStatusCheckConfiguration
     * @param context {String} The status check context name that must be present on the commit.
     */
    constructor(context) { 
        
        RepositoryRuleParamsStatusCheckConfiguration.initialize(this, context);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, context) { 
        obj['context'] = context;
    }

    /**
     * Constructs a <code>RepositoryRuleParamsStatusCheckConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepositoryRuleParamsStatusCheckConfiguration} obj Optional instance to populate.
     * @return {module:model/RepositoryRuleParamsStatusCheckConfiguration} The populated <code>RepositoryRuleParamsStatusCheckConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepositoryRuleParamsStatusCheckConfiguration();

            if (data.hasOwnProperty('context')) {
                obj['context'] = ApiClient.convertToType(data['context'], 'String');
            }
            if (data.hasOwnProperty('integration_id')) {
                obj['integration_id'] = ApiClient.convertToType(data['integration_id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepositoryRuleParamsStatusCheckConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepositoryRuleParamsStatusCheckConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RepositoryRuleParamsStatusCheckConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['context'] && !(typeof data['context'] === 'string' || data['context'] instanceof String)) {
            throw new Error("Expected the field `context` to be a primitive type in the JSON string but got " + data['context']);
        }

        return true;
    }


}

RepositoryRuleParamsStatusCheckConfiguration.RequiredProperties = ["context"];

/**
 * The status check context name that must be present on the commit.
 * @member {String} context
 */
RepositoryRuleParamsStatusCheckConfiguration.prototype['context'] = undefined;

/**
 * The optional integration ID that this status check must originate from.
 * @member {Number} integration_id
 */
RepositoryRuleParamsStatusCheckConfiguration.prototype['integration_id'] = undefined;






export default RepositoryRuleParamsStatusCheckConfiguration;

