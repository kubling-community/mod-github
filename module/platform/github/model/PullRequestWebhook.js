/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthorAssociation from './AuthorAssociation';
import AutoMerge from './AutoMerge';
import NullableMilestone from './NullableMilestone';
import NullableSimpleUser from './NullableSimpleUser';
import PullRequest from './PullRequest';
import PullRequestBase from './PullRequestBase';
import PullRequestHead from './PullRequestHead';
import PullRequestLabelsInner from './PullRequestLabelsInner';
import PullRequestSimpleLinks from './PullRequestSimpleLinks';
import SimpleUser from './SimpleUser';
import TeamSimple from './TeamSimple';

/**
 * The PullRequestWebhook model module.
 * @module model/PullRequestWebhook
 * @version 1.1.4
 */
class PullRequestWebhook {
    /**
     * Constructs a new <code>PullRequestWebhook</code>.
     * @alias module:model/PullRequestWebhook
     * @implements module:model/PullRequest
     * @param url {String} 
     * @param id {Number} 
     * @param nodeId {String} 
     * @param htmlUrl {String} 
     * @param diffUrl {String} 
     * @param patchUrl {String} 
     * @param issueUrl {String} 
     * @param commitsUrl {String} 
     * @param reviewCommentsUrl {String} 
     * @param reviewCommentUrl {String} 
     * @param commentsUrl {String} 
     * @param statusesUrl {String} 
     * @param number {Number} Number uniquely identifying the pull request within its repository.
     * @param state {module:model/PullRequestWebhook.StateEnum} State of this Pull Request. Either `open` or `closed`.
     * @param locked {Boolean} 
     * @param title {String} The title of the pull request.
     * @param user {module:model/SimpleUser} 
     * @param body {String} 
     * @param labels {Array.<module:model/PullRequestLabelsInner>} 
     * @param milestone {module:model/NullableMilestone} 
     * @param createdAt {Date} 
     * @param updatedAt {Date} 
     * @param closedAt {Date} 
     * @param mergedAt {Date} 
     * @param mergeCommitSha {String} 
     * @param assignee {module:model/NullableSimpleUser} 
     * @param head {module:model/PullRequestHead} 
     * @param base {module:model/PullRequestBase} 
     * @param links {module:model/PullRequestSimpleLinks} 
     * @param authorAssociation {module:model/AuthorAssociation} 
     * @param autoMerge {module:model/AutoMerge} 
     * @param merged {Boolean} 
     * @param mergeable {Boolean} 
     * @param mergeableState {String} 
     * @param mergedBy {module:model/NullableSimpleUser} 
     * @param comments {Number} 
     * @param reviewComments {Number} 
     * @param maintainerCanModify {Boolean} Indicates whether maintainers can modify the pull request.
     * @param commits {Number} 
     * @param additions {Number} 
     * @param deletions {Number} 
     * @param changedFiles {Number} 
     */
    constructor(url, id, nodeId, htmlUrl, diffUrl, patchUrl, issueUrl, commitsUrl, reviewCommentsUrl, reviewCommentUrl, commentsUrl, statusesUrl, number, state, locked, title, user, body, labels, milestone, createdAt, updatedAt, closedAt, mergedAt, mergeCommitSha, assignee, head, base, links, authorAssociation, autoMerge, merged, mergeable, mergeableState, mergedBy, comments, reviewComments, maintainerCanModify, commits, additions, deletions, changedFiles) { 
        PullRequest.initialize(this, links, activeLockReason, assignee, assignees, authorAssociation, autoMerge, base, body, closedAt, commentsUrl, commitsUrl, createdAt, diffUrl, draft, head, htmlUrl, id, issueUrl, labels, locked, mergeCommitSha, mergedAt, milestone, nodeId, number, patchUrl, requestedReviewers, requestedTeams, reviewCommentUrl, reviewCommentsUrl, state, statusesUrl, title, updatedAt, url, user);
        PullRequestWebhook.initialize(this, url, id, nodeId, htmlUrl, diffUrl, patchUrl, issueUrl, commitsUrl, reviewCommentsUrl, reviewCommentUrl, commentsUrl, statusesUrl, number, state, locked, title, user, body, labels, milestone, createdAt, updatedAt, closedAt, mergedAt, mergeCommitSha, assignee, head, base, links, authorAssociation, autoMerge, merged, mergeable, mergeableState, mergedBy, comments, reviewComments, maintainerCanModify, commits, additions, deletions, changedFiles);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, url, id, nodeId, htmlUrl, diffUrl, patchUrl, issueUrl, commitsUrl, reviewCommentsUrl, reviewCommentUrl, commentsUrl, statusesUrl, number, state, locked, title, user, body, labels, milestone, createdAt, updatedAt, closedAt, mergedAt, mergeCommitSha, assignee, head, base, links, authorAssociation, autoMerge, merged, mergeable, mergeableState, mergedBy, comments, reviewComments, maintainerCanModify, commits, additions, deletions, changedFiles) { 
        obj['url'] = url;
        obj['id'] = id;
        obj['node_id'] = nodeId;
        obj['html_url'] = htmlUrl;
        obj['diff_url'] = diffUrl;
        obj['patch_url'] = patchUrl;
        obj['issue_url'] = issueUrl;
        obj['commits_url'] = commitsUrl;
        obj['review_comments_url'] = reviewCommentsUrl;
        obj['review_comment_url'] = reviewCommentUrl;
        obj['comments_url'] = commentsUrl;
        obj['statuses_url'] = statusesUrl;
        obj['number'] = number;
        obj['state'] = state;
        obj['locked'] = locked;
        obj['title'] = title;
        obj['user'] = user;
        obj['body'] = body;
        obj['labels'] = labels;
        obj['milestone'] = milestone;
        obj['created_at'] = createdAt;
        obj['updated_at'] = updatedAt;
        obj['closed_at'] = closedAt;
        obj['merged_at'] = mergedAt;
        obj['merge_commit_sha'] = mergeCommitSha;
        obj['assignee'] = assignee;
        obj['head'] = head;
        obj['base'] = base;
        obj['_links'] = links;
        obj['author_association'] = authorAssociation;
        obj['auto_merge'] = autoMerge;
        obj['merged'] = merged;
        obj['mergeable'] = mergeable;
        obj['mergeable_state'] = mergeableState;
        obj['merged_by'] = mergedBy;
        obj['comments'] = comments;
        obj['review_comments'] = reviewComments;
        obj['maintainer_can_modify'] = maintainerCanModify;
        obj['commits'] = commits;
        obj['additions'] = additions;
        obj['deletions'] = deletions;
        obj['changed_files'] = changedFiles;
    }

    /**
     * Constructs a <code>PullRequestWebhook</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PullRequestWebhook} obj Optional instance to populate.
     * @return {module:model/PullRequestWebhook} The populated <code>PullRequestWebhook</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PullRequestWebhook();
            PullRequest.constructFromObject(data, obj);

            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('diff_url')) {
                obj['diff_url'] = ApiClient.convertToType(data['diff_url'], 'String');
            }
            if (data.hasOwnProperty('patch_url')) {
                obj['patch_url'] = ApiClient.convertToType(data['patch_url'], 'String');
            }
            if (data.hasOwnProperty('issue_url')) {
                obj['issue_url'] = ApiClient.convertToType(data['issue_url'], 'String');
            }
            if (data.hasOwnProperty('commits_url')) {
                obj['commits_url'] = ApiClient.convertToType(data['commits_url'], 'String');
            }
            if (data.hasOwnProperty('review_comments_url')) {
                obj['review_comments_url'] = ApiClient.convertToType(data['review_comments_url'], 'String');
            }
            if (data.hasOwnProperty('review_comment_url')) {
                obj['review_comment_url'] = ApiClient.convertToType(data['review_comment_url'], 'String');
            }
            if (data.hasOwnProperty('comments_url')) {
                obj['comments_url'] = ApiClient.convertToType(data['comments_url'], 'String');
            }
            if (data.hasOwnProperty('statuses_url')) {
                obj['statuses_url'] = ApiClient.convertToType(data['statuses_url'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('locked')) {
                obj['locked'] = ApiClient.convertToType(data['locked'], 'Boolean');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = SimpleUser.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [PullRequestLabelsInner]);
            }
            if (data.hasOwnProperty('milestone')) {
                obj['milestone'] = NullableMilestone.constructFromObject(data['milestone']);
            }
            if (data.hasOwnProperty('active_lock_reason')) {
                obj['active_lock_reason'] = ApiClient.convertToType(data['active_lock_reason'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('closed_at')) {
                obj['closed_at'] = ApiClient.convertToType(data['closed_at'], 'Date');
            }
            if (data.hasOwnProperty('merged_at')) {
                obj['merged_at'] = ApiClient.convertToType(data['merged_at'], 'Date');
            }
            if (data.hasOwnProperty('merge_commit_sha')) {
                obj['merge_commit_sha'] = ApiClient.convertToType(data['merge_commit_sha'], 'String');
            }
            if (data.hasOwnProperty('assignee')) {
                obj['assignee'] = NullableSimpleUser.constructFromObject(data['assignee']);
            }
            if (data.hasOwnProperty('assignees')) {
                obj['assignees'] = ApiClient.convertToType(data['assignees'], [SimpleUser]);
            }
            if (data.hasOwnProperty('requested_reviewers')) {
                obj['requested_reviewers'] = ApiClient.convertToType(data['requested_reviewers'], [SimpleUser]);
            }
            if (data.hasOwnProperty('requested_teams')) {
                obj['requested_teams'] = ApiClient.convertToType(data['requested_teams'], [TeamSimple]);
            }
            if (data.hasOwnProperty('head')) {
                obj['head'] = PullRequestHead.constructFromObject(data['head']);
            }
            if (data.hasOwnProperty('base')) {
                obj['base'] = PullRequestBase.constructFromObject(data['base']);
            }
            if (data.hasOwnProperty('_links')) {
                obj['_links'] = PullRequestSimpleLinks.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('author_association')) {
                obj['author_association'] = AuthorAssociation.constructFromObject(data['author_association']);
            }
            if (data.hasOwnProperty('auto_merge')) {
                obj['auto_merge'] = AutoMerge.constructFromObject(data['auto_merge']);
            }
            if (data.hasOwnProperty('draft')) {
                obj['draft'] = ApiClient.convertToType(data['draft'], 'Boolean');
            }
            if (data.hasOwnProperty('merged')) {
                obj['merged'] = ApiClient.convertToType(data['merged'], 'Boolean');
            }
            if (data.hasOwnProperty('mergeable')) {
                obj['mergeable'] = ApiClient.convertToType(data['mergeable'], 'Boolean');
            }
            if (data.hasOwnProperty('rebaseable')) {
                obj['rebaseable'] = ApiClient.convertToType(data['rebaseable'], 'Boolean');
            }
            if (data.hasOwnProperty('mergeable_state')) {
                obj['mergeable_state'] = ApiClient.convertToType(data['mergeable_state'], 'String');
            }
            if (data.hasOwnProperty('merged_by')) {
                obj['merged_by'] = NullableSimpleUser.constructFromObject(data['merged_by']);
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'Number');
            }
            if (data.hasOwnProperty('review_comments')) {
                obj['review_comments'] = ApiClient.convertToType(data['review_comments'], 'Number');
            }
            if (data.hasOwnProperty('maintainer_can_modify')) {
                obj['maintainer_can_modify'] = ApiClient.convertToType(data['maintainer_can_modify'], 'Boolean');
            }
            if (data.hasOwnProperty('commits')) {
                obj['commits'] = ApiClient.convertToType(data['commits'], 'Number');
            }
            if (data.hasOwnProperty('additions')) {
                obj['additions'] = ApiClient.convertToType(data['additions'], 'Number');
            }
            if (data.hasOwnProperty('deletions')) {
                obj['deletions'] = ApiClient.convertToType(data['deletions'], 'Number');
            }
            if (data.hasOwnProperty('changed_files')) {
                obj['changed_files'] = ApiClient.convertToType(data['changed_files'], 'Number');
            }
            if (data.hasOwnProperty('allow_auto_merge')) {
                obj['allow_auto_merge'] = ApiClient.convertToType(data['allow_auto_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_update_branch')) {
                obj['allow_update_branch'] = ApiClient.convertToType(data['allow_update_branch'], 'Boolean');
            }
            if (data.hasOwnProperty('delete_branch_on_merge')) {
                obj['delete_branch_on_merge'] = ApiClient.convertToType(data['delete_branch_on_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('merge_commit_message')) {
                obj['merge_commit_message'] = ApiClient.convertToType(data['merge_commit_message'], 'String');
            }
            if (data.hasOwnProperty('merge_commit_title')) {
                obj['merge_commit_title'] = ApiClient.convertToType(data['merge_commit_title'], 'String');
            }
            if (data.hasOwnProperty('squash_merge_commit_message')) {
                obj['squash_merge_commit_message'] = ApiClient.convertToType(data['squash_merge_commit_message'], 'String');
            }
            if (data.hasOwnProperty('squash_merge_commit_title')) {
                obj['squash_merge_commit_title'] = ApiClient.convertToType(data['squash_merge_commit_title'], 'String');
            }
            if (data.hasOwnProperty('use_squash_pr_title_as_default')) {
                obj['use_squash_pr_title_as_default'] = ApiClient.convertToType(data['use_squash_pr_title_as_default'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PullRequestWebhook</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PullRequestWebhook</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PullRequestWebhook.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['diff_url'] && !(typeof data['diff_url'] === 'string' || data['diff_url'] instanceof String)) {
            throw new Error("Expected the field `diff_url` to be a primitive type in the JSON string but got " + data['diff_url']);
        }
        // ensure the json data is a string
        if (data['patch_url'] && !(typeof data['patch_url'] === 'string' || data['patch_url'] instanceof String)) {
            throw new Error("Expected the field `patch_url` to be a primitive type in the JSON string but got " + data['patch_url']);
        }
        // ensure the json data is a string
        if (data['issue_url'] && !(typeof data['issue_url'] === 'string' || data['issue_url'] instanceof String)) {
            throw new Error("Expected the field `issue_url` to be a primitive type in the JSON string but got " + data['issue_url']);
        }
        // ensure the json data is a string
        if (data['commits_url'] && !(typeof data['commits_url'] === 'string' || data['commits_url'] instanceof String)) {
            throw new Error("Expected the field `commits_url` to be a primitive type in the JSON string but got " + data['commits_url']);
        }
        // ensure the json data is a string
        if (data['review_comments_url'] && !(typeof data['review_comments_url'] === 'string' || data['review_comments_url'] instanceof String)) {
            throw new Error("Expected the field `review_comments_url` to be a primitive type in the JSON string but got " + data['review_comments_url']);
        }
        // ensure the json data is a string
        if (data['review_comment_url'] && !(typeof data['review_comment_url'] === 'string' || data['review_comment_url'] instanceof String)) {
            throw new Error("Expected the field `review_comment_url` to be a primitive type in the JSON string but got " + data['review_comment_url']);
        }
        // ensure the json data is a string
        if (data['comments_url'] && !(typeof data['comments_url'] === 'string' || data['comments_url'] instanceof String)) {
            throw new Error("Expected the field `comments_url` to be a primitive type in the JSON string but got " + data['comments_url']);
        }
        // ensure the json data is a string
        if (data['statuses_url'] && !(typeof data['statuses_url'] === 'string' || data['statuses_url'] instanceof String)) {
            throw new Error("Expected the field `statuses_url` to be a primitive type in the JSON string but got " + data['statuses_url']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          SimpleUser.validateJSON(data['user']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                PullRequestLabelsInner.validateJSON(item);
            };
        }
        // validate the optional field `milestone`
        if (data['milestone']) { // data not null
          NullableMilestone.validateJSON(data['milestone']);
        }
        // ensure the json data is a string
        if (data['active_lock_reason'] && !(typeof data['active_lock_reason'] === 'string' || data['active_lock_reason'] instanceof String)) {
            throw new Error("Expected the field `active_lock_reason` to be a primitive type in the JSON string but got " + data['active_lock_reason']);
        }
        // ensure the json data is a string
        if (data['merge_commit_sha'] && !(typeof data['merge_commit_sha'] === 'string' || data['merge_commit_sha'] instanceof String)) {
            throw new Error("Expected the field `merge_commit_sha` to be a primitive type in the JSON string but got " + data['merge_commit_sha']);
        }
        // validate the optional field `assignee`
        if (data['assignee']) { // data not null
          NullableSimpleUser.validateJSON(data['assignee']);
        }
        if (data['assignees']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['assignees'])) {
                throw new Error("Expected the field `assignees` to be an array in the JSON data but got " + data['assignees']);
            }
            // validate the optional field `assignees` (array)
            for (const item of data['assignees']) {
                SimpleUser.validateJSON(item);
            };
        }
        if (data['requested_reviewers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['requested_reviewers'])) {
                throw new Error("Expected the field `requested_reviewers` to be an array in the JSON data but got " + data['requested_reviewers']);
            }
            // validate the optional field `requested_reviewers` (array)
            for (const item of data['requested_reviewers']) {
                SimpleUser.validateJSON(item);
            };
        }
        if (data['requested_teams']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['requested_teams'])) {
                throw new Error("Expected the field `requested_teams` to be an array in the JSON data but got " + data['requested_teams']);
            }
            // validate the optional field `requested_teams` (array)
            for (const item of data['requested_teams']) {
                TeamSimple.validateJSON(item);
            };
        }
        // validate the optional field `head`
        if (data['head']) { // data not null
          PullRequestHead.validateJSON(data['head']);
        }
        // validate the optional field `base`
        if (data['base']) { // data not null
          PullRequestBase.validateJSON(data['base']);
        }
        // validate the optional field `_links`
        if (data['_links']) { // data not null
          PullRequestSimpleLinks.validateJSON(data['_links']);
        }
        // validate the optional field `auto_merge`
        if (data['auto_merge']) { // data not null
          AutoMerge.validateJSON(data['auto_merge']);
        }
        // ensure the json data is a string
        if (data['mergeable_state'] && !(typeof data['mergeable_state'] === 'string' || data['mergeable_state'] instanceof String)) {
            throw new Error("Expected the field `mergeable_state` to be a primitive type in the JSON string but got " + data['mergeable_state']);
        }
        // validate the optional field `merged_by`
        if (data['merged_by']) { // data not null
          NullableSimpleUser.validateJSON(data['merged_by']);
        }
        // ensure the json data is a string
        if (data['merge_commit_message'] && !(typeof data['merge_commit_message'] === 'string' || data['merge_commit_message'] instanceof String)) {
            throw new Error("Expected the field `merge_commit_message` to be a primitive type in the JSON string but got " + data['merge_commit_message']);
        }
        // ensure the json data is a string
        if (data['merge_commit_title'] && !(typeof data['merge_commit_title'] === 'string' || data['merge_commit_title'] instanceof String)) {
            throw new Error("Expected the field `merge_commit_title` to be a primitive type in the JSON string but got " + data['merge_commit_title']);
        }
        // ensure the json data is a string
        if (data['squash_merge_commit_message'] && !(typeof data['squash_merge_commit_message'] === 'string' || data['squash_merge_commit_message'] instanceof String)) {
            throw new Error("Expected the field `squash_merge_commit_message` to be a primitive type in the JSON string but got " + data['squash_merge_commit_message']);
        }
        // ensure the json data is a string
        if (data['squash_merge_commit_title'] && !(typeof data['squash_merge_commit_title'] === 'string' || data['squash_merge_commit_title'] instanceof String)) {
            throw new Error("Expected the field `squash_merge_commit_title` to be a primitive type in the JSON string but got " + data['squash_merge_commit_title']);
        }

        return true;
    }


}

PullRequestWebhook.RequiredProperties = ["url", "id", "node_id", "html_url", "diff_url", "patch_url", "issue_url", "commits_url", "review_comments_url", "review_comment_url", "comments_url", "statuses_url", "number", "state", "locked", "title", "user", "body", "labels", "milestone", "created_at", "updated_at", "closed_at", "merged_at", "merge_commit_sha", "assignee", "head", "base", "_links", "author_association", "auto_merge", "merged", "mergeable", "mergeable_state", "merged_by", "comments", "review_comments", "maintainer_can_modify", "commits", "additions", "deletions", "changed_files"];

/**
 * @member {String} url
 */
PullRequestWebhook.prototype['url'] = undefined;

/**
 * @member {Number} id
 */
PullRequestWebhook.prototype['id'] = undefined;

/**
 * @member {String} node_id
 */
PullRequestWebhook.prototype['node_id'] = undefined;

/**
 * @member {String} html_url
 */
PullRequestWebhook.prototype['html_url'] = undefined;

/**
 * @member {String} diff_url
 */
PullRequestWebhook.prototype['diff_url'] = undefined;

/**
 * @member {String} patch_url
 */
PullRequestWebhook.prototype['patch_url'] = undefined;

/**
 * @member {String} issue_url
 */
PullRequestWebhook.prototype['issue_url'] = undefined;

/**
 * @member {String} commits_url
 */
PullRequestWebhook.prototype['commits_url'] = undefined;

/**
 * @member {String} review_comments_url
 */
PullRequestWebhook.prototype['review_comments_url'] = undefined;

/**
 * @member {String} review_comment_url
 */
PullRequestWebhook.prototype['review_comment_url'] = undefined;

/**
 * @member {String} comments_url
 */
PullRequestWebhook.prototype['comments_url'] = undefined;

/**
 * @member {String} statuses_url
 */
PullRequestWebhook.prototype['statuses_url'] = undefined;

/**
 * Number uniquely identifying the pull request within its repository.
 * @member {Number} number
 */
PullRequestWebhook.prototype['number'] = undefined;

/**
 * State of this Pull Request. Either `open` or `closed`.
 * @member {module:model/PullRequestWebhook.StateEnum} state
 */
PullRequestWebhook.prototype['state'] = undefined;

/**
 * @member {Boolean} locked
 */
PullRequestWebhook.prototype['locked'] = undefined;

/**
 * The title of the pull request.
 * @member {String} title
 */
PullRequestWebhook.prototype['title'] = undefined;

/**
 * @member {module:model/SimpleUser} user
 */
PullRequestWebhook.prototype['user'] = undefined;

/**
 * @member {String} body
 */
PullRequestWebhook.prototype['body'] = undefined;

/**
 * @member {Array.<module:model/PullRequestLabelsInner>} labels
 */
PullRequestWebhook.prototype['labels'] = undefined;

/**
 * @member {module:model/NullableMilestone} milestone
 */
PullRequestWebhook.prototype['milestone'] = undefined;

/**
 * @member {String} active_lock_reason
 */
PullRequestWebhook.prototype['active_lock_reason'] = undefined;

/**
 * @member {Date} created_at
 */
PullRequestWebhook.prototype['created_at'] = undefined;

/**
 * @member {Date} updated_at
 */
PullRequestWebhook.prototype['updated_at'] = undefined;

/**
 * @member {Date} closed_at
 */
PullRequestWebhook.prototype['closed_at'] = undefined;

/**
 * @member {Date} merged_at
 */
PullRequestWebhook.prototype['merged_at'] = undefined;

/**
 * @member {String} merge_commit_sha
 */
PullRequestWebhook.prototype['merge_commit_sha'] = undefined;

/**
 * @member {module:model/NullableSimpleUser} assignee
 */
PullRequestWebhook.prototype['assignee'] = undefined;

/**
 * @member {Array.<module:model/SimpleUser>} assignees
 */
PullRequestWebhook.prototype['assignees'] = undefined;

/**
 * @member {Array.<module:model/SimpleUser>} requested_reviewers
 */
PullRequestWebhook.prototype['requested_reviewers'] = undefined;

/**
 * @member {Array.<module:model/TeamSimple>} requested_teams
 */
PullRequestWebhook.prototype['requested_teams'] = undefined;

/**
 * @member {module:model/PullRequestHead} head
 */
PullRequestWebhook.prototype['head'] = undefined;

/**
 * @member {module:model/PullRequestBase} base
 */
PullRequestWebhook.prototype['base'] = undefined;

/**
 * @member {module:model/PullRequestSimpleLinks} _links
 */
PullRequestWebhook.prototype['_links'] = undefined;

/**
 * @member {module:model/AuthorAssociation} author_association
 */
PullRequestWebhook.prototype['author_association'] = undefined;

/**
 * @member {module:model/AutoMerge} auto_merge
 */
PullRequestWebhook.prototype['auto_merge'] = undefined;

/**
 * Indicates whether or not the pull request is a draft.
 * @member {Boolean} draft
 */
PullRequestWebhook.prototype['draft'] = undefined;

/**
 * @member {Boolean} merged
 */
PullRequestWebhook.prototype['merged'] = undefined;

/**
 * @member {Boolean} mergeable
 */
PullRequestWebhook.prototype['mergeable'] = undefined;

/**
 * @member {Boolean} rebaseable
 */
PullRequestWebhook.prototype['rebaseable'] = undefined;

/**
 * @member {String} mergeable_state
 */
PullRequestWebhook.prototype['mergeable_state'] = undefined;

/**
 * @member {module:model/NullableSimpleUser} merged_by
 */
PullRequestWebhook.prototype['merged_by'] = undefined;

/**
 * @member {Number} comments
 */
PullRequestWebhook.prototype['comments'] = undefined;

/**
 * @member {Number} review_comments
 */
PullRequestWebhook.prototype['review_comments'] = undefined;

/**
 * Indicates whether maintainers can modify the pull request.
 * @member {Boolean} maintainer_can_modify
 */
PullRequestWebhook.prototype['maintainer_can_modify'] = undefined;

/**
 * @member {Number} commits
 */
PullRequestWebhook.prototype['commits'] = undefined;

/**
 * @member {Number} additions
 */
PullRequestWebhook.prototype['additions'] = undefined;

/**
 * @member {Number} deletions
 */
PullRequestWebhook.prototype['deletions'] = undefined;

/**
 * @member {Number} changed_files
 */
PullRequestWebhook.prototype['changed_files'] = undefined;

/**
 * Whether to allow auto-merge for pull requests.
 * @member {Boolean} allow_auto_merge
 * @default false
 */
PullRequestWebhook.prototype['allow_auto_merge'] = false;

/**
 * Whether to allow updating the pull request's branch.
 * @member {Boolean} allow_update_branch
 */
PullRequestWebhook.prototype['allow_update_branch'] = undefined;

/**
 * Whether to delete head branches when pull requests are merged.
 * @member {Boolean} delete_branch_on_merge
 * @default false
 */
PullRequestWebhook.prototype['delete_branch_on_merge'] = false;

/**
 * The default value for a merge commit message. - `PR_TITLE` - default to the pull request's title. - `PR_BODY` - default to the pull request's body. - `BLANK` - default to a blank commit message.
 * @member {module:model/PullRequestWebhook.MergeCommitMessageEnum} merge_commit_message
 */
PullRequestWebhook.prototype['merge_commit_message'] = undefined;

/**
 * The default value for a merge commit title. - `PR_TITLE` - default to the pull request's title. - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., \"Merge pull request #123 from branch-name\").
 * @member {module:model/PullRequestWebhook.MergeCommitTitleEnum} merge_commit_title
 */
PullRequestWebhook.prototype['merge_commit_title'] = undefined;

/**
 * The default value for a squash merge commit message: - `PR_BODY` - default to the pull request's body. - `COMMIT_MESSAGES` - default to the branch's commit messages. - `BLANK` - default to a blank commit message.
 * @member {module:model/PullRequestWebhook.SquashMergeCommitMessageEnum} squash_merge_commit_message
 */
PullRequestWebhook.prototype['squash_merge_commit_message'] = undefined;

/**
 * The default value for a squash merge commit title: - `PR_TITLE` - default to the pull request's title. - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
 * @member {module:model/PullRequestWebhook.SquashMergeCommitTitleEnum} squash_merge_commit_title
 */
PullRequestWebhook.prototype['squash_merge_commit_title'] = undefined;

/**
 * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**
 * @member {Boolean} use_squash_pr_title_as_default
 * @default false
 */
PullRequestWebhook.prototype['use_squash_pr_title_as_default'] = false;


// Implement PullRequest interface:
/**
 * @member {module:model/WebhooksPullRequest5Links} _links
 */
PullRequest.prototype['_links'] = undefined;
/**
 * @member {module:model/PullRequest.ActiveLockReasonEnum} active_lock_reason
 */
PullRequest.prototype['active_lock_reason'] = undefined;
/**
 * @member {Number} additions
 */
PullRequest.prototype['additions'] = undefined;
/**
 * @member {module:model/User1} assignee
 */
PullRequest.prototype['assignee'] = undefined;
/**
 * @member {Array.<module:model/User1>} assignees
 */
PullRequest.prototype['assignees'] = undefined;
/**
 * How the author is associated with the repository.
 * @member {module:model/PullRequest.AuthorAssociationEnum} author_association
 */
PullRequest.prototype['author_association'] = undefined;
/**
 * @member {module:model/PullRequestAutoMerge} auto_merge
 */
PullRequest.prototype['auto_merge'] = undefined;
/**
 * @member {module:model/PullRequestBase} base
 */
PullRequest.prototype['base'] = undefined;
/**
 * @member {String} body
 */
PullRequest.prototype['body'] = undefined;
/**
 * @member {Number} changed_files
 */
PullRequest.prototype['changed_files'] = undefined;
/**
 * @member {Date} closed_at
 */
PullRequest.prototype['closed_at'] = undefined;
/**
 * @member {Number} comments
 */
PullRequest.prototype['comments'] = undefined;
/**
 * @member {String} comments_url
 */
PullRequest.prototype['comments_url'] = undefined;
/**
 * @member {Number} commits
 */
PullRequest.prototype['commits'] = undefined;
/**
 * @member {String} commits_url
 */
PullRequest.prototype['commits_url'] = undefined;
/**
 * @member {Date} created_at
 */
PullRequest.prototype['created_at'] = undefined;
/**
 * @member {Number} deletions
 */
PullRequest.prototype['deletions'] = undefined;
/**
 * @member {String} diff_url
 */
PullRequest.prototype['diff_url'] = undefined;
/**
 * Indicates whether or not the pull request is a draft.
 * @member {Boolean} draft
 */
PullRequest.prototype['draft'] = undefined;
/**
 * @member {module:model/PullRequestHead} head
 */
PullRequest.prototype['head'] = undefined;
/**
 * @member {String} html_url
 */
PullRequest.prototype['html_url'] = undefined;
/**
 * @member {Number} id
 */
PullRequest.prototype['id'] = undefined;
/**
 * @member {String} issue_url
 */
PullRequest.prototype['issue_url'] = undefined;
/**
 * @member {Array.<module:model/Label>} labels
 */
PullRequest.prototype['labels'] = undefined;
/**
 * @member {Boolean} locked
 */
PullRequest.prototype['locked'] = undefined;
/**
 * Indicates whether maintainers can modify the pull request.
 * @member {Boolean} maintainer_can_modify
 */
PullRequest.prototype['maintainer_can_modify'] = undefined;
/**
 * @member {String} merge_commit_sha
 */
PullRequest.prototype['merge_commit_sha'] = undefined;
/**
 * @member {Boolean} mergeable
 */
PullRequest.prototype['mergeable'] = undefined;
/**
 * @member {String} mergeable_state
 */
PullRequest.prototype['mergeable_state'] = undefined;
/**
 * @member {Boolean} merged
 */
PullRequest.prototype['merged'] = undefined;
/**
 * @member {Date} merged_at
 */
PullRequest.prototype['merged_at'] = undefined;
/**
 * @member {module:model/User} merged_by
 */
PullRequest.prototype['merged_by'] = undefined;
/**
 * @member {module:model/Milestone} milestone
 */
PullRequest.prototype['milestone'] = undefined;
/**
 * @member {String} node_id
 */
PullRequest.prototype['node_id'] = undefined;
/**
 * Number uniquely identifying the pull request within its repository.
 * @member {Number} number
 */
PullRequest.prototype['number'] = undefined;
/**
 * @member {String} patch_url
 */
PullRequest.prototype['patch_url'] = undefined;
/**
 * @member {Boolean} rebaseable
 */
PullRequest.prototype['rebaseable'] = undefined;
/**
 * @member {Array.<module:model/PullRequestRequestedReviewersInner>} requested_reviewers
 */
PullRequest.prototype['requested_reviewers'] = undefined;
/**
 * @member {Array.<module:model/Team>} requested_teams
 */
PullRequest.prototype['requested_teams'] = undefined;
/**
 * @member {String} review_comment_url
 */
PullRequest.prototype['review_comment_url'] = undefined;
/**
 * @member {Number} review_comments
 */
PullRequest.prototype['review_comments'] = undefined;
/**
 * @member {String} review_comments_url
 */
PullRequest.prototype['review_comments_url'] = undefined;
/**
 * State of this Pull Request. Either `open` or `closed`.
 * @member {module:model/PullRequest.StateEnum} state
 */
PullRequest.prototype['state'] = undefined;
/**
 * @member {String} statuses_url
 */
PullRequest.prototype['statuses_url'] = undefined;
/**
 * The title of the pull request.
 * @member {String} title
 */
PullRequest.prototype['title'] = undefined;
/**
 * @member {Date} updated_at
 */
PullRequest.prototype['updated_at'] = undefined;
/**
 * @member {String} url
 */
PullRequest.prototype['url'] = undefined;
/**
 * @member {module:model/User1} user
 */
PullRequest.prototype['user'] = undefined;



/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
PullRequestWebhook['StateEnum'] = {

    /**
     * value: "open"
     * @const
     */
    "open": "open",

    /**
     * value: "closed"
     * @const
     */
    "closed": "closed"
};


/**
 * Allowed values for the <code>merge_commit_message</code> property.
 * @enum {String}
 * @readonly
 */
PullRequestWebhook['MergeCommitMessageEnum'] = {

    /**
     * value: "PR_BODY"
     * @const
     */
    "PR_BODY": "PR_BODY",

    /**
     * value: "PR_TITLE"
     * @const
     */
    "PR_TITLE": "PR_TITLE",

    /**
     * value: "BLANK"
     * @const
     */
    "BLANK": "BLANK"
};


/**
 * Allowed values for the <code>merge_commit_title</code> property.
 * @enum {String}
 * @readonly
 */
PullRequestWebhook['MergeCommitTitleEnum'] = {

    /**
     * value: "PR_TITLE"
     * @const
     */
    "PR_TITLE": "PR_TITLE",

    /**
     * value: "MERGE_MESSAGE"
     * @const
     */
    "MERGE_MESSAGE": "MERGE_MESSAGE"
};


/**
 * Allowed values for the <code>squash_merge_commit_message</code> property.
 * @enum {String}
 * @readonly
 */
PullRequestWebhook['SquashMergeCommitMessageEnum'] = {

    /**
     * value: "PR_BODY"
     * @const
     */
    "PR_BODY": "PR_BODY",

    /**
     * value: "COMMIT_MESSAGES"
     * @const
     */
    "COMMIT_MESSAGES": "COMMIT_MESSAGES",

    /**
     * value: "BLANK"
     * @const
     */
    "BLANK": "BLANK"
};


/**
 * Allowed values for the <code>squash_merge_commit_title</code> property.
 * @enum {String}
 * @readonly
 */
PullRequestWebhook['SquashMergeCommitTitleEnum'] = {

    /**
     * value: "PR_TITLE"
     * @const
     */
    "PR_TITLE": "PR_TITLE",

    /**
     * value: "COMMIT_OR_PR_TITLE"
     * @const
     */
    "COMMIT_OR_PR_TITLE": "COMMIT_OR_PR_TITLE"
};



export default PullRequestWebhook;

