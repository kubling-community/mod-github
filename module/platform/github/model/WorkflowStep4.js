/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WorkflowStep4 model module.
 * @module model/WorkflowStep4
 * @version 1.1.4
 */
class WorkflowStep4 {
    /**
     * Constructs a new <code>WorkflowStep4</code>.
     * @alias module:model/WorkflowStep4
     * @param completedAt {String} 
     * @param conclusion {module:model/WorkflowStep4.ConclusionEnum} 
     * @param name {String} 
     * @param number {Number} 
     * @param startedAt {String} 
     * @param status {module:model/WorkflowStep4.StatusEnum} 
     */
    constructor(completedAt, conclusion, name, number, startedAt, status) { 
        
        WorkflowStep4.initialize(this, completedAt, conclusion, name, number, startedAt, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, completedAt, conclusion, name, number, startedAt, status) { 
        obj['completed_at'] = completedAt;
        obj['conclusion'] = conclusion;
        obj['name'] = name;
        obj['number'] = number;
        obj['started_at'] = startedAt;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>WorkflowStep4</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowStep4} obj Optional instance to populate.
     * @return {module:model/WorkflowStep4} The populated <code>WorkflowStep4</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowStep4();

            if (data.hasOwnProperty('completed_at')) {
                obj['completed_at'] = ApiClient.convertToType(data['completed_at'], 'String');
            }
            if (data.hasOwnProperty('conclusion')) {
                obj['conclusion'] = ApiClient.convertToType(data['conclusion'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('started_at')) {
                obj['started_at'] = ApiClient.convertToType(data['started_at'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowStep4</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowStep4</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WorkflowStep4.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['completed_at'] && !(typeof data['completed_at'] === 'string' || data['completed_at'] instanceof String)) {
            throw new Error("Expected the field `completed_at` to be a primitive type in the JSON string but got " + data['completed_at']);
        }
        // ensure the json data is a string
        if (data['conclusion'] && !(typeof data['conclusion'] === 'string' || data['conclusion'] instanceof String)) {
            throw new Error("Expected the field `conclusion` to be a primitive type in the JSON string but got " + data['conclusion']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['started_at'] && !(typeof data['started_at'] === 'string' || data['started_at'] instanceof String)) {
            throw new Error("Expected the field `started_at` to be a primitive type in the JSON string but got " + data['started_at']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

WorkflowStep4.RequiredProperties = ["completed_at", "conclusion", "name", "number", "started_at", "status"];

/**
 * @member {String} completed_at
 */
WorkflowStep4.prototype['completed_at'] = undefined;

/**
 * @member {module:model/WorkflowStep4.ConclusionEnum} conclusion
 */
WorkflowStep4.prototype['conclusion'] = undefined;

/**
 * @member {String} name
 */
WorkflowStep4.prototype['name'] = undefined;

/**
 * @member {Number} number
 */
WorkflowStep4.prototype['number'] = undefined;

/**
 * @member {String} started_at
 */
WorkflowStep4.prototype['started_at'] = undefined;

/**
 * @member {module:model/WorkflowStep4.StatusEnum} status
 */
WorkflowStep4.prototype['status'] = undefined;





/**
 * Allowed values for the <code>conclusion</code> property.
 * @enum {String}
 * @readonly
 */
WorkflowStep4['ConclusionEnum'] = {

    /**
     * value: "failure"
     * @const
     */
    "failure": "failure",

    /**
     * value: "skipped"
     * @const
     */
    "skipped": "skipped",

    /**
     * value: "success"
     * @const
     */
    "success": "success",

    /**
     * value: "cancelled"
     * @const
     */
    "cancelled": "cancelled",

    /**
     * value: "null"
     * @const
     */
    "null": "null"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
WorkflowStep4['StatusEnum'] = {

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed",

    /**
     * value: "in_progress"
     * @const
     */
    "in_progress": "in_progress",

    /**
     * value: "queued"
     * @const
     */
    "queued": "queued",

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "waiting"
     * @const
     */
    "waiting": "waiting"
};



export default WorkflowStep4;

