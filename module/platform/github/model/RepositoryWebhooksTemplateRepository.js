/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BranchRestrictionPolicyUsersInner from './BranchRestrictionPolicyUsersInner';
import MinimalRepositoryPermissions from './MinimalRepositoryPermissions';

/**
 * The RepositoryWebhooksTemplateRepository model module.
 * @module model/RepositoryWebhooksTemplateRepository
 * @version 1.1.4
 */
class RepositoryWebhooksTemplateRepository {
    /**
     * Constructs a new <code>RepositoryWebhooksTemplateRepository</code>.
     * @alias module:model/RepositoryWebhooksTemplateRepository
     */
    constructor() { 
        
        RepositoryWebhooksTemplateRepository.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RepositoryWebhooksTemplateRepository</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepositoryWebhooksTemplateRepository} obj Optional instance to populate.
     * @return {module:model/RepositoryWebhooksTemplateRepository} The populated <code>RepositoryWebhooksTemplateRepository</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepositoryWebhooksTemplateRepository();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('full_name')) {
                obj['full_name'] = ApiClient.convertToType(data['full_name'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = BranchRestrictionPolicyUsersInner.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('private')) {
                obj['private'] = ApiClient.convertToType(data['private'], 'Boolean');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('fork')) {
                obj['fork'] = ApiClient.convertToType(data['fork'], 'Boolean');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('archive_url')) {
                obj['archive_url'] = ApiClient.convertToType(data['archive_url'], 'String');
            }
            if (data.hasOwnProperty('assignees_url')) {
                obj['assignees_url'] = ApiClient.convertToType(data['assignees_url'], 'String');
            }
            if (data.hasOwnProperty('blobs_url')) {
                obj['blobs_url'] = ApiClient.convertToType(data['blobs_url'], 'String');
            }
            if (data.hasOwnProperty('branches_url')) {
                obj['branches_url'] = ApiClient.convertToType(data['branches_url'], 'String');
            }
            if (data.hasOwnProperty('collaborators_url')) {
                obj['collaborators_url'] = ApiClient.convertToType(data['collaborators_url'], 'String');
            }
            if (data.hasOwnProperty('comments_url')) {
                obj['comments_url'] = ApiClient.convertToType(data['comments_url'], 'String');
            }
            if (data.hasOwnProperty('commits_url')) {
                obj['commits_url'] = ApiClient.convertToType(data['commits_url'], 'String');
            }
            if (data.hasOwnProperty('compare_url')) {
                obj['compare_url'] = ApiClient.convertToType(data['compare_url'], 'String');
            }
            if (data.hasOwnProperty('contents_url')) {
                obj['contents_url'] = ApiClient.convertToType(data['contents_url'], 'String');
            }
            if (data.hasOwnProperty('contributors_url')) {
                obj['contributors_url'] = ApiClient.convertToType(data['contributors_url'], 'String');
            }
            if (data.hasOwnProperty('deployments_url')) {
                obj['deployments_url'] = ApiClient.convertToType(data['deployments_url'], 'String');
            }
            if (data.hasOwnProperty('downloads_url')) {
                obj['downloads_url'] = ApiClient.convertToType(data['downloads_url'], 'String');
            }
            if (data.hasOwnProperty('events_url')) {
                obj['events_url'] = ApiClient.convertToType(data['events_url'], 'String');
            }
            if (data.hasOwnProperty('forks_url')) {
                obj['forks_url'] = ApiClient.convertToType(data['forks_url'], 'String');
            }
            if (data.hasOwnProperty('git_commits_url')) {
                obj['git_commits_url'] = ApiClient.convertToType(data['git_commits_url'], 'String');
            }
            if (data.hasOwnProperty('git_refs_url')) {
                obj['git_refs_url'] = ApiClient.convertToType(data['git_refs_url'], 'String');
            }
            if (data.hasOwnProperty('git_tags_url')) {
                obj['git_tags_url'] = ApiClient.convertToType(data['git_tags_url'], 'String');
            }
            if (data.hasOwnProperty('git_url')) {
                obj['git_url'] = ApiClient.convertToType(data['git_url'], 'String');
            }
            if (data.hasOwnProperty('issue_comment_url')) {
                obj['issue_comment_url'] = ApiClient.convertToType(data['issue_comment_url'], 'String');
            }
            if (data.hasOwnProperty('issue_events_url')) {
                obj['issue_events_url'] = ApiClient.convertToType(data['issue_events_url'], 'String');
            }
            if (data.hasOwnProperty('issues_url')) {
                obj['issues_url'] = ApiClient.convertToType(data['issues_url'], 'String');
            }
            if (data.hasOwnProperty('keys_url')) {
                obj['keys_url'] = ApiClient.convertToType(data['keys_url'], 'String');
            }
            if (data.hasOwnProperty('labels_url')) {
                obj['labels_url'] = ApiClient.convertToType(data['labels_url'], 'String');
            }
            if (data.hasOwnProperty('languages_url')) {
                obj['languages_url'] = ApiClient.convertToType(data['languages_url'], 'String');
            }
            if (data.hasOwnProperty('merges_url')) {
                obj['merges_url'] = ApiClient.convertToType(data['merges_url'], 'String');
            }
            if (data.hasOwnProperty('milestones_url')) {
                obj['milestones_url'] = ApiClient.convertToType(data['milestones_url'], 'String');
            }
            if (data.hasOwnProperty('notifications_url')) {
                obj['notifications_url'] = ApiClient.convertToType(data['notifications_url'], 'String');
            }
            if (data.hasOwnProperty('pulls_url')) {
                obj['pulls_url'] = ApiClient.convertToType(data['pulls_url'], 'String');
            }
            if (data.hasOwnProperty('releases_url')) {
                obj['releases_url'] = ApiClient.convertToType(data['releases_url'], 'String');
            }
            if (data.hasOwnProperty('ssh_url')) {
                obj['ssh_url'] = ApiClient.convertToType(data['ssh_url'], 'String');
            }
            if (data.hasOwnProperty('stargazers_url')) {
                obj['stargazers_url'] = ApiClient.convertToType(data['stargazers_url'], 'String');
            }
            if (data.hasOwnProperty('statuses_url')) {
                obj['statuses_url'] = ApiClient.convertToType(data['statuses_url'], 'String');
            }
            if (data.hasOwnProperty('subscribers_url')) {
                obj['subscribers_url'] = ApiClient.convertToType(data['subscribers_url'], 'String');
            }
            if (data.hasOwnProperty('subscription_url')) {
                obj['subscription_url'] = ApiClient.convertToType(data['subscription_url'], 'String');
            }
            if (data.hasOwnProperty('tags_url')) {
                obj['tags_url'] = ApiClient.convertToType(data['tags_url'], 'String');
            }
            if (data.hasOwnProperty('teams_url')) {
                obj['teams_url'] = ApiClient.convertToType(data['teams_url'], 'String');
            }
            if (data.hasOwnProperty('trees_url')) {
                obj['trees_url'] = ApiClient.convertToType(data['trees_url'], 'String');
            }
            if (data.hasOwnProperty('clone_url')) {
                obj['clone_url'] = ApiClient.convertToType(data['clone_url'], 'String');
            }
            if (data.hasOwnProperty('mirror_url')) {
                obj['mirror_url'] = ApiClient.convertToType(data['mirror_url'], 'String');
            }
            if (data.hasOwnProperty('hooks_url')) {
                obj['hooks_url'] = ApiClient.convertToType(data['hooks_url'], 'String');
            }
            if (data.hasOwnProperty('svn_url')) {
                obj['svn_url'] = ApiClient.convertToType(data['svn_url'], 'String');
            }
            if (data.hasOwnProperty('homepage')) {
                obj['homepage'] = ApiClient.convertToType(data['homepage'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('forks_count')) {
                obj['forks_count'] = ApiClient.convertToType(data['forks_count'], 'Number');
            }
            if (data.hasOwnProperty('stargazers_count')) {
                obj['stargazers_count'] = ApiClient.convertToType(data['stargazers_count'], 'Number');
            }
            if (data.hasOwnProperty('watchers_count')) {
                obj['watchers_count'] = ApiClient.convertToType(data['watchers_count'], 'Number');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('default_branch')) {
                obj['default_branch'] = ApiClient.convertToType(data['default_branch'], 'String');
            }
            if (data.hasOwnProperty('open_issues_count')) {
                obj['open_issues_count'] = ApiClient.convertToType(data['open_issues_count'], 'Number');
            }
            if (data.hasOwnProperty('is_template')) {
                obj['is_template'] = ApiClient.convertToType(data['is_template'], 'Boolean');
            }
            if (data.hasOwnProperty('topics')) {
                obj['topics'] = ApiClient.convertToType(data['topics'], ['String']);
            }
            if (data.hasOwnProperty('has_issues')) {
                obj['has_issues'] = ApiClient.convertToType(data['has_issues'], 'Boolean');
            }
            if (data.hasOwnProperty('has_projects')) {
                obj['has_projects'] = ApiClient.convertToType(data['has_projects'], 'Boolean');
            }
            if (data.hasOwnProperty('has_wiki')) {
                obj['has_wiki'] = ApiClient.convertToType(data['has_wiki'], 'Boolean');
            }
            if (data.hasOwnProperty('has_pages')) {
                obj['has_pages'] = ApiClient.convertToType(data['has_pages'], 'Boolean');
            }
            if (data.hasOwnProperty('has_downloads')) {
                obj['has_downloads'] = ApiClient.convertToType(data['has_downloads'], 'Boolean');
            }
            if (data.hasOwnProperty('archived')) {
                obj['archived'] = ApiClient.convertToType(data['archived'], 'Boolean');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
            if (data.hasOwnProperty('pushed_at')) {
                obj['pushed_at'] = ApiClient.convertToType(data['pushed_at'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = MinimalRepositoryPermissions.constructFromObject(data['permissions']);
            }
            if (data.hasOwnProperty('allow_rebase_merge')) {
                obj['allow_rebase_merge'] = ApiClient.convertToType(data['allow_rebase_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('temp_clone_token')) {
                obj['temp_clone_token'] = ApiClient.convertToType(data['temp_clone_token'], 'String');
            }
            if (data.hasOwnProperty('allow_squash_merge')) {
                obj['allow_squash_merge'] = ApiClient.convertToType(data['allow_squash_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_auto_merge')) {
                obj['allow_auto_merge'] = ApiClient.convertToType(data['allow_auto_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('delete_branch_on_merge')) {
                obj['delete_branch_on_merge'] = ApiClient.convertToType(data['delete_branch_on_merge'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_update_branch')) {
                obj['allow_update_branch'] = ApiClient.convertToType(data['allow_update_branch'], 'Boolean');
            }
            if (data.hasOwnProperty('use_squash_pr_title_as_default')) {
                obj['use_squash_pr_title_as_default'] = ApiClient.convertToType(data['use_squash_pr_title_as_default'], 'Boolean');
            }
            if (data.hasOwnProperty('squash_merge_commit_title')) {
                obj['squash_merge_commit_title'] = ApiClient.convertToType(data['squash_merge_commit_title'], 'String');
            }
            if (data.hasOwnProperty('squash_merge_commit_message')) {
                obj['squash_merge_commit_message'] = ApiClient.convertToType(data['squash_merge_commit_message'], 'String');
            }
            if (data.hasOwnProperty('merge_commit_title')) {
                obj['merge_commit_title'] = ApiClient.convertToType(data['merge_commit_title'], 'String');
            }
            if (data.hasOwnProperty('merge_commit_message')) {
                obj['merge_commit_message'] = ApiClient.convertToType(data['merge_commit_message'], 'String');
            }
            if (data.hasOwnProperty('allow_merge_commit')) {
                obj['allow_merge_commit'] = ApiClient.convertToType(data['allow_merge_commit'], 'Boolean');
            }
            if (data.hasOwnProperty('subscribers_count')) {
                obj['subscribers_count'] = ApiClient.convertToType(data['subscribers_count'], 'Number');
            }
            if (data.hasOwnProperty('network_count')) {
                obj['network_count'] = ApiClient.convertToType(data['network_count'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepositoryWebhooksTemplateRepository</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepositoryWebhooksTemplateRepository</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['full_name'] && !(typeof data['full_name'] === 'string' || data['full_name'] instanceof String)) {
            throw new Error("Expected the field `full_name` to be a primitive type in the JSON string but got " + data['full_name']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          BranchRestrictionPolicyUsersInner.validateJSON(data['owner']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['archive_url'] && !(typeof data['archive_url'] === 'string' || data['archive_url'] instanceof String)) {
            throw new Error("Expected the field `archive_url` to be a primitive type in the JSON string but got " + data['archive_url']);
        }
        // ensure the json data is a string
        if (data['assignees_url'] && !(typeof data['assignees_url'] === 'string' || data['assignees_url'] instanceof String)) {
            throw new Error("Expected the field `assignees_url` to be a primitive type in the JSON string but got " + data['assignees_url']);
        }
        // ensure the json data is a string
        if (data['blobs_url'] && !(typeof data['blobs_url'] === 'string' || data['blobs_url'] instanceof String)) {
            throw new Error("Expected the field `blobs_url` to be a primitive type in the JSON string but got " + data['blobs_url']);
        }
        // ensure the json data is a string
        if (data['branches_url'] && !(typeof data['branches_url'] === 'string' || data['branches_url'] instanceof String)) {
            throw new Error("Expected the field `branches_url` to be a primitive type in the JSON string but got " + data['branches_url']);
        }
        // ensure the json data is a string
        if (data['collaborators_url'] && !(typeof data['collaborators_url'] === 'string' || data['collaborators_url'] instanceof String)) {
            throw new Error("Expected the field `collaborators_url` to be a primitive type in the JSON string but got " + data['collaborators_url']);
        }
        // ensure the json data is a string
        if (data['comments_url'] && !(typeof data['comments_url'] === 'string' || data['comments_url'] instanceof String)) {
            throw new Error("Expected the field `comments_url` to be a primitive type in the JSON string but got " + data['comments_url']);
        }
        // ensure the json data is a string
        if (data['commits_url'] && !(typeof data['commits_url'] === 'string' || data['commits_url'] instanceof String)) {
            throw new Error("Expected the field `commits_url` to be a primitive type in the JSON string but got " + data['commits_url']);
        }
        // ensure the json data is a string
        if (data['compare_url'] && !(typeof data['compare_url'] === 'string' || data['compare_url'] instanceof String)) {
            throw new Error("Expected the field `compare_url` to be a primitive type in the JSON string but got " + data['compare_url']);
        }
        // ensure the json data is a string
        if (data['contents_url'] && !(typeof data['contents_url'] === 'string' || data['contents_url'] instanceof String)) {
            throw new Error("Expected the field `contents_url` to be a primitive type in the JSON string but got " + data['contents_url']);
        }
        // ensure the json data is a string
        if (data['contributors_url'] && !(typeof data['contributors_url'] === 'string' || data['contributors_url'] instanceof String)) {
            throw new Error("Expected the field `contributors_url` to be a primitive type in the JSON string but got " + data['contributors_url']);
        }
        // ensure the json data is a string
        if (data['deployments_url'] && !(typeof data['deployments_url'] === 'string' || data['deployments_url'] instanceof String)) {
            throw new Error("Expected the field `deployments_url` to be a primitive type in the JSON string but got " + data['deployments_url']);
        }
        // ensure the json data is a string
        if (data['downloads_url'] && !(typeof data['downloads_url'] === 'string' || data['downloads_url'] instanceof String)) {
            throw new Error("Expected the field `downloads_url` to be a primitive type in the JSON string but got " + data['downloads_url']);
        }
        // ensure the json data is a string
        if (data['events_url'] && !(typeof data['events_url'] === 'string' || data['events_url'] instanceof String)) {
            throw new Error("Expected the field `events_url` to be a primitive type in the JSON string but got " + data['events_url']);
        }
        // ensure the json data is a string
        if (data['forks_url'] && !(typeof data['forks_url'] === 'string' || data['forks_url'] instanceof String)) {
            throw new Error("Expected the field `forks_url` to be a primitive type in the JSON string but got " + data['forks_url']);
        }
        // ensure the json data is a string
        if (data['git_commits_url'] && !(typeof data['git_commits_url'] === 'string' || data['git_commits_url'] instanceof String)) {
            throw new Error("Expected the field `git_commits_url` to be a primitive type in the JSON string but got " + data['git_commits_url']);
        }
        // ensure the json data is a string
        if (data['git_refs_url'] && !(typeof data['git_refs_url'] === 'string' || data['git_refs_url'] instanceof String)) {
            throw new Error("Expected the field `git_refs_url` to be a primitive type in the JSON string but got " + data['git_refs_url']);
        }
        // ensure the json data is a string
        if (data['git_tags_url'] && !(typeof data['git_tags_url'] === 'string' || data['git_tags_url'] instanceof String)) {
            throw new Error("Expected the field `git_tags_url` to be a primitive type in the JSON string but got " + data['git_tags_url']);
        }
        // ensure the json data is a string
        if (data['git_url'] && !(typeof data['git_url'] === 'string' || data['git_url'] instanceof String)) {
            throw new Error("Expected the field `git_url` to be a primitive type in the JSON string but got " + data['git_url']);
        }
        // ensure the json data is a string
        if (data['issue_comment_url'] && !(typeof data['issue_comment_url'] === 'string' || data['issue_comment_url'] instanceof String)) {
            throw new Error("Expected the field `issue_comment_url` to be a primitive type in the JSON string but got " + data['issue_comment_url']);
        }
        // ensure the json data is a string
        if (data['issue_events_url'] && !(typeof data['issue_events_url'] === 'string' || data['issue_events_url'] instanceof String)) {
            throw new Error("Expected the field `issue_events_url` to be a primitive type in the JSON string but got " + data['issue_events_url']);
        }
        // ensure the json data is a string
        if (data['issues_url'] && !(typeof data['issues_url'] === 'string' || data['issues_url'] instanceof String)) {
            throw new Error("Expected the field `issues_url` to be a primitive type in the JSON string but got " + data['issues_url']);
        }
        // ensure the json data is a string
        if (data['keys_url'] && !(typeof data['keys_url'] === 'string' || data['keys_url'] instanceof String)) {
            throw new Error("Expected the field `keys_url` to be a primitive type in the JSON string but got " + data['keys_url']);
        }
        // ensure the json data is a string
        if (data['labels_url'] && !(typeof data['labels_url'] === 'string' || data['labels_url'] instanceof String)) {
            throw new Error("Expected the field `labels_url` to be a primitive type in the JSON string but got " + data['labels_url']);
        }
        // ensure the json data is a string
        if (data['languages_url'] && !(typeof data['languages_url'] === 'string' || data['languages_url'] instanceof String)) {
            throw new Error("Expected the field `languages_url` to be a primitive type in the JSON string but got " + data['languages_url']);
        }
        // ensure the json data is a string
        if (data['merges_url'] && !(typeof data['merges_url'] === 'string' || data['merges_url'] instanceof String)) {
            throw new Error("Expected the field `merges_url` to be a primitive type in the JSON string but got " + data['merges_url']);
        }
        // ensure the json data is a string
        if (data['milestones_url'] && !(typeof data['milestones_url'] === 'string' || data['milestones_url'] instanceof String)) {
            throw new Error("Expected the field `milestones_url` to be a primitive type in the JSON string but got " + data['milestones_url']);
        }
        // ensure the json data is a string
        if (data['notifications_url'] && !(typeof data['notifications_url'] === 'string' || data['notifications_url'] instanceof String)) {
            throw new Error("Expected the field `notifications_url` to be a primitive type in the JSON string but got " + data['notifications_url']);
        }
        // ensure the json data is a string
        if (data['pulls_url'] && !(typeof data['pulls_url'] === 'string' || data['pulls_url'] instanceof String)) {
            throw new Error("Expected the field `pulls_url` to be a primitive type in the JSON string but got " + data['pulls_url']);
        }
        // ensure the json data is a string
        if (data['releases_url'] && !(typeof data['releases_url'] === 'string' || data['releases_url'] instanceof String)) {
            throw new Error("Expected the field `releases_url` to be a primitive type in the JSON string but got " + data['releases_url']);
        }
        // ensure the json data is a string
        if (data['ssh_url'] && !(typeof data['ssh_url'] === 'string' || data['ssh_url'] instanceof String)) {
            throw new Error("Expected the field `ssh_url` to be a primitive type in the JSON string but got " + data['ssh_url']);
        }
        // ensure the json data is a string
        if (data['stargazers_url'] && !(typeof data['stargazers_url'] === 'string' || data['stargazers_url'] instanceof String)) {
            throw new Error("Expected the field `stargazers_url` to be a primitive type in the JSON string but got " + data['stargazers_url']);
        }
        // ensure the json data is a string
        if (data['statuses_url'] && !(typeof data['statuses_url'] === 'string' || data['statuses_url'] instanceof String)) {
            throw new Error("Expected the field `statuses_url` to be a primitive type in the JSON string but got " + data['statuses_url']);
        }
        // ensure the json data is a string
        if (data['subscribers_url'] && !(typeof data['subscribers_url'] === 'string' || data['subscribers_url'] instanceof String)) {
            throw new Error("Expected the field `subscribers_url` to be a primitive type in the JSON string but got " + data['subscribers_url']);
        }
        // ensure the json data is a string
        if (data['subscription_url'] && !(typeof data['subscription_url'] === 'string' || data['subscription_url'] instanceof String)) {
            throw new Error("Expected the field `subscription_url` to be a primitive type in the JSON string but got " + data['subscription_url']);
        }
        // ensure the json data is a string
        if (data['tags_url'] && !(typeof data['tags_url'] === 'string' || data['tags_url'] instanceof String)) {
            throw new Error("Expected the field `tags_url` to be a primitive type in the JSON string but got " + data['tags_url']);
        }
        // ensure the json data is a string
        if (data['teams_url'] && !(typeof data['teams_url'] === 'string' || data['teams_url'] instanceof String)) {
            throw new Error("Expected the field `teams_url` to be a primitive type in the JSON string but got " + data['teams_url']);
        }
        // ensure the json data is a string
        if (data['trees_url'] && !(typeof data['trees_url'] === 'string' || data['trees_url'] instanceof String)) {
            throw new Error("Expected the field `trees_url` to be a primitive type in the JSON string but got " + data['trees_url']);
        }
        // ensure the json data is a string
        if (data['clone_url'] && !(typeof data['clone_url'] === 'string' || data['clone_url'] instanceof String)) {
            throw new Error("Expected the field `clone_url` to be a primitive type in the JSON string but got " + data['clone_url']);
        }
        // ensure the json data is a string
        if (data['mirror_url'] && !(typeof data['mirror_url'] === 'string' || data['mirror_url'] instanceof String)) {
            throw new Error("Expected the field `mirror_url` to be a primitive type in the JSON string but got " + data['mirror_url']);
        }
        // ensure the json data is a string
        if (data['hooks_url'] && !(typeof data['hooks_url'] === 'string' || data['hooks_url'] instanceof String)) {
            throw new Error("Expected the field `hooks_url` to be a primitive type in the JSON string but got " + data['hooks_url']);
        }
        // ensure the json data is a string
        if (data['svn_url'] && !(typeof data['svn_url'] === 'string' || data['svn_url'] instanceof String)) {
            throw new Error("Expected the field `svn_url` to be a primitive type in the JSON string but got " + data['svn_url']);
        }
        // ensure the json data is a string
        if (data['homepage'] && !(typeof data['homepage'] === 'string' || data['homepage'] instanceof String)) {
            throw new Error("Expected the field `homepage` to be a primitive type in the JSON string but got " + data['homepage']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['default_branch'] && !(typeof data['default_branch'] === 'string' || data['default_branch'] instanceof String)) {
            throw new Error("Expected the field `default_branch` to be a primitive type in the JSON string but got " + data['default_branch']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['topics'])) {
            throw new Error("Expected the field `topics` to be an array in the JSON data but got " + data['topics']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }
        // ensure the json data is a string
        if (data['pushed_at'] && !(typeof data['pushed_at'] === 'string' || data['pushed_at'] instanceof String)) {
            throw new Error("Expected the field `pushed_at` to be a primitive type in the JSON string but got " + data['pushed_at']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }
        // validate the optional field `permissions`
        if (data['permissions']) { // data not null
          MinimalRepositoryPermissions.validateJSON(data['permissions']);
        }
        // ensure the json data is a string
        if (data['temp_clone_token'] && !(typeof data['temp_clone_token'] === 'string' || data['temp_clone_token'] instanceof String)) {
            throw new Error("Expected the field `temp_clone_token` to be a primitive type in the JSON string but got " + data['temp_clone_token']);
        }
        // ensure the json data is a string
        if (data['squash_merge_commit_title'] && !(typeof data['squash_merge_commit_title'] === 'string' || data['squash_merge_commit_title'] instanceof String)) {
            throw new Error("Expected the field `squash_merge_commit_title` to be a primitive type in the JSON string but got " + data['squash_merge_commit_title']);
        }
        // ensure the json data is a string
        if (data['squash_merge_commit_message'] && !(typeof data['squash_merge_commit_message'] === 'string' || data['squash_merge_commit_message'] instanceof String)) {
            throw new Error("Expected the field `squash_merge_commit_message` to be a primitive type in the JSON string but got " + data['squash_merge_commit_message']);
        }
        // ensure the json data is a string
        if (data['merge_commit_title'] && !(typeof data['merge_commit_title'] === 'string' || data['merge_commit_title'] instanceof String)) {
            throw new Error("Expected the field `merge_commit_title` to be a primitive type in the JSON string but got " + data['merge_commit_title']);
        }
        // ensure the json data is a string
        if (data['merge_commit_message'] && !(typeof data['merge_commit_message'] === 'string' || data['merge_commit_message'] instanceof String)) {
            throw new Error("Expected the field `merge_commit_message` to be a primitive type in the JSON string but got " + data['merge_commit_message']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
RepositoryWebhooksTemplateRepository.prototype['id'] = undefined;

/**
 * @member {String} node_id
 */
RepositoryWebhooksTemplateRepository.prototype['node_id'] = undefined;

/**
 * @member {String} name
 */
RepositoryWebhooksTemplateRepository.prototype['name'] = undefined;

/**
 * @member {String} full_name
 */
RepositoryWebhooksTemplateRepository.prototype['full_name'] = undefined;

/**
 * @member {module:model/BranchRestrictionPolicyUsersInner} owner
 */
RepositoryWebhooksTemplateRepository.prototype['owner'] = undefined;

/**
 * @member {Boolean} private
 */
RepositoryWebhooksTemplateRepository.prototype['private'] = undefined;

/**
 * @member {String} html_url
 */
RepositoryWebhooksTemplateRepository.prototype['html_url'] = undefined;

/**
 * @member {String} description
 */
RepositoryWebhooksTemplateRepository.prototype['description'] = undefined;

/**
 * @member {Boolean} fork
 */
RepositoryWebhooksTemplateRepository.prototype['fork'] = undefined;

/**
 * @member {String} url
 */
RepositoryWebhooksTemplateRepository.prototype['url'] = undefined;

/**
 * @member {String} archive_url
 */
RepositoryWebhooksTemplateRepository.prototype['archive_url'] = undefined;

/**
 * @member {String} assignees_url
 */
RepositoryWebhooksTemplateRepository.prototype['assignees_url'] = undefined;

/**
 * @member {String} blobs_url
 */
RepositoryWebhooksTemplateRepository.prototype['blobs_url'] = undefined;

/**
 * @member {String} branches_url
 */
RepositoryWebhooksTemplateRepository.prototype['branches_url'] = undefined;

/**
 * @member {String} collaborators_url
 */
RepositoryWebhooksTemplateRepository.prototype['collaborators_url'] = undefined;

/**
 * @member {String} comments_url
 */
RepositoryWebhooksTemplateRepository.prototype['comments_url'] = undefined;

/**
 * @member {String} commits_url
 */
RepositoryWebhooksTemplateRepository.prototype['commits_url'] = undefined;

/**
 * @member {String} compare_url
 */
RepositoryWebhooksTemplateRepository.prototype['compare_url'] = undefined;

/**
 * @member {String} contents_url
 */
RepositoryWebhooksTemplateRepository.prototype['contents_url'] = undefined;

/**
 * @member {String} contributors_url
 */
RepositoryWebhooksTemplateRepository.prototype['contributors_url'] = undefined;

/**
 * @member {String} deployments_url
 */
RepositoryWebhooksTemplateRepository.prototype['deployments_url'] = undefined;

/**
 * @member {String} downloads_url
 */
RepositoryWebhooksTemplateRepository.prototype['downloads_url'] = undefined;

/**
 * @member {String} events_url
 */
RepositoryWebhooksTemplateRepository.prototype['events_url'] = undefined;

/**
 * @member {String} forks_url
 */
RepositoryWebhooksTemplateRepository.prototype['forks_url'] = undefined;

/**
 * @member {String} git_commits_url
 */
RepositoryWebhooksTemplateRepository.prototype['git_commits_url'] = undefined;

/**
 * @member {String} git_refs_url
 */
RepositoryWebhooksTemplateRepository.prototype['git_refs_url'] = undefined;

/**
 * @member {String} git_tags_url
 */
RepositoryWebhooksTemplateRepository.prototype['git_tags_url'] = undefined;

/**
 * @member {String} git_url
 */
RepositoryWebhooksTemplateRepository.prototype['git_url'] = undefined;

/**
 * @member {String} issue_comment_url
 */
RepositoryWebhooksTemplateRepository.prototype['issue_comment_url'] = undefined;

/**
 * @member {String} issue_events_url
 */
RepositoryWebhooksTemplateRepository.prototype['issue_events_url'] = undefined;

/**
 * @member {String} issues_url
 */
RepositoryWebhooksTemplateRepository.prototype['issues_url'] = undefined;

/**
 * @member {String} keys_url
 */
RepositoryWebhooksTemplateRepository.prototype['keys_url'] = undefined;

/**
 * @member {String} labels_url
 */
RepositoryWebhooksTemplateRepository.prototype['labels_url'] = undefined;

/**
 * @member {String} languages_url
 */
RepositoryWebhooksTemplateRepository.prototype['languages_url'] = undefined;

/**
 * @member {String} merges_url
 */
RepositoryWebhooksTemplateRepository.prototype['merges_url'] = undefined;

/**
 * @member {String} milestones_url
 */
RepositoryWebhooksTemplateRepository.prototype['milestones_url'] = undefined;

/**
 * @member {String} notifications_url
 */
RepositoryWebhooksTemplateRepository.prototype['notifications_url'] = undefined;

/**
 * @member {String} pulls_url
 */
RepositoryWebhooksTemplateRepository.prototype['pulls_url'] = undefined;

/**
 * @member {String} releases_url
 */
RepositoryWebhooksTemplateRepository.prototype['releases_url'] = undefined;

/**
 * @member {String} ssh_url
 */
RepositoryWebhooksTemplateRepository.prototype['ssh_url'] = undefined;

/**
 * @member {String} stargazers_url
 */
RepositoryWebhooksTemplateRepository.prototype['stargazers_url'] = undefined;

/**
 * @member {String} statuses_url
 */
RepositoryWebhooksTemplateRepository.prototype['statuses_url'] = undefined;

/**
 * @member {String} subscribers_url
 */
RepositoryWebhooksTemplateRepository.prototype['subscribers_url'] = undefined;

/**
 * @member {String} subscription_url
 */
RepositoryWebhooksTemplateRepository.prototype['subscription_url'] = undefined;

/**
 * @member {String} tags_url
 */
RepositoryWebhooksTemplateRepository.prototype['tags_url'] = undefined;

/**
 * @member {String} teams_url
 */
RepositoryWebhooksTemplateRepository.prototype['teams_url'] = undefined;

/**
 * @member {String} trees_url
 */
RepositoryWebhooksTemplateRepository.prototype['trees_url'] = undefined;

/**
 * @member {String} clone_url
 */
RepositoryWebhooksTemplateRepository.prototype['clone_url'] = undefined;

/**
 * @member {String} mirror_url
 */
RepositoryWebhooksTemplateRepository.prototype['mirror_url'] = undefined;

/**
 * @member {String} hooks_url
 */
RepositoryWebhooksTemplateRepository.prototype['hooks_url'] = undefined;

/**
 * @member {String} svn_url
 */
RepositoryWebhooksTemplateRepository.prototype['svn_url'] = undefined;

/**
 * @member {String} homepage
 */
RepositoryWebhooksTemplateRepository.prototype['homepage'] = undefined;

/**
 * @member {String} language
 */
RepositoryWebhooksTemplateRepository.prototype['language'] = undefined;

/**
 * @member {Number} forks_count
 */
RepositoryWebhooksTemplateRepository.prototype['forks_count'] = undefined;

/**
 * @member {Number} stargazers_count
 */
RepositoryWebhooksTemplateRepository.prototype['stargazers_count'] = undefined;

/**
 * @member {Number} watchers_count
 */
RepositoryWebhooksTemplateRepository.prototype['watchers_count'] = undefined;

/**
 * @member {Number} size
 */
RepositoryWebhooksTemplateRepository.prototype['size'] = undefined;

/**
 * @member {String} default_branch
 */
RepositoryWebhooksTemplateRepository.prototype['default_branch'] = undefined;

/**
 * @member {Number} open_issues_count
 */
RepositoryWebhooksTemplateRepository.prototype['open_issues_count'] = undefined;

/**
 * @member {Boolean} is_template
 */
RepositoryWebhooksTemplateRepository.prototype['is_template'] = undefined;

/**
 * @member {Array.<String>} topics
 */
RepositoryWebhooksTemplateRepository.prototype['topics'] = undefined;

/**
 * @member {Boolean} has_issues
 */
RepositoryWebhooksTemplateRepository.prototype['has_issues'] = undefined;

/**
 * @member {Boolean} has_projects
 */
RepositoryWebhooksTemplateRepository.prototype['has_projects'] = undefined;

/**
 * @member {Boolean} has_wiki
 */
RepositoryWebhooksTemplateRepository.prototype['has_wiki'] = undefined;

/**
 * @member {Boolean} has_pages
 */
RepositoryWebhooksTemplateRepository.prototype['has_pages'] = undefined;

/**
 * @member {Boolean} has_downloads
 */
RepositoryWebhooksTemplateRepository.prototype['has_downloads'] = undefined;

/**
 * @member {Boolean} archived
 */
RepositoryWebhooksTemplateRepository.prototype['archived'] = undefined;

/**
 * @member {Boolean} disabled
 */
RepositoryWebhooksTemplateRepository.prototype['disabled'] = undefined;

/**
 * @member {String} visibility
 */
RepositoryWebhooksTemplateRepository.prototype['visibility'] = undefined;

/**
 * @member {String} pushed_at
 */
RepositoryWebhooksTemplateRepository.prototype['pushed_at'] = undefined;

/**
 * @member {String} created_at
 */
RepositoryWebhooksTemplateRepository.prototype['created_at'] = undefined;

/**
 * @member {String} updated_at
 */
RepositoryWebhooksTemplateRepository.prototype['updated_at'] = undefined;

/**
 * @member {module:model/MinimalRepositoryPermissions} permissions
 */
RepositoryWebhooksTemplateRepository.prototype['permissions'] = undefined;

/**
 * @member {Boolean} allow_rebase_merge
 */
RepositoryWebhooksTemplateRepository.prototype['allow_rebase_merge'] = undefined;

/**
 * @member {String} temp_clone_token
 */
RepositoryWebhooksTemplateRepository.prototype['temp_clone_token'] = undefined;

/**
 * @member {Boolean} allow_squash_merge
 */
RepositoryWebhooksTemplateRepository.prototype['allow_squash_merge'] = undefined;

/**
 * @member {Boolean} allow_auto_merge
 */
RepositoryWebhooksTemplateRepository.prototype['allow_auto_merge'] = undefined;

/**
 * @member {Boolean} delete_branch_on_merge
 */
RepositoryWebhooksTemplateRepository.prototype['delete_branch_on_merge'] = undefined;

/**
 * @member {Boolean} allow_update_branch
 */
RepositoryWebhooksTemplateRepository.prototype['allow_update_branch'] = undefined;

/**
 * @member {Boolean} use_squash_pr_title_as_default
 */
RepositoryWebhooksTemplateRepository.prototype['use_squash_pr_title_as_default'] = undefined;

/**
 * The default value for a squash merge commit title:  - `PR_TITLE` - default to the pull request's title. - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
 * @member {module:model/RepositoryWebhooksTemplateRepository.SquashMergeCommitTitleEnum} squash_merge_commit_title
 */
RepositoryWebhooksTemplateRepository.prototype['squash_merge_commit_title'] = undefined;

/**
 * The default value for a squash merge commit message:  - `PR_BODY` - default to the pull request's body. - `COMMIT_MESSAGES` - default to the branch's commit messages. - `BLANK` - default to a blank commit message.
 * @member {module:model/RepositoryWebhooksTemplateRepository.SquashMergeCommitMessageEnum} squash_merge_commit_message
 */
RepositoryWebhooksTemplateRepository.prototype['squash_merge_commit_message'] = undefined;

/**
 * The default value for a merge commit title.  - `PR_TITLE` - default to the pull request's title. - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
 * @member {module:model/RepositoryWebhooksTemplateRepository.MergeCommitTitleEnum} merge_commit_title
 */
RepositoryWebhooksTemplateRepository.prototype['merge_commit_title'] = undefined;

/**
 * The default value for a merge commit message.  - `PR_TITLE` - default to the pull request's title. - `PR_BODY` - default to the pull request's body. - `BLANK` - default to a blank commit message.
 * @member {module:model/RepositoryWebhooksTemplateRepository.MergeCommitMessageEnum} merge_commit_message
 */
RepositoryWebhooksTemplateRepository.prototype['merge_commit_message'] = undefined;

/**
 * @member {Boolean} allow_merge_commit
 */
RepositoryWebhooksTemplateRepository.prototype['allow_merge_commit'] = undefined;

/**
 * @member {Number} subscribers_count
 */
RepositoryWebhooksTemplateRepository.prototype['subscribers_count'] = undefined;

/**
 * @member {Number} network_count
 */
RepositoryWebhooksTemplateRepository.prototype['network_count'] = undefined;





/**
 * Allowed values for the <code>squash_merge_commit_title</code> property.
 * @enum {String}
 * @readonly
 */
RepositoryWebhooksTemplateRepository['SquashMergeCommitTitleEnum'] = {

    /**
     * value: "PR_TITLE"
     * @const
     */
    "PR_TITLE": "PR_TITLE",

    /**
     * value: "COMMIT_OR_PR_TITLE"
     * @const
     */
    "COMMIT_OR_PR_TITLE": "COMMIT_OR_PR_TITLE"
};


/**
 * Allowed values for the <code>squash_merge_commit_message</code> property.
 * @enum {String}
 * @readonly
 */
RepositoryWebhooksTemplateRepository['SquashMergeCommitMessageEnum'] = {

    /**
     * value: "PR_BODY"
     * @const
     */
    "PR_BODY": "PR_BODY",

    /**
     * value: "COMMIT_MESSAGES"
     * @const
     */
    "COMMIT_MESSAGES": "COMMIT_MESSAGES",

    /**
     * value: "BLANK"
     * @const
     */
    "BLANK": "BLANK"
};


/**
 * Allowed values for the <code>merge_commit_title</code> property.
 * @enum {String}
 * @readonly
 */
RepositoryWebhooksTemplateRepository['MergeCommitTitleEnum'] = {

    /**
     * value: "PR_TITLE"
     * @const
     */
    "PR_TITLE": "PR_TITLE",

    /**
     * value: "MERGE_MESSAGE"
     * @const
     */
    "MERGE_MESSAGE": "MERGE_MESSAGE"
};


/**
 * Allowed values for the <code>merge_commit_message</code> property.
 * @enum {String}
 * @readonly
 */
RepositoryWebhooksTemplateRepository['MergeCommitMessageEnum'] = {

    /**
     * value: "PR_BODY"
     * @const
     */
    "PR_BODY": "PR_BODY",

    /**
     * value: "PR_TITLE"
     * @const
     */
    "PR_TITLE": "PR_TITLE",

    /**
     * value: "BLANK"
     * @const
     */
    "BLANK": "BLANK"
};



export default RepositoryWebhooksTemplateRepository;

