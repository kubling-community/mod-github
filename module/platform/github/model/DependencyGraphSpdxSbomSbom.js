/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DependencyGraphSpdxSbomSbomCreationInfo from './DependencyGraphSpdxSbomSbomCreationInfo';
import DependencyGraphSpdxSbomSbomPackagesInner from './DependencyGraphSpdxSbomSbomPackagesInner';

/**
 * The DependencyGraphSpdxSbomSbom model module.
 * @module model/DependencyGraphSpdxSbomSbom
 * @version 1.1.4
 */
class DependencyGraphSpdxSbomSbom {
    /**
     * Constructs a new <code>DependencyGraphSpdxSbomSbom</code>.
     * @alias module:model/DependencyGraphSpdxSbomSbom
     * @param SPDXID {String} The SPDX identifier for the SPDX document.
     * @param spdxVersion {String} The version of the SPDX specification that this document conforms to.
     * @param creationInfo {module:model/DependencyGraphSpdxSbomSbomCreationInfo} 
     * @param name {String} The name of the SPDX document.
     * @param dataLicense {String} The license under which the SPDX document is licensed.
     * @param documentDescribes {Array.<String>} The name of the repository that the SPDX document describes.
     * @param documentNamespace {String} The namespace for the SPDX document.
     * @param packages {Array.<module:model/DependencyGraphSpdxSbomSbomPackagesInner>} 
     */
    constructor(SPDXID, spdxVersion, creationInfo, name, dataLicense, documentDescribes, documentNamespace, packages) { 
        
        DependencyGraphSpdxSbomSbom.initialize(this, SPDXID, spdxVersion, creationInfo, name, dataLicense, documentDescribes, documentNamespace, packages);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, SPDXID, spdxVersion, creationInfo, name, dataLicense, documentDescribes, documentNamespace, packages) { 
        obj['SPDXID'] = SPDXID;
        obj['spdxVersion'] = spdxVersion;
        obj['creationInfo'] = creationInfo;
        obj['name'] = name;
        obj['dataLicense'] = dataLicense;
        obj['documentDescribes'] = documentDescribes;
        obj['documentNamespace'] = documentNamespace;
        obj['packages'] = packages;
    }

    /**
     * Constructs a <code>DependencyGraphSpdxSbomSbom</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DependencyGraphSpdxSbomSbom} obj Optional instance to populate.
     * @return {module:model/DependencyGraphSpdxSbomSbom} The populated <code>DependencyGraphSpdxSbomSbom</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DependencyGraphSpdxSbomSbom();

            if (data.hasOwnProperty('SPDXID')) {
                obj['SPDXID'] = ApiClient.convertToType(data['SPDXID'], 'String');
            }
            if (data.hasOwnProperty('spdxVersion')) {
                obj['spdxVersion'] = ApiClient.convertToType(data['spdxVersion'], 'String');
            }
            if (data.hasOwnProperty('creationInfo')) {
                obj['creationInfo'] = DependencyGraphSpdxSbomSbomCreationInfo.constructFromObject(data['creationInfo']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('dataLicense')) {
                obj['dataLicense'] = ApiClient.convertToType(data['dataLicense'], 'String');
            }
            if (data.hasOwnProperty('documentDescribes')) {
                obj['documentDescribes'] = ApiClient.convertToType(data['documentDescribes'], ['String']);
            }
            if (data.hasOwnProperty('documentNamespace')) {
                obj['documentNamespace'] = ApiClient.convertToType(data['documentNamespace'], 'String');
            }
            if (data.hasOwnProperty('packages')) {
                obj['packages'] = ApiClient.convertToType(data['packages'], [DependencyGraphSpdxSbomSbomPackagesInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DependencyGraphSpdxSbomSbom</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DependencyGraphSpdxSbomSbom</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DependencyGraphSpdxSbomSbom.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['SPDXID'] && !(typeof data['SPDXID'] === 'string' || data['SPDXID'] instanceof String)) {
            throw new Error("Expected the field `SPDXID` to be a primitive type in the JSON string but got " + data['SPDXID']);
        }
        // ensure the json data is a string
        if (data['spdxVersion'] && !(typeof data['spdxVersion'] === 'string' || data['spdxVersion'] instanceof String)) {
            throw new Error("Expected the field `spdxVersion` to be a primitive type in the JSON string but got " + data['spdxVersion']);
        }
        // validate the optional field `creationInfo`
        if (data['creationInfo']) { // data not null
          DependencyGraphSpdxSbomSbomCreationInfo.validateJSON(data['creationInfo']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['dataLicense'] && !(typeof data['dataLicense'] === 'string' || data['dataLicense'] instanceof String)) {
            throw new Error("Expected the field `dataLicense` to be a primitive type in the JSON string but got " + data['dataLicense']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['documentDescribes'])) {
            throw new Error("Expected the field `documentDescribes` to be an array in the JSON data but got " + data['documentDescribes']);
        }
        // ensure the json data is a string
        if (data['documentNamespace'] && !(typeof data['documentNamespace'] === 'string' || data['documentNamespace'] instanceof String)) {
            throw new Error("Expected the field `documentNamespace` to be a primitive type in the JSON string but got " + data['documentNamespace']);
        }
        if (data['packages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['packages'])) {
                throw new Error("Expected the field `packages` to be an array in the JSON data but got " + data['packages']);
            }
            // validate the optional field `packages` (array)
            for (const item of data['packages']) {
                DependencyGraphSpdxSbomSbomPackagesInner.validateJSON(item);
            };
        }

        return true;
    }


}

DependencyGraphSpdxSbomSbom.RequiredProperties = ["SPDXID", "spdxVersion", "creationInfo", "name", "dataLicense", "documentDescribes", "documentNamespace", "packages"];

/**
 * The SPDX identifier for the SPDX document.
 * @member {String} SPDXID
 */
DependencyGraphSpdxSbomSbom.prototype['SPDXID'] = undefined;

/**
 * The version of the SPDX specification that this document conforms to.
 * @member {String} spdxVersion
 */
DependencyGraphSpdxSbomSbom.prototype['spdxVersion'] = undefined;

/**
 * @member {module:model/DependencyGraphSpdxSbomSbomCreationInfo} creationInfo
 */
DependencyGraphSpdxSbomSbom.prototype['creationInfo'] = undefined;

/**
 * The name of the SPDX document.
 * @member {String} name
 */
DependencyGraphSpdxSbomSbom.prototype['name'] = undefined;

/**
 * The license under which the SPDX document is licensed.
 * @member {String} dataLicense
 */
DependencyGraphSpdxSbomSbom.prototype['dataLicense'] = undefined;

/**
 * The name of the repository that the SPDX document describes.
 * @member {Array.<String>} documentDescribes
 */
DependencyGraphSpdxSbomSbom.prototype['documentDescribes'] = undefined;

/**
 * The namespace for the SPDX document.
 * @member {String} documentNamespace
 */
DependencyGraphSpdxSbomSbom.prototype['documentNamespace'] = undefined;

/**
 * @member {Array.<module:model/DependencyGraphSpdxSbomSbomPackagesInner>} packages
 */
DependencyGraphSpdxSbomSbom.prototype['packages'] = undefined;






export default DependencyGraphSpdxSbomSbom;

