/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CopilotSeatBreakdown from './CopilotSeatBreakdown';

/**
 * The CopilotOrganizationDetails model module.
 * @module model/CopilotOrganizationDetails
 * @version 1.1.4
 */
class CopilotOrganizationDetails {
    /**
     * Constructs a new <code>CopilotOrganizationDetails</code>.
     * Information about the seat breakdown and policies set for an organization with a Copilot Business subscription.
     * @alias module:model/CopilotOrganizationDetails
     * @extends Object
     * @param seatBreakdown {module:model/CopilotSeatBreakdown} 
     * @param publicCodeSuggestions {module:model/CopilotOrganizationDetails.PublicCodeSuggestionsEnum} The organization policy for allowing or disallowing Copilot to make suggestions that match public code.
     * @param seatManagementSetting {module:model/CopilotOrganizationDetails.SeatManagementSettingEnum} The mode of assigning new seats.
     */
    constructor(seatBreakdown, publicCodeSuggestions, seatManagementSetting) { 
        
        CopilotOrganizationDetails.initialize(this, seatBreakdown, publicCodeSuggestions, seatManagementSetting);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, seatBreakdown, publicCodeSuggestions, seatManagementSetting) { 
        obj['seat_breakdown'] = seatBreakdown;
        obj['public_code_suggestions'] = publicCodeSuggestions;
        obj['seat_management_setting'] = seatManagementSetting;
    }

    /**
     * Constructs a <code>CopilotOrganizationDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CopilotOrganizationDetails} obj Optional instance to populate.
     * @return {module:model/CopilotOrganizationDetails} The populated <code>CopilotOrganizationDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CopilotOrganizationDetails();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('seat_breakdown')) {
                obj['seat_breakdown'] = CopilotSeatBreakdown.constructFromObject(data['seat_breakdown']);
            }
            if (data.hasOwnProperty('public_code_suggestions')) {
                obj['public_code_suggestions'] = ApiClient.convertToType(data['public_code_suggestions'], 'String');
            }
            if (data.hasOwnProperty('ide_chat')) {
                obj['ide_chat'] = ApiClient.convertToType(data['ide_chat'], 'String');
            }
            if (data.hasOwnProperty('platform_chat')) {
                obj['platform_chat'] = ApiClient.convertToType(data['platform_chat'], 'String');
            }
            if (data.hasOwnProperty('cli')) {
                obj['cli'] = ApiClient.convertToType(data['cli'], 'String');
            }
            if (data.hasOwnProperty('seat_management_setting')) {
                obj['seat_management_setting'] = ApiClient.convertToType(data['seat_management_setting'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CopilotOrganizationDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CopilotOrganizationDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CopilotOrganizationDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `seat_breakdown`
        if (data['seat_breakdown']) { // data not null
          CopilotSeatBreakdown.validateJSON(data['seat_breakdown']);
        }
        // ensure the json data is a string
        if (data['public_code_suggestions'] && !(typeof data['public_code_suggestions'] === 'string' || data['public_code_suggestions'] instanceof String)) {
            throw new Error("Expected the field `public_code_suggestions` to be a primitive type in the JSON string but got " + data['public_code_suggestions']);
        }
        // ensure the json data is a string
        if (data['ide_chat'] && !(typeof data['ide_chat'] === 'string' || data['ide_chat'] instanceof String)) {
            throw new Error("Expected the field `ide_chat` to be a primitive type in the JSON string but got " + data['ide_chat']);
        }
        // ensure the json data is a string
        if (data['platform_chat'] && !(typeof data['platform_chat'] === 'string' || data['platform_chat'] instanceof String)) {
            throw new Error("Expected the field `platform_chat` to be a primitive type in the JSON string but got " + data['platform_chat']);
        }
        // ensure the json data is a string
        if (data['cli'] && !(typeof data['cli'] === 'string' || data['cli'] instanceof String)) {
            throw new Error("Expected the field `cli` to be a primitive type in the JSON string but got " + data['cli']);
        }
        // ensure the json data is a string
        if (data['seat_management_setting'] && !(typeof data['seat_management_setting'] === 'string' || data['seat_management_setting'] instanceof String)) {
            throw new Error("Expected the field `seat_management_setting` to be a primitive type in the JSON string but got " + data['seat_management_setting']);
        }

        return true;
    }


}

CopilotOrganizationDetails.RequiredProperties = ["seat_breakdown", "public_code_suggestions", "seat_management_setting"];

/**
 * @member {module:model/CopilotSeatBreakdown} seat_breakdown
 */
CopilotOrganizationDetails.prototype['seat_breakdown'] = undefined;

/**
 * The organization policy for allowing or disallowing Copilot to make suggestions that match public code.
 * @member {module:model/CopilotOrganizationDetails.PublicCodeSuggestionsEnum} public_code_suggestions
 */
CopilotOrganizationDetails.prototype['public_code_suggestions'] = undefined;

/**
 * The organization policy for allowing or disallowing organization members to use Copilot Chat within their editor.
 * @member {module:model/CopilotOrganizationDetails.IdeChatEnum} ide_chat
 */
CopilotOrganizationDetails.prototype['ide_chat'] = undefined;

/**
 * The organization policy for allowing or disallowing organization members to use Copilot features within github.com.
 * @member {module:model/CopilotOrganizationDetails.PlatformChatEnum} platform_chat
 */
CopilotOrganizationDetails.prototype['platform_chat'] = undefined;

/**
 * The organization policy for allowing or disallowing organization members to use Copilot within their CLI.
 * @member {module:model/CopilotOrganizationDetails.CliEnum} cli
 */
CopilotOrganizationDetails.prototype['cli'] = undefined;

/**
 * The mode of assigning new seats.
 * @member {module:model/CopilotOrganizationDetails.SeatManagementSettingEnum} seat_management_setting
 */
CopilotOrganizationDetails.prototype['seat_management_setting'] = undefined;





/**
 * Allowed values for the <code>public_code_suggestions</code> property.
 * @enum {String}
 * @readonly
 */
CopilotOrganizationDetails['PublicCodeSuggestionsEnum'] = {

    /**
     * value: "allow"
     * @const
     */
    "allow": "allow",

    /**
     * value: "block"
     * @const
     */
    "block": "block",

    /**
     * value: "unconfigured"
     * @const
     */
    "unconfigured": "unconfigured",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown"
};


/**
 * Allowed values for the <code>ide_chat</code> property.
 * @enum {String}
 * @readonly
 */
CopilotOrganizationDetails['IdeChatEnum'] = {

    /**
     * value: "enabled"
     * @const
     */
    "enabled": "enabled",

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled",

    /**
     * value: "unconfigured"
     * @const
     */
    "unconfigured": "unconfigured"
};


/**
 * Allowed values for the <code>platform_chat</code> property.
 * @enum {String}
 * @readonly
 */
CopilotOrganizationDetails['PlatformChatEnum'] = {

    /**
     * value: "enabled"
     * @const
     */
    "enabled": "enabled",

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled",

    /**
     * value: "unconfigured"
     * @const
     */
    "unconfigured": "unconfigured"
};


/**
 * Allowed values for the <code>cli</code> property.
 * @enum {String}
 * @readonly
 */
CopilotOrganizationDetails['CliEnum'] = {

    /**
     * value: "enabled"
     * @const
     */
    "enabled": "enabled",

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled",

    /**
     * value: "unconfigured"
     * @const
     */
    "unconfigured": "unconfigured"
};


/**
 * Allowed values for the <code>seat_management_setting</code> property.
 * @enum {String}
 * @readonly
 */
CopilotOrganizationDetails['SeatManagementSettingEnum'] = {

    /**
     * value: "assign_all"
     * @const
     */
    "assign_all": "assign_all",

    /**
     * value: "assign_selected"
     * @const
     */
    "assign_selected": "assign_selected",

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled",

    /**
     * value: "unconfigured"
     * @const
     */
    "unconfigured": "unconfigured"
};



export default CopilotOrganizationDetails;

