/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import User1 from './User1';
import WebhooksReviewLinks from './WebhooksReviewLinks';

/**
 * The WebhookPullRequestReviewDismissedReview model module.
 * @module model/WebhookPullRequestReviewDismissedReview
 * @version 1.1.4
 */
class WebhookPullRequestReviewDismissedReview {
    /**
     * Constructs a new <code>WebhookPullRequestReviewDismissedReview</code>.
     * The review that was affected.
     * @alias module:model/WebhookPullRequestReviewDismissedReview
     * @param links {module:model/WebhooksReviewLinks} 
     * @param authorAssociation {module:model/WebhookPullRequestReviewDismissedReview.AuthorAssociationEnum} How the author is associated with the repository.
     * @param body {String} The text of the review.
     * @param commitId {String} A commit SHA for the review.
     * @param htmlUrl {String} 
     * @param id {Number} Unique identifier of the review
     * @param nodeId {String} 
     * @param pullRequestUrl {String} 
     * @param state {module:model/WebhookPullRequestReviewDismissedReview.StateEnum} 
     * @param submittedAt {Date} 
     * @param user {module:model/User1} 
     */
    constructor(links, authorAssociation, body, commitId, htmlUrl, id, nodeId, pullRequestUrl, state, submittedAt, user) { 
        
        WebhookPullRequestReviewDismissedReview.initialize(this, links, authorAssociation, body, commitId, htmlUrl, id, nodeId, pullRequestUrl, state, submittedAt, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, links, authorAssociation, body, commitId, htmlUrl, id, nodeId, pullRequestUrl, state, submittedAt, user) { 
        obj['_links'] = links;
        obj['author_association'] = authorAssociation;
        obj['body'] = body;
        obj['commit_id'] = commitId;
        obj['html_url'] = htmlUrl;
        obj['id'] = id;
        obj['node_id'] = nodeId;
        obj['pull_request_url'] = pullRequestUrl;
        obj['state'] = state;
        obj['submitted_at'] = submittedAt;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>WebhookPullRequestReviewDismissedReview</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebhookPullRequestReviewDismissedReview} obj Optional instance to populate.
     * @return {module:model/WebhookPullRequestReviewDismissedReview} The populated <code>WebhookPullRequestReviewDismissedReview</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebhookPullRequestReviewDismissedReview();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = WebhooksReviewLinks.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('author_association')) {
                obj['author_association'] = ApiClient.convertToType(data['author_association'], 'String');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('commit_id')) {
                obj['commit_id'] = ApiClient.convertToType(data['commit_id'], 'String');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('pull_request_url')) {
                obj['pull_request_url'] = ApiClient.convertToType(data['pull_request_url'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('submitted_at')) {
                obj['submitted_at'] = ApiClient.convertToType(data['submitted_at'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User1.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebhookPullRequestReviewDismissedReview</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebhookPullRequestReviewDismissedReview</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WebhookPullRequestReviewDismissedReview.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `_links`
        if (data['_links']) { // data not null
          WebhooksReviewLinks.validateJSON(data['_links']);
        }
        // ensure the json data is a string
        if (data['author_association'] && !(typeof data['author_association'] === 'string' || data['author_association'] instanceof String)) {
            throw new Error("Expected the field `author_association` to be a primitive type in the JSON string but got " + data['author_association']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['commit_id'] && !(typeof data['commit_id'] === 'string' || data['commit_id'] instanceof String)) {
            throw new Error("Expected the field `commit_id` to be a primitive type in the JSON string but got " + data['commit_id']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // ensure the json data is a string
        if (data['pull_request_url'] && !(typeof data['pull_request_url'] === 'string' || data['pull_request_url'] instanceof String)) {
            throw new Error("Expected the field `pull_request_url` to be a primitive type in the JSON string but got " + data['pull_request_url']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User1.validateJSON(data['user']);
        }

        return true;
    }


}

WebhookPullRequestReviewDismissedReview.RequiredProperties = ["_links", "author_association", "body", "commit_id", "html_url", "id", "node_id", "pull_request_url", "state", "submitted_at", "user"];

/**
 * @member {module:model/WebhooksReviewLinks} _links
 */
WebhookPullRequestReviewDismissedReview.prototype['_links'] = undefined;

/**
 * How the author is associated with the repository.
 * @member {module:model/WebhookPullRequestReviewDismissedReview.AuthorAssociationEnum} author_association
 */
WebhookPullRequestReviewDismissedReview.prototype['author_association'] = undefined;

/**
 * The text of the review.
 * @member {String} body
 */
WebhookPullRequestReviewDismissedReview.prototype['body'] = undefined;

/**
 * A commit SHA for the review.
 * @member {String} commit_id
 */
WebhookPullRequestReviewDismissedReview.prototype['commit_id'] = undefined;

/**
 * @member {String} html_url
 */
WebhookPullRequestReviewDismissedReview.prototype['html_url'] = undefined;

/**
 * Unique identifier of the review
 * @member {Number} id
 */
WebhookPullRequestReviewDismissedReview.prototype['id'] = undefined;

/**
 * @member {String} node_id
 */
WebhookPullRequestReviewDismissedReview.prototype['node_id'] = undefined;

/**
 * @member {String} pull_request_url
 */
WebhookPullRequestReviewDismissedReview.prototype['pull_request_url'] = undefined;

/**
 * @member {module:model/WebhookPullRequestReviewDismissedReview.StateEnum} state
 */
WebhookPullRequestReviewDismissedReview.prototype['state'] = undefined;

/**
 * @member {Date} submitted_at
 */
WebhookPullRequestReviewDismissedReview.prototype['submitted_at'] = undefined;

/**
 * @member {module:model/User1} user
 */
WebhookPullRequestReviewDismissedReview.prototype['user'] = undefined;





/**
 * Allowed values for the <code>author_association</code> property.
 * @enum {String}
 * @readonly
 */
WebhookPullRequestReviewDismissedReview['AuthorAssociationEnum'] = {

    /**
     * value: "COLLABORATOR"
     * @const
     */
    "COLLABORATOR": "COLLABORATOR",

    /**
     * value: "CONTRIBUTOR"
     * @const
     */
    "CONTRIBUTOR": "CONTRIBUTOR",

    /**
     * value: "FIRST_TIMER"
     * @const
     */
    "FIRST_TIMER": "FIRST_TIMER",

    /**
     * value: "FIRST_TIME_CONTRIBUTOR"
     * @const
     */
    "FIRST_TIME_CONTRIBUTOR": "FIRST_TIME_CONTRIBUTOR",

    /**
     * value: "MANNEQUIN"
     * @const
     */
    "MANNEQUIN": "MANNEQUIN",

    /**
     * value: "MEMBER"
     * @const
     */
    "MEMBER": "MEMBER",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "OWNER"
     * @const
     */
    "OWNER": "OWNER"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
WebhookPullRequestReviewDismissedReview['StateEnum'] = {

    /**
     * value: "dismissed"
     * @const
     */
    "dismissed": "dismissed",

    /**
     * value: "approved"
     * @const
     */
    "approved": "approved",

    /**
     * value: "changes_requested"
     * @const
     */
    "changes_requested": "changes_requested"
};



export default WebhookPullRequestReviewDismissedReview;

