/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DependabotUpdateAlertRequest model module.
 * @module model/DependabotUpdateAlertRequest
 * @version 1.1.4
 */
class DependabotUpdateAlertRequest {
    /**
     * Constructs a new <code>DependabotUpdateAlertRequest</code>.
     * @alias module:model/DependabotUpdateAlertRequest
     * @param state {module:model/DependabotUpdateAlertRequest.StateEnum} The state of the Dependabot alert. A `dismissed_reason` must be provided when setting the state to `dismissed`.
     */
    constructor(state) { 
        
        DependabotUpdateAlertRequest.initialize(this, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, state) { 
        obj['state'] = state;
    }

    /**
     * Constructs a <code>DependabotUpdateAlertRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DependabotUpdateAlertRequest} obj Optional instance to populate.
     * @return {module:model/DependabotUpdateAlertRequest} The populated <code>DependabotUpdateAlertRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DependabotUpdateAlertRequest();

            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('dismissed_reason')) {
                obj['dismissed_reason'] = ApiClient.convertToType(data['dismissed_reason'], 'String');
            }
            if (data.hasOwnProperty('dismissed_comment')) {
                obj['dismissed_comment'] = ApiClient.convertToType(data['dismissed_comment'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DependabotUpdateAlertRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DependabotUpdateAlertRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DependabotUpdateAlertRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['dismissed_reason'] && !(typeof data['dismissed_reason'] === 'string' || data['dismissed_reason'] instanceof String)) {
            throw new Error("Expected the field `dismissed_reason` to be a primitive type in the JSON string but got " + data['dismissed_reason']);
        }
        // ensure the json data is a string
        if (data['dismissed_comment'] && !(typeof data['dismissed_comment'] === 'string' || data['dismissed_comment'] instanceof String)) {
            throw new Error("Expected the field `dismissed_comment` to be a primitive type in the JSON string but got " + data['dismissed_comment']);
        }

        return true;
    }


}

DependabotUpdateAlertRequest.RequiredProperties = ["state"];

/**
 * The state of the Dependabot alert. A `dismissed_reason` must be provided when setting the state to `dismissed`.
 * @member {module:model/DependabotUpdateAlertRequest.StateEnum} state
 */
DependabotUpdateAlertRequest.prototype['state'] = undefined;

/**
 * **Required when `state` is `dismissed`.** A reason for dismissing the alert.
 * @member {module:model/DependabotUpdateAlertRequest.DismissedReasonEnum} dismissed_reason
 */
DependabotUpdateAlertRequest.prototype['dismissed_reason'] = undefined;

/**
 * An optional comment associated with dismissing the alert.
 * @member {String} dismissed_comment
 */
DependabotUpdateAlertRequest.prototype['dismissed_comment'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
DependabotUpdateAlertRequest['StateEnum'] = {

    /**
     * value: "dismissed"
     * @const
     */
    "dismissed": "dismissed",

    /**
     * value: "open"
     * @const
     */
    "open": "open"
};


/**
 * Allowed values for the <code>dismissed_reason</code> property.
 * @enum {String}
 * @readonly
 */
DependabotUpdateAlertRequest['DismissedReasonEnum'] = {

    /**
     * value: "fix_started"
     * @const
     */
    "fix_started": "fix_started",

    /**
     * value: "inaccurate"
     * @const
     */
    "inaccurate": "inaccurate",

    /**
     * value: "no_bandwidth"
     * @const
     */
    "no_bandwidth": "no_bandwidth",

    /**
     * value: "not_used"
     * @const
     */
    "not_used": "not_used",

    /**
     * value: "tolerable_risk"
     * @const
     */
    "tolerable_risk": "tolerable_risk"
};



export default DependabotUpdateAlertRequest;

