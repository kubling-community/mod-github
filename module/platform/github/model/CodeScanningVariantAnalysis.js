/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CodeScanningVariantAnalysisLanguage from './CodeScanningVariantAnalysisLanguage';
import CodeScanningVariantAnalysisScannedRepositoriesInner from './CodeScanningVariantAnalysisScannedRepositoriesInner';
import CodeScanningVariantAnalysisSkippedRepositories from './CodeScanningVariantAnalysisSkippedRepositories';
import SimpleRepository from './SimpleRepository';
import SimpleUser from './SimpleUser';

/**
 * The CodeScanningVariantAnalysis model module.
 * @module model/CodeScanningVariantAnalysis
 * @version 1.1.4
 */
class CodeScanningVariantAnalysis {
    /**
     * Constructs a new <code>CodeScanningVariantAnalysis</code>.
     * A run of a CodeQL query against one or more repositories.
     * @alias module:model/CodeScanningVariantAnalysis
     * @param id {Number} The ID of the variant analysis.
     * @param controllerRepo {module:model/SimpleRepository} 
     * @param actor {module:model/SimpleUser} 
     * @param queryLanguage {module:model/CodeScanningVariantAnalysisLanguage} 
     * @param queryPackUrl {String} The download url for the query pack.
     * @param status {module:model/CodeScanningVariantAnalysis.StatusEnum} 
     */
    constructor(id, controllerRepo, actor, queryLanguage, queryPackUrl, status) { 
        
        CodeScanningVariantAnalysis.initialize(this, id, controllerRepo, actor, queryLanguage, queryPackUrl, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, controllerRepo, actor, queryLanguage, queryPackUrl, status) { 
        obj['id'] = id;
        obj['controller_repo'] = controllerRepo;
        obj['actor'] = actor;
        obj['query_language'] = queryLanguage;
        obj['query_pack_url'] = queryPackUrl;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>CodeScanningVariantAnalysis</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CodeScanningVariantAnalysis} obj Optional instance to populate.
     * @return {module:model/CodeScanningVariantAnalysis} The populated <code>CodeScanningVariantAnalysis</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CodeScanningVariantAnalysis();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('controller_repo')) {
                obj['controller_repo'] = SimpleRepository.constructFromObject(data['controller_repo']);
            }
            if (data.hasOwnProperty('actor')) {
                obj['actor'] = SimpleUser.constructFromObject(data['actor']);
            }
            if (data.hasOwnProperty('query_language')) {
                obj['query_language'] = CodeScanningVariantAnalysisLanguage.constructFromObject(data['query_language']);
            }
            if (data.hasOwnProperty('query_pack_url')) {
                obj['query_pack_url'] = ApiClient.convertToType(data['query_pack_url'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('completed_at')) {
                obj['completed_at'] = ApiClient.convertToType(data['completed_at'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('actions_workflow_run_id')) {
                obj['actions_workflow_run_id'] = ApiClient.convertToType(data['actions_workflow_run_id'], 'Number');
            }
            if (data.hasOwnProperty('failure_reason')) {
                obj['failure_reason'] = ApiClient.convertToType(data['failure_reason'], 'String');
            }
            if (data.hasOwnProperty('scanned_repositories')) {
                obj['scanned_repositories'] = ApiClient.convertToType(data['scanned_repositories'], [CodeScanningVariantAnalysisScannedRepositoriesInner]);
            }
            if (data.hasOwnProperty('skipped_repositories')) {
                obj['skipped_repositories'] = CodeScanningVariantAnalysisSkippedRepositories.constructFromObject(data['skipped_repositories']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CodeScanningVariantAnalysis</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CodeScanningVariantAnalysis</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CodeScanningVariantAnalysis.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `controller_repo`
        if (data['controller_repo']) { // data not null
          SimpleRepository.validateJSON(data['controller_repo']);
        }
        // validate the optional field `actor`
        if (data['actor']) { // data not null
          SimpleUser.validateJSON(data['actor']);
        }
        // ensure the json data is a string
        if (data['query_pack_url'] && !(typeof data['query_pack_url'] === 'string' || data['query_pack_url'] instanceof String)) {
            throw new Error("Expected the field `query_pack_url` to be a primitive type in the JSON string but got " + data['query_pack_url']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['failure_reason'] && !(typeof data['failure_reason'] === 'string' || data['failure_reason'] instanceof String)) {
            throw new Error("Expected the field `failure_reason` to be a primitive type in the JSON string but got " + data['failure_reason']);
        }
        if (data['scanned_repositories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['scanned_repositories'])) {
                throw new Error("Expected the field `scanned_repositories` to be an array in the JSON data but got " + data['scanned_repositories']);
            }
            // validate the optional field `scanned_repositories` (array)
            for (const item of data['scanned_repositories']) {
                CodeScanningVariantAnalysisScannedRepositoriesInner.validateJSON(item);
            };
        }
        // validate the optional field `skipped_repositories`
        if (data['skipped_repositories']) { // data not null
          CodeScanningVariantAnalysisSkippedRepositories.validateJSON(data['skipped_repositories']);
        }

        return true;
    }


}

CodeScanningVariantAnalysis.RequiredProperties = ["id", "controller_repo", "actor", "query_language", "query_pack_url", "status"];

/**
 * The ID of the variant analysis.
 * @member {Number} id
 */
CodeScanningVariantAnalysis.prototype['id'] = undefined;

/**
 * @member {module:model/SimpleRepository} controller_repo
 */
CodeScanningVariantAnalysis.prototype['controller_repo'] = undefined;

/**
 * @member {module:model/SimpleUser} actor
 */
CodeScanningVariantAnalysis.prototype['actor'] = undefined;

/**
 * @member {module:model/CodeScanningVariantAnalysisLanguage} query_language
 */
CodeScanningVariantAnalysis.prototype['query_language'] = undefined;

/**
 * The download url for the query pack.
 * @member {String} query_pack_url
 */
CodeScanningVariantAnalysis.prototype['query_pack_url'] = undefined;

/**
 * The date and time at which the variant analysis was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
 * @member {Date} created_at
 */
CodeScanningVariantAnalysis.prototype['created_at'] = undefined;

/**
 * The date and time at which the variant analysis was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
 * @member {Date} updated_at
 */
CodeScanningVariantAnalysis.prototype['updated_at'] = undefined;

/**
 * The date and time at which the variant analysis was completed, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ. Will be null if the variant analysis has not yet completed or this information is not available.
 * @member {Date} completed_at
 */
CodeScanningVariantAnalysis.prototype['completed_at'] = undefined;

/**
 * @member {module:model/CodeScanningVariantAnalysis.StatusEnum} status
 */
CodeScanningVariantAnalysis.prototype['status'] = undefined;

/**
 * The GitHub Actions workflow run used to execute this variant analysis. This is only available if the workflow run has started.
 * @member {Number} actions_workflow_run_id
 */
CodeScanningVariantAnalysis.prototype['actions_workflow_run_id'] = undefined;

/**
 * The reason for a failure of the variant analysis. This is only available if the variant analysis has failed.
 * @member {module:model/CodeScanningVariantAnalysis.FailureReasonEnum} failure_reason
 */
CodeScanningVariantAnalysis.prototype['failure_reason'] = undefined;

/**
 * @member {Array.<module:model/CodeScanningVariantAnalysisScannedRepositoriesInner>} scanned_repositories
 */
CodeScanningVariantAnalysis.prototype['scanned_repositories'] = undefined;

/**
 * @member {module:model/CodeScanningVariantAnalysisSkippedRepositories} skipped_repositories
 */
CodeScanningVariantAnalysis.prototype['skipped_repositories'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
CodeScanningVariantAnalysis['StatusEnum'] = {

    /**
     * value: "in_progress"
     * @const
     */
    "in_progress": "in_progress",

    /**
     * value: "succeeded"
     * @const
     */
    "succeeded": "succeeded",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "cancelled"
     * @const
     */
    "cancelled": "cancelled"
};


/**
 * Allowed values for the <code>failure_reason</code> property.
 * @enum {String}
 * @readonly
 */
CodeScanningVariantAnalysis['FailureReasonEnum'] = {

    /**
     * value: "no_repos_queried"
     * @const
     */
    "no_repos_queried": "no_repos_queried",

    /**
     * value: "actions_workflow_run_failed"
     * @const
     */
    "actions_workflow_run_failed": "actions_workflow_run_failed",

    /**
     * value: "internal_error"
     * @const
     */
    "internal_error": "internal_error"
};



export default CodeScanningVariantAnalysis;

