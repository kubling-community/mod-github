/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SecurityAdvisoryCreditTypes from './SecurityAdvisoryCreditTypes';
import SimpleUser from './SimpleUser';

/**
 * The RepositoryAdvisoryCredit model module.
 * @module model/RepositoryAdvisoryCredit
 * @version 1.1.4
 */
class RepositoryAdvisoryCredit {
    /**
     * Constructs a new <code>RepositoryAdvisoryCredit</code>.
     * A credit given to a user for a repository security advisory.
     * @alias module:model/RepositoryAdvisoryCredit
     * @param user {module:model/SimpleUser} 
     * @param type {module:model/SecurityAdvisoryCreditTypes} 
     * @param state {module:model/RepositoryAdvisoryCredit.StateEnum} The state of the user's acceptance of the credit.
     */
    constructor(user, type, state) { 
        
        RepositoryAdvisoryCredit.initialize(this, user, type, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, user, type, state) { 
        obj['user'] = user;
        obj['type'] = type;
        obj['state'] = state;
    }

    /**
     * Constructs a <code>RepositoryAdvisoryCredit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepositoryAdvisoryCredit} obj Optional instance to populate.
     * @return {module:model/RepositoryAdvisoryCredit} The populated <code>RepositoryAdvisoryCredit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepositoryAdvisoryCredit();

            if (data.hasOwnProperty('user')) {
                obj['user'] = SimpleUser.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = SecurityAdvisoryCreditTypes.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepositoryAdvisoryCredit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepositoryAdvisoryCredit</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RepositoryAdvisoryCredit.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          SimpleUser.validateJSON(data['user']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}

RepositoryAdvisoryCredit.RequiredProperties = ["user", "type", "state"];

/**
 * @member {module:model/SimpleUser} user
 */
RepositoryAdvisoryCredit.prototype['user'] = undefined;

/**
 * @member {module:model/SecurityAdvisoryCreditTypes} type
 */
RepositoryAdvisoryCredit.prototype['type'] = undefined;

/**
 * The state of the user's acceptance of the credit.
 * @member {module:model/RepositoryAdvisoryCredit.StateEnum} state
 */
RepositoryAdvisoryCredit.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
RepositoryAdvisoryCredit['StateEnum'] = {

    /**
     * value: "accepted"
     * @const
     */
    "accepted": "accepted",

    /**
     * value: "declined"
     * @const
     */
    "declined": "declined",

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending"
};



export default RepositoryAdvisoryCredit;

