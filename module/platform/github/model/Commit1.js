/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Committer from './Committer';

/**
 * The Commit1 model module.
 * @module model/Commit1
 * @version 1.1.4
 */
class Commit1 {
    /**
     * Constructs a new <code>Commit1</code>.
     * @alias module:model/Commit1
     * @param author {module:model/Committer} 
     * @param committer {module:model/Committer} 
     * @param distinct {Boolean} Whether this commit is distinct from any that have been pushed before.
     * @param id {String} 
     * @param message {String} The commit message.
     * @param timestamp {Date} The ISO 8601 timestamp of the commit.
     * @param treeId {String} 
     * @param url {String} URL that points to the commit API resource.
     */
    constructor(author, committer, distinct, id, message, timestamp, treeId, url) { 
        
        Commit1.initialize(this, author, committer, distinct, id, message, timestamp, treeId, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, author, committer, distinct, id, message, timestamp, treeId, url) { 
        obj['author'] = author;
        obj['committer'] = committer;
        obj['distinct'] = distinct;
        obj['id'] = id;
        obj['message'] = message;
        obj['timestamp'] = timestamp;
        obj['tree_id'] = treeId;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>Commit1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Commit1} obj Optional instance to populate.
     * @return {module:model/Commit1} The populated <code>Commit1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Commit1();

            if (data.hasOwnProperty('added')) {
                obj['added'] = ApiClient.convertToType(data['added'], ['String']);
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = Committer.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('committer')) {
                obj['committer'] = Committer.constructFromObject(data['committer']);
            }
            if (data.hasOwnProperty('distinct')) {
                obj['distinct'] = ApiClient.convertToType(data['distinct'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('modified')) {
                obj['modified'] = ApiClient.convertToType(data['modified'], ['String']);
            }
            if (data.hasOwnProperty('removed')) {
                obj['removed'] = ApiClient.convertToType(data['removed'], ['String']);
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('tree_id')) {
                obj['tree_id'] = ApiClient.convertToType(data['tree_id'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Commit1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Commit1</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Commit1.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['added'])) {
            throw new Error("Expected the field `added` to be an array in the JSON data but got " + data['added']);
        }
        // validate the optional field `author`
        if (data['author']) { // data not null
          Committer.validateJSON(data['author']);
        }
        // validate the optional field `committer`
        if (data['committer']) { // data not null
          Committer.validateJSON(data['committer']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['modified'])) {
            throw new Error("Expected the field `modified` to be an array in the JSON data but got " + data['modified']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['removed'])) {
            throw new Error("Expected the field `removed` to be an array in the JSON data but got " + data['removed']);
        }
        // ensure the json data is a string
        if (data['tree_id'] && !(typeof data['tree_id'] === 'string' || data['tree_id'] instanceof String)) {
            throw new Error("Expected the field `tree_id` to be a primitive type in the JSON string but got " + data['tree_id']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Commit1.RequiredProperties = ["author", "committer", "distinct", "id", "message", "timestamp", "tree_id", "url"];

/**
 * An array of files added in the commit.
 * @member {Array.<String>} added
 */
Commit1.prototype['added'] = undefined;

/**
 * @member {module:model/Committer} author
 */
Commit1.prototype['author'] = undefined;

/**
 * @member {module:model/Committer} committer
 */
Commit1.prototype['committer'] = undefined;

/**
 * Whether this commit is distinct from any that have been pushed before.
 * @member {Boolean} distinct
 */
Commit1.prototype['distinct'] = undefined;

/**
 * @member {String} id
 */
Commit1.prototype['id'] = undefined;

/**
 * The commit message.
 * @member {String} message
 */
Commit1.prototype['message'] = undefined;

/**
 * An array of files modified by the commit.
 * @member {Array.<String>} modified
 */
Commit1.prototype['modified'] = undefined;

/**
 * An array of files removed in the commit.
 * @member {Array.<String>} removed
 */
Commit1.prototype['removed'] = undefined;

/**
 * The ISO 8601 timestamp of the commit.
 * @member {Date} timestamp
 */
Commit1.prototype['timestamp'] = undefined;

/**
 * @member {String} tree_id
 */
Commit1.prototype['tree_id'] = undefined;

/**
 * URL that points to the commit API resource.
 * @member {String} url
 */
Commit1.prototype['url'] = undefined;






export default Commit1;

