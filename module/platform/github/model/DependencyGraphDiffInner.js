/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DependencyGraphDiffInnerVulnerabilitiesInner from './DependencyGraphDiffInnerVulnerabilitiesInner';

/**
 * The DependencyGraphDiffInner model module.
 * @module model/DependencyGraphDiffInner
 * @version 1.1.4
 */
class DependencyGraphDiffInner {
    /**
     * Constructs a new <code>DependencyGraphDiffInner</code>.
     * @alias module:model/DependencyGraphDiffInner
     * @param changeType {module:model/DependencyGraphDiffInner.ChangeTypeEnum} 
     * @param manifest {String} 
     * @param ecosystem {String} 
     * @param name {String} 
     * @param version {String} 
     * @param packageUrl {String} 
     * @param license {String} 
     * @param sourceRepositoryUrl {String} 
     * @param vulnerabilities {Array.<module:model/DependencyGraphDiffInnerVulnerabilitiesInner>} 
     * @param scope {module:model/DependencyGraphDiffInner.ScopeEnum} Where the dependency is utilized. `development` means that the dependency is only utilized in the development environment. `runtime` means that the dependency is utilized at runtime and in the development environment.
     */
    constructor(changeType, manifest, ecosystem, name, version, packageUrl, license, sourceRepositoryUrl, vulnerabilities, scope) { 
        
        DependencyGraphDiffInner.initialize(this, changeType, manifest, ecosystem, name, version, packageUrl, license, sourceRepositoryUrl, vulnerabilities, scope);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, changeType, manifest, ecosystem, name, version, packageUrl, license, sourceRepositoryUrl, vulnerabilities, scope) { 
        obj['change_type'] = changeType;
        obj['manifest'] = manifest;
        obj['ecosystem'] = ecosystem;
        obj['name'] = name;
        obj['version'] = version;
        obj['package_url'] = packageUrl;
        obj['license'] = license;
        obj['source_repository_url'] = sourceRepositoryUrl;
        obj['vulnerabilities'] = vulnerabilities;
        obj['scope'] = scope;
    }

    /**
     * Constructs a <code>DependencyGraphDiffInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DependencyGraphDiffInner} obj Optional instance to populate.
     * @return {module:model/DependencyGraphDiffInner} The populated <code>DependencyGraphDiffInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DependencyGraphDiffInner();

            if (data.hasOwnProperty('change_type')) {
                obj['change_type'] = ApiClient.convertToType(data['change_type'], 'String');
            }
            if (data.hasOwnProperty('manifest')) {
                obj['manifest'] = ApiClient.convertToType(data['manifest'], 'String');
            }
            if (data.hasOwnProperty('ecosystem')) {
                obj['ecosystem'] = ApiClient.convertToType(data['ecosystem'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('package_url')) {
                obj['package_url'] = ApiClient.convertToType(data['package_url'], 'String');
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], 'String');
            }
            if (data.hasOwnProperty('source_repository_url')) {
                obj['source_repository_url'] = ApiClient.convertToType(data['source_repository_url'], 'String');
            }
            if (data.hasOwnProperty('vulnerabilities')) {
                obj['vulnerabilities'] = ApiClient.convertToType(data['vulnerabilities'], [DependencyGraphDiffInnerVulnerabilitiesInner]);
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DependencyGraphDiffInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DependencyGraphDiffInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DependencyGraphDiffInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['change_type'] && !(typeof data['change_type'] === 'string' || data['change_type'] instanceof String)) {
            throw new Error("Expected the field `change_type` to be a primitive type in the JSON string but got " + data['change_type']);
        }
        // ensure the json data is a string
        if (data['manifest'] && !(typeof data['manifest'] === 'string' || data['manifest'] instanceof String)) {
            throw new Error("Expected the field `manifest` to be a primitive type in the JSON string but got " + data['manifest']);
        }
        // ensure the json data is a string
        if (data['ecosystem'] && !(typeof data['ecosystem'] === 'string' || data['ecosystem'] instanceof String)) {
            throw new Error("Expected the field `ecosystem` to be a primitive type in the JSON string but got " + data['ecosystem']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['package_url'] && !(typeof data['package_url'] === 'string' || data['package_url'] instanceof String)) {
            throw new Error("Expected the field `package_url` to be a primitive type in the JSON string but got " + data['package_url']);
        }
        // ensure the json data is a string
        if (data['license'] && !(typeof data['license'] === 'string' || data['license'] instanceof String)) {
            throw new Error("Expected the field `license` to be a primitive type in the JSON string but got " + data['license']);
        }
        // ensure the json data is a string
        if (data['source_repository_url'] && !(typeof data['source_repository_url'] === 'string' || data['source_repository_url'] instanceof String)) {
            throw new Error("Expected the field `source_repository_url` to be a primitive type in the JSON string but got " + data['source_repository_url']);
        }
        if (data['vulnerabilities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vulnerabilities'])) {
                throw new Error("Expected the field `vulnerabilities` to be an array in the JSON data but got " + data['vulnerabilities']);
            }
            // validate the optional field `vulnerabilities` (array)
            for (const item of data['vulnerabilities']) {
                DependencyGraphDiffInnerVulnerabilitiesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }

        return true;
    }


}

DependencyGraphDiffInner.RequiredProperties = ["change_type", "manifest", "ecosystem", "name", "version", "package_url", "license", "source_repository_url", "vulnerabilities", "scope"];

/**
 * @member {module:model/DependencyGraphDiffInner.ChangeTypeEnum} change_type
 */
DependencyGraphDiffInner.prototype['change_type'] = undefined;

/**
 * @member {String} manifest
 */
DependencyGraphDiffInner.prototype['manifest'] = undefined;

/**
 * @member {String} ecosystem
 */
DependencyGraphDiffInner.prototype['ecosystem'] = undefined;

/**
 * @member {String} name
 */
DependencyGraphDiffInner.prototype['name'] = undefined;

/**
 * @member {String} version
 */
DependencyGraphDiffInner.prototype['version'] = undefined;

/**
 * @member {String} package_url
 */
DependencyGraphDiffInner.prototype['package_url'] = undefined;

/**
 * @member {String} license
 */
DependencyGraphDiffInner.prototype['license'] = undefined;

/**
 * @member {String} source_repository_url
 */
DependencyGraphDiffInner.prototype['source_repository_url'] = undefined;

/**
 * @member {Array.<module:model/DependencyGraphDiffInnerVulnerabilitiesInner>} vulnerabilities
 */
DependencyGraphDiffInner.prototype['vulnerabilities'] = undefined;

/**
 * Where the dependency is utilized. `development` means that the dependency is only utilized in the development environment. `runtime` means that the dependency is utilized at runtime and in the development environment.
 * @member {module:model/DependencyGraphDiffInner.ScopeEnum} scope
 */
DependencyGraphDiffInner.prototype['scope'] = undefined;





/**
 * Allowed values for the <code>change_type</code> property.
 * @enum {String}
 * @readonly
 */
DependencyGraphDiffInner['ChangeTypeEnum'] = {

    /**
     * value: "added"
     * @const
     */
    "added": "added",

    /**
     * value: "removed"
     * @const
     */
    "removed": "removed"
};


/**
 * Allowed values for the <code>scope</code> property.
 * @enum {String}
 * @readonly
 */
DependencyGraphDiffInner['ScopeEnum'] = {

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "runtime"
     * @const
     */
    "runtime": "runtime",

    /**
     * value: "development"
     * @const
     */
    "development": "development"
};



export default DependencyGraphDiffInner;

