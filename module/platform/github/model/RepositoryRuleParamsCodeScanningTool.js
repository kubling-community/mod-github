/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RepositoryRuleParamsCodeScanningTool model module.
 * @module model/RepositoryRuleParamsCodeScanningTool
 * @version 1.1.4
 */
class RepositoryRuleParamsCodeScanningTool {
    /**
     * Constructs a new <code>RepositoryRuleParamsCodeScanningTool</code>.
     * A tool that must provide code scanning results for this rule to pass.
     * @alias module:model/RepositoryRuleParamsCodeScanningTool
     * @param alertsThreshold {module:model/RepositoryRuleParamsCodeScanningTool.AlertsThresholdEnum} The severity level at which code scanning results that raise alerts block a reference update. For more information on alert severity levels, see \"[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels).\"
     * @param securityAlertsThreshold {module:model/RepositoryRuleParamsCodeScanningTool.SecurityAlertsThresholdEnum} The severity level at which code scanning results that raise security alerts block a reference update. For more information on security severity levels, see \"[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels).\"
     * @param tool {String} The name of a code scanning tool
     */
    constructor(alertsThreshold, securityAlertsThreshold, tool) { 
        
        RepositoryRuleParamsCodeScanningTool.initialize(this, alertsThreshold, securityAlertsThreshold, tool);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, alertsThreshold, securityAlertsThreshold, tool) { 
        obj['alerts_threshold'] = alertsThreshold;
        obj['security_alerts_threshold'] = securityAlertsThreshold;
        obj['tool'] = tool;
    }

    /**
     * Constructs a <code>RepositoryRuleParamsCodeScanningTool</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepositoryRuleParamsCodeScanningTool} obj Optional instance to populate.
     * @return {module:model/RepositoryRuleParamsCodeScanningTool} The populated <code>RepositoryRuleParamsCodeScanningTool</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepositoryRuleParamsCodeScanningTool();

            if (data.hasOwnProperty('alerts_threshold')) {
                obj['alerts_threshold'] = ApiClient.convertToType(data['alerts_threshold'], 'String');
            }
            if (data.hasOwnProperty('security_alerts_threshold')) {
                obj['security_alerts_threshold'] = ApiClient.convertToType(data['security_alerts_threshold'], 'String');
            }
            if (data.hasOwnProperty('tool')) {
                obj['tool'] = ApiClient.convertToType(data['tool'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepositoryRuleParamsCodeScanningTool</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepositoryRuleParamsCodeScanningTool</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RepositoryRuleParamsCodeScanningTool.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['alerts_threshold'] && !(typeof data['alerts_threshold'] === 'string' || data['alerts_threshold'] instanceof String)) {
            throw new Error("Expected the field `alerts_threshold` to be a primitive type in the JSON string but got " + data['alerts_threshold']);
        }
        // ensure the json data is a string
        if (data['security_alerts_threshold'] && !(typeof data['security_alerts_threshold'] === 'string' || data['security_alerts_threshold'] instanceof String)) {
            throw new Error("Expected the field `security_alerts_threshold` to be a primitive type in the JSON string but got " + data['security_alerts_threshold']);
        }
        // ensure the json data is a string
        if (data['tool'] && !(typeof data['tool'] === 'string' || data['tool'] instanceof String)) {
            throw new Error("Expected the field `tool` to be a primitive type in the JSON string but got " + data['tool']);
        }

        return true;
    }


}

RepositoryRuleParamsCodeScanningTool.RequiredProperties = ["alerts_threshold", "security_alerts_threshold", "tool"];

/**
 * The severity level at which code scanning results that raise alerts block a reference update. For more information on alert severity levels, see \"[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels).\"
 * @member {module:model/RepositoryRuleParamsCodeScanningTool.AlertsThresholdEnum} alerts_threshold
 */
RepositoryRuleParamsCodeScanningTool.prototype['alerts_threshold'] = undefined;

/**
 * The severity level at which code scanning results that raise security alerts block a reference update. For more information on security severity levels, see \"[About code scanning alerts](https://docs.github.com/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels).\"
 * @member {module:model/RepositoryRuleParamsCodeScanningTool.SecurityAlertsThresholdEnum} security_alerts_threshold
 */
RepositoryRuleParamsCodeScanningTool.prototype['security_alerts_threshold'] = undefined;

/**
 * The name of a code scanning tool
 * @member {String} tool
 */
RepositoryRuleParamsCodeScanningTool.prototype['tool'] = undefined;





/**
 * Allowed values for the <code>alerts_threshold</code> property.
 * @enum {String}
 * @readonly
 */
RepositoryRuleParamsCodeScanningTool['AlertsThresholdEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "errors"
     * @const
     */
    "errors": "errors",

    /**
     * value: "errors_and_warnings"
     * @const
     */
    "errors_and_warnings": "errors_and_warnings",

    /**
     * value: "all"
     * @const
     */
    "all": "all"
};


/**
 * Allowed values for the <code>security_alerts_threshold</code> property.
 * @enum {String}
 * @readonly
 */
RepositoryRuleParamsCodeScanningTool['SecurityAlertsThresholdEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "critical"
     * @const
     */
    "critical": "critical",

    /**
     * value: "high_or_higher"
     * @const
     */
    "high_or_higher": "high_or_higher",

    /**
     * value: "medium_or_higher"
     * @const
     */
    "medium_or_higher": "medium_or_higher",

    /**
     * value: "all"
     * @const
     */
    "all": "all"
};



export default RepositoryRuleParamsCodeScanningTool;

