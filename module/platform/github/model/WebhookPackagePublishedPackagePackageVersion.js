/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import User from './User';
import WebhookPackagePublishedPackagePackageVersionBody from './WebhookPackagePublishedPackagePackageVersionBody';
import WebhookPackagePublishedPackagePackageVersionContainerMetadata from './WebhookPackagePublishedPackagePackageVersionContainerMetadata';
import WebhookPackagePublishedPackagePackageVersionDockerMetadataInner from './WebhookPackagePublishedPackagePackageVersionDockerMetadataInner';
import WebhookPackagePublishedPackagePackageVersionNpmMetadata from './WebhookPackagePublishedPackagePackageVersionNpmMetadata';
import WebhookPackagePublishedPackagePackageVersionNugetMetadataInner from './WebhookPackagePublishedPackagePackageVersionNugetMetadataInner';
import WebhookPackagePublishedPackagePackageVersionPackageFilesInner from './WebhookPackagePublishedPackagePackageVersionPackageFilesInner';
import WebhookPackagePublishedPackagePackageVersionRelease from './WebhookPackagePublishedPackagePackageVersionRelease';
import WebhookRubygemsMetadata from './WebhookRubygemsMetadata';

/**
 * The WebhookPackagePublishedPackagePackageVersion model module.
 * @module model/WebhookPackagePublishedPackagePackageVersion
 * @version 1.1.4
 */
class WebhookPackagePublishedPackagePackageVersion {
    /**
     * Constructs a new <code>WebhookPackagePublishedPackagePackageVersion</code>.
     * @alias module:model/WebhookPackagePublishedPackagePackageVersion
     * @param description {String} 
     * @param htmlUrl {String} 
     * @param id {Number} 
     * @param installationCommand {String} 
     * @param metadata {Array.<Object.<String, Object>>} 
     * @param name {String} 
     * @param packageFiles {Array.<module:model/WebhookPackagePublishedPackagePackageVersionPackageFilesInner>} 
     * @param summary {String} 
     * @param version {String} 
     */
    constructor(description, htmlUrl, id, installationCommand, metadata, name, packageFiles, summary, version) { 
        
        WebhookPackagePublishedPackagePackageVersion.initialize(this, description, htmlUrl, id, installationCommand, metadata, name, packageFiles, summary, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, htmlUrl, id, installationCommand, metadata, name, packageFiles, summary, version) { 
        obj['description'] = description;
        obj['html_url'] = htmlUrl;
        obj['id'] = id;
        obj['installation_command'] = installationCommand;
        obj['metadata'] = metadata;
        obj['name'] = name;
        obj['package_files'] = packageFiles;
        obj['summary'] = summary;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>WebhookPackagePublishedPackagePackageVersion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebhookPackagePublishedPackagePackageVersion} obj Optional instance to populate.
     * @return {module:model/WebhookPackagePublishedPackagePackageVersion} The populated <code>WebhookPackagePublishedPackagePackageVersion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebhookPackagePublishedPackagePackageVersion();

            if (data.hasOwnProperty('author')) {
                obj['author'] = User.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = WebhookPackagePublishedPackagePackageVersionBody.constructFromObject(data['body']);
            }
            if (data.hasOwnProperty('body_html')) {
                obj['body_html'] = ApiClient.convertToType(data['body_html'], 'String');
            }
            if (data.hasOwnProperty('container_metadata')) {
                obj['container_metadata'] = WebhookPackagePublishedPackagePackageVersionContainerMetadata.constructFromObject(data['container_metadata']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('docker_metadata')) {
                obj['docker_metadata'] = ApiClient.convertToType(data['docker_metadata'], [WebhookPackagePublishedPackagePackageVersionDockerMetadataInner]);
            }
            if (data.hasOwnProperty('draft')) {
                obj['draft'] = ApiClient.convertToType(data['draft'], 'Boolean');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('installation_command')) {
                obj['installation_command'] = ApiClient.convertToType(data['installation_command'], 'String');
            }
            if (data.hasOwnProperty('manifest')) {
                obj['manifest'] = ApiClient.convertToType(data['manifest'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [{'String': Object}]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('npm_metadata')) {
                obj['npm_metadata'] = WebhookPackagePublishedPackagePackageVersionNpmMetadata.constructFromObject(data['npm_metadata']);
            }
            if (data.hasOwnProperty('nuget_metadata')) {
                obj['nuget_metadata'] = ApiClient.convertToType(data['nuget_metadata'], [WebhookPackagePublishedPackagePackageVersionNugetMetadataInner]);
            }
            if (data.hasOwnProperty('package_files')) {
                obj['package_files'] = ApiClient.convertToType(data['package_files'], [WebhookPackagePublishedPackagePackageVersionPackageFilesInner]);
            }
            if (data.hasOwnProperty('package_url')) {
                obj['package_url'] = ApiClient.convertToType(data['package_url'], 'String');
            }
            if (data.hasOwnProperty('prerelease')) {
                obj['prerelease'] = ApiClient.convertToType(data['prerelease'], 'Boolean');
            }
            if (data.hasOwnProperty('release')) {
                obj['release'] = WebhookPackagePublishedPackagePackageVersionRelease.constructFromObject(data['release']);
            }
            if (data.hasOwnProperty('rubygems_metadata')) {
                obj['rubygems_metadata'] = ApiClient.convertToType(data['rubygems_metadata'], [WebhookRubygemsMetadata]);
            }
            if (data.hasOwnProperty('source_url')) {
                obj['source_url'] = ApiClient.convertToType(data['source_url'], 'String');
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
            if (data.hasOwnProperty('tag_name')) {
                obj['tag_name'] = ApiClient.convertToType(data['tag_name'], 'String');
            }
            if (data.hasOwnProperty('target_commitish')) {
                obj['target_commitish'] = ApiClient.convertToType(data['target_commitish'], 'String');
            }
            if (data.hasOwnProperty('target_oid')) {
                obj['target_oid'] = ApiClient.convertToType(data['target_oid'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebhookPackagePublishedPackagePackageVersion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebhookPackagePublishedPackagePackageVersion</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WebhookPackagePublishedPackagePackageVersion.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `author`
        if (data['author']) { // data not null
          User.validateJSON(data['author']);
        }
        // validate the optional field `body`
        if (data['body']) { // data not null
          WebhookPackagePublishedPackagePackageVersionBody.validateJSON(data['body']);
        }
        // ensure the json data is a string
        if (data['body_html'] && !(typeof data['body_html'] === 'string' || data['body_html'] instanceof String)) {
            throw new Error("Expected the field `body_html` to be a primitive type in the JSON string but got " + data['body_html']);
        }
        // validate the optional field `container_metadata`
        if (data['container_metadata']) { // data not null
          WebhookPackagePublishedPackagePackageVersionContainerMetadata.validateJSON(data['container_metadata']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['docker_metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['docker_metadata'])) {
                throw new Error("Expected the field `docker_metadata` to be an array in the JSON data but got " + data['docker_metadata']);
            }
            // validate the optional field `docker_metadata` (array)
            for (const item of data['docker_metadata']) {
                WebhookPackagePublishedPackagePackageVersionDockerMetadataInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['installation_command'] && !(typeof data['installation_command'] === 'string' || data['installation_command'] instanceof String)) {
            throw new Error("Expected the field `installation_command` to be a primitive type in the JSON string but got " + data['installation_command']);
        }
        // ensure the json data is a string
        if (data['manifest'] && !(typeof data['manifest'] === 'string' || data['manifest'] instanceof String)) {
            throw new Error("Expected the field `manifest` to be a primitive type in the JSON string but got " + data['manifest']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['metadata'])) {
            throw new Error("Expected the field `metadata` to be an array in the JSON data but got " + data['metadata']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `npm_metadata`
        if (data['npm_metadata']) { // data not null
          WebhookPackagePublishedPackagePackageVersionNpmMetadata.validateJSON(data['npm_metadata']);
        }
        if (data['nuget_metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nuget_metadata'])) {
                throw new Error("Expected the field `nuget_metadata` to be an array in the JSON data but got " + data['nuget_metadata']);
            }
            // validate the optional field `nuget_metadata` (array)
            for (const item of data['nuget_metadata']) {
                WebhookPackagePublishedPackagePackageVersionNugetMetadataInner.validateJSON(item);
            };
        }
        if (data['package_files']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['package_files'])) {
                throw new Error("Expected the field `package_files` to be an array in the JSON data but got " + data['package_files']);
            }
            // validate the optional field `package_files` (array)
            for (const item of data['package_files']) {
                WebhookPackagePublishedPackagePackageVersionPackageFilesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['package_url'] && !(typeof data['package_url'] === 'string' || data['package_url'] instanceof String)) {
            throw new Error("Expected the field `package_url` to be a primitive type in the JSON string but got " + data['package_url']);
        }
        // validate the optional field `release`
        if (data['release']) { // data not null
          WebhookPackagePublishedPackagePackageVersionRelease.validateJSON(data['release']);
        }
        if (data['rubygems_metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rubygems_metadata'])) {
                throw new Error("Expected the field `rubygems_metadata` to be an array in the JSON data but got " + data['rubygems_metadata']);
            }
            // validate the optional field `rubygems_metadata` (array)
            for (const item of data['rubygems_metadata']) {
                WebhookRubygemsMetadata.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['source_url'] && !(typeof data['source_url'] === 'string' || data['source_url'] instanceof String)) {
            throw new Error("Expected the field `source_url` to be a primitive type in the JSON string but got " + data['source_url']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }
        // ensure the json data is a string
        if (data['tag_name'] && !(typeof data['tag_name'] === 'string' || data['tag_name'] instanceof String)) {
            throw new Error("Expected the field `tag_name` to be a primitive type in the JSON string but got " + data['tag_name']);
        }
        // ensure the json data is a string
        if (data['target_commitish'] && !(typeof data['target_commitish'] === 'string' || data['target_commitish'] instanceof String)) {
            throw new Error("Expected the field `target_commitish` to be a primitive type in the JSON string but got " + data['target_commitish']);
        }
        // ensure the json data is a string
        if (data['target_oid'] && !(typeof data['target_oid'] === 'string' || data['target_oid'] instanceof String)) {
            throw new Error("Expected the field `target_oid` to be a primitive type in the JSON string but got " + data['target_oid']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}

WebhookPackagePublishedPackagePackageVersion.RequiredProperties = ["description", "html_url", "id", "installation_command", "metadata", "name", "package_files", "summary", "version"];

/**
 * @member {module:model/User} author
 */
WebhookPackagePublishedPackagePackageVersion.prototype['author'] = undefined;

/**
 * @member {module:model/WebhookPackagePublishedPackagePackageVersionBody} body
 */
WebhookPackagePublishedPackagePackageVersion.prototype['body'] = undefined;

/**
 * @member {String} body_html
 */
WebhookPackagePublishedPackagePackageVersion.prototype['body_html'] = undefined;

/**
 * @member {module:model/WebhookPackagePublishedPackagePackageVersionContainerMetadata} container_metadata
 */
WebhookPackagePublishedPackagePackageVersion.prototype['container_metadata'] = undefined;

/**
 * @member {String} created_at
 */
WebhookPackagePublishedPackagePackageVersion.prototype['created_at'] = undefined;

/**
 * @member {String} description
 */
WebhookPackagePublishedPackagePackageVersion.prototype['description'] = undefined;

/**
 * @member {Array.<module:model/WebhookPackagePublishedPackagePackageVersionDockerMetadataInner>} docker_metadata
 */
WebhookPackagePublishedPackagePackageVersion.prototype['docker_metadata'] = undefined;

/**
 * @member {Boolean} draft
 */
WebhookPackagePublishedPackagePackageVersion.prototype['draft'] = undefined;

/**
 * @member {String} html_url
 */
WebhookPackagePublishedPackagePackageVersion.prototype['html_url'] = undefined;

/**
 * @member {Number} id
 */
WebhookPackagePublishedPackagePackageVersion.prototype['id'] = undefined;

/**
 * @member {String} installation_command
 */
WebhookPackagePublishedPackagePackageVersion.prototype['installation_command'] = undefined;

/**
 * @member {String} manifest
 */
WebhookPackagePublishedPackagePackageVersion.prototype['manifest'] = undefined;

/**
 * @member {Array.<Object.<String, Object>>} metadata
 */
WebhookPackagePublishedPackagePackageVersion.prototype['metadata'] = undefined;

/**
 * @member {String} name
 */
WebhookPackagePublishedPackagePackageVersion.prototype['name'] = undefined;

/**
 * @member {module:model/WebhookPackagePublishedPackagePackageVersionNpmMetadata} npm_metadata
 */
WebhookPackagePublishedPackagePackageVersion.prototype['npm_metadata'] = undefined;

/**
 * @member {Array.<module:model/WebhookPackagePublishedPackagePackageVersionNugetMetadataInner>} nuget_metadata
 */
WebhookPackagePublishedPackagePackageVersion.prototype['nuget_metadata'] = undefined;

/**
 * @member {Array.<module:model/WebhookPackagePublishedPackagePackageVersionPackageFilesInner>} package_files
 */
WebhookPackagePublishedPackagePackageVersion.prototype['package_files'] = undefined;

/**
 * @member {String} package_url
 */
WebhookPackagePublishedPackagePackageVersion.prototype['package_url'] = undefined;

/**
 * @member {Boolean} prerelease
 */
WebhookPackagePublishedPackagePackageVersion.prototype['prerelease'] = undefined;

/**
 * @member {module:model/WebhookPackagePublishedPackagePackageVersionRelease} release
 */
WebhookPackagePublishedPackagePackageVersion.prototype['release'] = undefined;

/**
 * @member {Array.<module:model/WebhookRubygemsMetadata>} rubygems_metadata
 */
WebhookPackagePublishedPackagePackageVersion.prototype['rubygems_metadata'] = undefined;

/**
 * @member {String} source_url
 */
WebhookPackagePublishedPackagePackageVersion.prototype['source_url'] = undefined;

/**
 * @member {String} summary
 */
WebhookPackagePublishedPackagePackageVersion.prototype['summary'] = undefined;

/**
 * @member {String} tag_name
 */
WebhookPackagePublishedPackagePackageVersion.prototype['tag_name'] = undefined;

/**
 * @member {String} target_commitish
 */
WebhookPackagePublishedPackagePackageVersion.prototype['target_commitish'] = undefined;

/**
 * @member {String} target_oid
 */
WebhookPackagePublishedPackagePackageVersion.prototype['target_oid'] = undefined;

/**
 * @member {String} updated_at
 */
WebhookPackagePublishedPackagePackageVersion.prototype['updated_at'] = undefined;

/**
 * @member {String} version
 */
WebhookPackagePublishedPackagePackageVersion.prototype['version'] = undefined;






export default WebhookPackagePublishedPackagePackageVersion;

