/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Deployment1Payload from './Deployment1Payload';

/**
 * The WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata model module.
 * @module model/WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata
 * @version 1.1.4
 */
class WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata {
    /**
     * Constructs a new <code>WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata</code>.
     * @alias module:model/WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata
     */
    constructor() { 
        
        WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata} obj Optional instance to populate.
     * @return {module:model/WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata} The populated <code>WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('npm_user')) {
                obj['npm_user'] = ApiClient.convertToType(data['npm_user'], 'String');
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = Deployment1Payload.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('bugs')) {
                obj['bugs'] = Deployment1Payload.constructFromObject(data['bugs']);
            }
            if (data.hasOwnProperty('dependencies')) {
                obj['dependencies'] = ApiClient.convertToType(data['dependencies'], Object);
            }
            if (data.hasOwnProperty('dev_dependencies')) {
                obj['dev_dependencies'] = ApiClient.convertToType(data['dev_dependencies'], Object);
            }
            if (data.hasOwnProperty('peer_dependencies')) {
                obj['peer_dependencies'] = ApiClient.convertToType(data['peer_dependencies'], Object);
            }
            if (data.hasOwnProperty('optional_dependencies')) {
                obj['optional_dependencies'] = ApiClient.convertToType(data['optional_dependencies'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('dist')) {
                obj['dist'] = Deployment1Payload.constructFromObject(data['dist']);
            }
            if (data.hasOwnProperty('git_head')) {
                obj['git_head'] = ApiClient.convertToType(data['git_head'], 'String');
            }
            if (data.hasOwnProperty('homepage')) {
                obj['homepage'] = ApiClient.convertToType(data['homepage'], 'String');
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], 'String');
            }
            if (data.hasOwnProperty('main')) {
                obj['main'] = ApiClient.convertToType(data['main'], 'String');
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = Deployment1Payload.constructFromObject(data['repository']);
            }
            if (data.hasOwnProperty('scripts')) {
                obj['scripts'] = ApiClient.convertToType(data['scripts'], Object);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('node_version')) {
                obj['node_version'] = ApiClient.convertToType(data['node_version'], 'String');
            }
            if (data.hasOwnProperty('npm_version')) {
                obj['npm_version'] = ApiClient.convertToType(data['npm_version'], 'String');
            }
            if (data.hasOwnProperty('has_shrinkwrap')) {
                obj['has_shrinkwrap'] = ApiClient.convertToType(data['has_shrinkwrap'], 'Boolean');
            }
            if (data.hasOwnProperty('maintainers')) {
                obj['maintainers'] = ApiClient.convertToType(data['maintainers'], ['String']);
            }
            if (data.hasOwnProperty('contributors')) {
                obj['contributors'] = ApiClient.convertToType(data['contributors'], ['String']);
            }
            if (data.hasOwnProperty('engines')) {
                obj['engines'] = ApiClient.convertToType(data['engines'], Object);
            }
            if (data.hasOwnProperty('keywords')) {
                obj['keywords'] = ApiClient.convertToType(data['keywords'], ['String']);
            }
            if (data.hasOwnProperty('files')) {
                obj['files'] = ApiClient.convertToType(data['files'], ['String']);
            }
            if (data.hasOwnProperty('bin')) {
                obj['bin'] = ApiClient.convertToType(data['bin'], Object);
            }
            if (data.hasOwnProperty('man')) {
                obj['man'] = ApiClient.convertToType(data['man'], Object);
            }
            if (data.hasOwnProperty('directories')) {
                obj['directories'] = Deployment1Payload.constructFromObject(data['directories']);
            }
            if (data.hasOwnProperty('os')) {
                obj['os'] = ApiClient.convertToType(data['os'], ['String']);
            }
            if (data.hasOwnProperty('cpu')) {
                obj['cpu'] = ApiClient.convertToType(data['cpu'], ['String']);
            }
            if (data.hasOwnProperty('readme')) {
                obj['readme'] = ApiClient.convertToType(data['readme'], 'String');
            }
            if (data.hasOwnProperty('installation_command')) {
                obj['installation_command'] = ApiClient.convertToType(data['installation_command'], 'String');
            }
            if (data.hasOwnProperty('release_id')) {
                obj['release_id'] = ApiClient.convertToType(data['release_id'], 'Number');
            }
            if (data.hasOwnProperty('commit_oid')) {
                obj['commit_oid'] = ApiClient.convertToType(data['commit_oid'], 'String');
            }
            if (data.hasOwnProperty('published_via_actions')) {
                obj['published_via_actions'] = ApiClient.convertToType(data['published_via_actions'], 'Boolean');
            }
            if (data.hasOwnProperty('deleted_by_id')) {
                obj['deleted_by_id'] = ApiClient.convertToType(data['deleted_by_id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['npm_user'] && !(typeof data['npm_user'] === 'string' || data['npm_user'] instanceof String)) {
            throw new Error("Expected the field `npm_user` to be a primitive type in the JSON string but got " + data['npm_user']);
        }
        // validate the optional field `author`
        if (data['author']) { // data not null
          Deployment1Payload.validateJSON(data['author']);
        }
        // validate the optional field `bugs`
        if (data['bugs']) { // data not null
          Deployment1Payload.validateJSON(data['bugs']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `dist`
        if (data['dist']) { // data not null
          Deployment1Payload.validateJSON(data['dist']);
        }
        // ensure the json data is a string
        if (data['git_head'] && !(typeof data['git_head'] === 'string' || data['git_head'] instanceof String)) {
            throw new Error("Expected the field `git_head` to be a primitive type in the JSON string but got " + data['git_head']);
        }
        // ensure the json data is a string
        if (data['homepage'] && !(typeof data['homepage'] === 'string' || data['homepage'] instanceof String)) {
            throw new Error("Expected the field `homepage` to be a primitive type in the JSON string but got " + data['homepage']);
        }
        // ensure the json data is a string
        if (data['license'] && !(typeof data['license'] === 'string' || data['license'] instanceof String)) {
            throw new Error("Expected the field `license` to be a primitive type in the JSON string but got " + data['license']);
        }
        // ensure the json data is a string
        if (data['main'] && !(typeof data['main'] === 'string' || data['main'] instanceof String)) {
            throw new Error("Expected the field `main` to be a primitive type in the JSON string but got " + data['main']);
        }
        // validate the optional field `repository`
        if (data['repository']) { // data not null
          Deployment1Payload.validateJSON(data['repository']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['node_version'] && !(typeof data['node_version'] === 'string' || data['node_version'] instanceof String)) {
            throw new Error("Expected the field `node_version` to be a primitive type in the JSON string but got " + data['node_version']);
        }
        // ensure the json data is a string
        if (data['npm_version'] && !(typeof data['npm_version'] === 'string' || data['npm_version'] instanceof String)) {
            throw new Error("Expected the field `npm_version` to be a primitive type in the JSON string but got " + data['npm_version']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['maintainers'])) {
            throw new Error("Expected the field `maintainers` to be an array in the JSON data but got " + data['maintainers']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['contributors'])) {
            throw new Error("Expected the field `contributors` to be an array in the JSON data but got " + data['contributors']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['keywords'])) {
            throw new Error("Expected the field `keywords` to be an array in the JSON data but got " + data['keywords']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['files'])) {
            throw new Error("Expected the field `files` to be an array in the JSON data but got " + data['files']);
        }
        // validate the optional field `directories`
        if (data['directories']) { // data not null
          Deployment1Payload.validateJSON(data['directories']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['os'])) {
            throw new Error("Expected the field `os` to be an array in the JSON data but got " + data['os']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['cpu'])) {
            throw new Error("Expected the field `cpu` to be an array in the JSON data but got " + data['cpu']);
        }
        // ensure the json data is a string
        if (data['readme'] && !(typeof data['readme'] === 'string' || data['readme'] instanceof String)) {
            throw new Error("Expected the field `readme` to be a primitive type in the JSON string but got " + data['readme']);
        }
        // ensure the json data is a string
        if (data['installation_command'] && !(typeof data['installation_command'] === 'string' || data['installation_command'] instanceof String)) {
            throw new Error("Expected the field `installation_command` to be a primitive type in the JSON string but got " + data['installation_command']);
        }
        // ensure the json data is a string
        if (data['commit_oid'] && !(typeof data['commit_oid'] === 'string' || data['commit_oid'] instanceof String)) {
            throw new Error("Expected the field `commit_oid` to be a primitive type in the JSON string but got " + data['commit_oid']);
        }

        return true;
    }


}



/**
 * @member {String} name
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['name'] = undefined;

/**
 * @member {String} version
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['version'] = undefined;

/**
 * @member {String} npm_user
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['npm_user'] = undefined;

/**
 * @member {module:model/Deployment1Payload} author
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['author'] = undefined;

/**
 * @member {module:model/Deployment1Payload} bugs
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['bugs'] = undefined;

/**
 * @member {Object} dependencies
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['dependencies'] = undefined;

/**
 * @member {Object} dev_dependencies
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['dev_dependencies'] = undefined;

/**
 * @member {Object} peer_dependencies
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['peer_dependencies'] = undefined;

/**
 * @member {Object} optional_dependencies
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['optional_dependencies'] = undefined;

/**
 * @member {String} description
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['description'] = undefined;

/**
 * @member {module:model/Deployment1Payload} dist
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['dist'] = undefined;

/**
 * @member {String} git_head
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['git_head'] = undefined;

/**
 * @member {String} homepage
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['homepage'] = undefined;

/**
 * @member {String} license
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['license'] = undefined;

/**
 * @member {String} main
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['main'] = undefined;

/**
 * @member {module:model/Deployment1Payload} repository
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['repository'] = undefined;

/**
 * @member {Object} scripts
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['scripts'] = undefined;

/**
 * @member {String} id
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['id'] = undefined;

/**
 * @member {String} node_version
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['node_version'] = undefined;

/**
 * @member {String} npm_version
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['npm_version'] = undefined;

/**
 * @member {Boolean} has_shrinkwrap
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['has_shrinkwrap'] = undefined;

/**
 * @member {Array.<String>} maintainers
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['maintainers'] = undefined;

/**
 * @member {Array.<String>} contributors
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['contributors'] = undefined;

/**
 * @member {Object} engines
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['engines'] = undefined;

/**
 * @member {Array.<String>} keywords
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['keywords'] = undefined;

/**
 * @member {Array.<String>} files
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['files'] = undefined;

/**
 * @member {Object} bin
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['bin'] = undefined;

/**
 * @member {Object} man
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['man'] = undefined;

/**
 * @member {module:model/Deployment1Payload} directories
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['directories'] = undefined;

/**
 * @member {Array.<String>} os
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['os'] = undefined;

/**
 * @member {Array.<String>} cpu
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['cpu'] = undefined;

/**
 * @member {String} readme
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['readme'] = undefined;

/**
 * @member {String} installation_command
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['installation_command'] = undefined;

/**
 * @member {Number} release_id
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['release_id'] = undefined;

/**
 * @member {String} commit_oid
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['commit_oid'] = undefined;

/**
 * @member {Boolean} published_via_actions
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['published_via_actions'] = undefined;

/**
 * @member {Number} deleted_by_id
 */
WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata.prototype['deleted_by_id'] = undefined;






export default WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata;

