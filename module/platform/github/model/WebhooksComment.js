/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Reactions from './Reactions';
import User from './User';

/**
 * The WebhooksComment model module.
 * @module model/WebhooksComment
 * @version 1.1.4
 */
class WebhooksComment {
    /**
     * Constructs a new <code>WebhooksComment</code>.
     * @alias module:model/WebhooksComment
     * @param authorAssociation {module:model/WebhooksComment.AuthorAssociationEnum} How the author is associated with the repository.
     * @param body {String} 
     * @param childCommentCount {Number} 
     * @param createdAt {String} 
     * @param discussionId {Number} 
     * @param htmlUrl {String} 
     * @param id {Number} 
     * @param nodeId {String} 
     * @param parentId {Number} 
     * @param reactions {module:model/Reactions} 
     * @param repositoryUrl {String} 
     * @param updatedAt {String} 
     * @param user {module:model/User} 
     */
    constructor(authorAssociation, body, childCommentCount, createdAt, discussionId, htmlUrl, id, nodeId, parentId, reactions, repositoryUrl, updatedAt, user) { 
        
        WebhooksComment.initialize(this, authorAssociation, body, childCommentCount, createdAt, discussionId, htmlUrl, id, nodeId, parentId, reactions, repositoryUrl, updatedAt, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, authorAssociation, body, childCommentCount, createdAt, discussionId, htmlUrl, id, nodeId, parentId, reactions, repositoryUrl, updatedAt, user) { 
        obj['author_association'] = authorAssociation;
        obj['body'] = body;
        obj['child_comment_count'] = childCommentCount;
        obj['created_at'] = createdAt;
        obj['discussion_id'] = discussionId;
        obj['html_url'] = htmlUrl;
        obj['id'] = id;
        obj['node_id'] = nodeId;
        obj['parent_id'] = parentId;
        obj['reactions'] = reactions;
        obj['repository_url'] = repositoryUrl;
        obj['updated_at'] = updatedAt;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>WebhooksComment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebhooksComment} obj Optional instance to populate.
     * @return {module:model/WebhooksComment} The populated <code>WebhooksComment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebhooksComment();

            if (data.hasOwnProperty('author_association')) {
                obj['author_association'] = ApiClient.convertToType(data['author_association'], 'String');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('child_comment_count')) {
                obj['child_comment_count'] = ApiClient.convertToType(data['child_comment_count'], 'Number');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('discussion_id')) {
                obj['discussion_id'] = ApiClient.convertToType(data['discussion_id'], 'Number');
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('parent_id')) {
                obj['parent_id'] = ApiClient.convertToType(data['parent_id'], 'Number');
            }
            if (data.hasOwnProperty('reactions')) {
                obj['reactions'] = Reactions.constructFromObject(data['reactions']);
            }
            if (data.hasOwnProperty('repository_url')) {
                obj['repository_url'] = ApiClient.convertToType(data['repository_url'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebhooksComment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebhooksComment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WebhooksComment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['author_association'] && !(typeof data['author_association'] === 'string' || data['author_association'] instanceof String)) {
            throw new Error("Expected the field `author_association` to be a primitive type in the JSON string but got " + data['author_association']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['html_url'] && !(typeof data['html_url'] === 'string' || data['html_url'] instanceof String)) {
            throw new Error("Expected the field `html_url` to be a primitive type in the JSON string but got " + data['html_url']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // validate the optional field `reactions`
        if (data['reactions']) { // data not null
          Reactions.validateJSON(data['reactions']);
        }
        // ensure the json data is a string
        if (data['repository_url'] && !(typeof data['repository_url'] === 'string' || data['repository_url'] instanceof String)) {
            throw new Error("Expected the field `repository_url` to be a primitive type in the JSON string but got " + data['repository_url']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}

WebhooksComment.RequiredProperties = ["author_association", "body", "child_comment_count", "created_at", "discussion_id", "html_url", "id", "node_id", "parent_id", "reactions", "repository_url", "updated_at", "user"];

/**
 * How the author is associated with the repository.
 * @member {module:model/WebhooksComment.AuthorAssociationEnum} author_association
 */
WebhooksComment.prototype['author_association'] = undefined;

/**
 * @member {String} body
 */
WebhooksComment.prototype['body'] = undefined;

/**
 * @member {Number} child_comment_count
 */
WebhooksComment.prototype['child_comment_count'] = undefined;

/**
 * @member {String} created_at
 */
WebhooksComment.prototype['created_at'] = undefined;

/**
 * @member {Number} discussion_id
 */
WebhooksComment.prototype['discussion_id'] = undefined;

/**
 * @member {String} html_url
 */
WebhooksComment.prototype['html_url'] = undefined;

/**
 * @member {Number} id
 */
WebhooksComment.prototype['id'] = undefined;

/**
 * @member {String} node_id
 */
WebhooksComment.prototype['node_id'] = undefined;

/**
 * @member {Number} parent_id
 */
WebhooksComment.prototype['parent_id'] = undefined;

/**
 * @member {module:model/Reactions} reactions
 */
WebhooksComment.prototype['reactions'] = undefined;

/**
 * @member {String} repository_url
 */
WebhooksComment.prototype['repository_url'] = undefined;

/**
 * @member {String} updated_at
 */
WebhooksComment.prototype['updated_at'] = undefined;

/**
 * @member {module:model/User} user
 */
WebhooksComment.prototype['user'] = undefined;





/**
 * Allowed values for the <code>author_association</code> property.
 * @enum {String}
 * @readonly
 */
WebhooksComment['AuthorAssociationEnum'] = {

    /**
     * value: "COLLABORATOR"
     * @const
     */
    "COLLABORATOR": "COLLABORATOR",

    /**
     * value: "CONTRIBUTOR"
     * @const
     */
    "CONTRIBUTOR": "CONTRIBUTOR",

    /**
     * value: "FIRST_TIMER"
     * @const
     */
    "FIRST_TIMER": "FIRST_TIMER",

    /**
     * value: "FIRST_TIME_CONTRIBUTOR"
     * @const
     */
    "FIRST_TIME_CONTRIBUTOR": "FIRST_TIME_CONTRIBUTOR",

    /**
     * value: "MANNEQUIN"
     * @const
     */
    "MANNEQUIN": "MANNEQUIN",

    /**
     * value: "MEMBER"
     * @const
     */
    "MEMBER": "MEMBER",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "OWNER"
     * @const
     */
    "OWNER": "OWNER"
};



export default WebhooksComment;

