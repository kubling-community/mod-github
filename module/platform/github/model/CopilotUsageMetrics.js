/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CopilotUsageMetricsBreakdownInner from './CopilotUsageMetricsBreakdownInner';

/**
 * The CopilotUsageMetrics model module.
 * @module model/CopilotUsageMetrics
 * @version 1.1.4
 */
class CopilotUsageMetrics {
    /**
     * Constructs a new <code>CopilotUsageMetrics</code>.
     * Summary of Copilot usage.
     * @alias module:model/CopilotUsageMetrics
     * @param day {Date} The date for which the usage metrics are reported, in `YYYY-MM-DD` format.
     * @param breakdown {Array.<module:model/CopilotUsageMetricsBreakdownInner>} Breakdown of Copilot code completions usage by language and editor
     */
    constructor(day, breakdown) { 
        
        CopilotUsageMetrics.initialize(this, day, breakdown);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, day, breakdown) { 
        obj['day'] = day;
        obj['breakdown'] = breakdown;
    }

    /**
     * Constructs a <code>CopilotUsageMetrics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CopilotUsageMetrics} obj Optional instance to populate.
     * @return {module:model/CopilotUsageMetrics} The populated <code>CopilotUsageMetrics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CopilotUsageMetrics();

            if (data.hasOwnProperty('day')) {
                obj['day'] = ApiClient.convertToType(data['day'], 'Date');
            }
            if (data.hasOwnProperty('total_suggestions_count')) {
                obj['total_suggestions_count'] = ApiClient.convertToType(data['total_suggestions_count'], 'Number');
            }
            if (data.hasOwnProperty('total_acceptances_count')) {
                obj['total_acceptances_count'] = ApiClient.convertToType(data['total_acceptances_count'], 'Number');
            }
            if (data.hasOwnProperty('total_lines_suggested')) {
                obj['total_lines_suggested'] = ApiClient.convertToType(data['total_lines_suggested'], 'Number');
            }
            if (data.hasOwnProperty('total_lines_accepted')) {
                obj['total_lines_accepted'] = ApiClient.convertToType(data['total_lines_accepted'], 'Number');
            }
            if (data.hasOwnProperty('total_active_users')) {
                obj['total_active_users'] = ApiClient.convertToType(data['total_active_users'], 'Number');
            }
            if (data.hasOwnProperty('total_chat_acceptances')) {
                obj['total_chat_acceptances'] = ApiClient.convertToType(data['total_chat_acceptances'], 'Number');
            }
            if (data.hasOwnProperty('total_chat_turns')) {
                obj['total_chat_turns'] = ApiClient.convertToType(data['total_chat_turns'], 'Number');
            }
            if (data.hasOwnProperty('total_active_chat_users')) {
                obj['total_active_chat_users'] = ApiClient.convertToType(data['total_active_chat_users'], 'Number');
            }
            if (data.hasOwnProperty('breakdown')) {
                obj['breakdown'] = ApiClient.convertToType(data['breakdown'], [CopilotUsageMetricsBreakdownInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CopilotUsageMetrics</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CopilotUsageMetrics</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CopilotUsageMetrics.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['breakdown'])) {
            throw new Error("Expected the field `breakdown` to be an array in the JSON data but got " + data['breakdown']);
        }

        return true;
    }


}

CopilotUsageMetrics.RequiredProperties = ["day", "breakdown"];

/**
 * The date for which the usage metrics are reported, in `YYYY-MM-DD` format.
 * @member {Date} day
 */
CopilotUsageMetrics.prototype['day'] = undefined;

/**
 * The total number of Copilot code completion suggestions shown to users.
 * @member {Number} total_suggestions_count
 */
CopilotUsageMetrics.prototype['total_suggestions_count'] = undefined;

/**
 * The total number of Copilot code completion suggestions accepted by users.
 * @member {Number} total_acceptances_count
 */
CopilotUsageMetrics.prototype['total_acceptances_count'] = undefined;

/**
 * The total number of lines of code completions suggested by Copilot.
 * @member {Number} total_lines_suggested
 */
CopilotUsageMetrics.prototype['total_lines_suggested'] = undefined;

/**
 * The total number of lines of code completions accepted by users.
 * @member {Number} total_lines_accepted
 */
CopilotUsageMetrics.prototype['total_lines_accepted'] = undefined;

/**
 * The total number of users who were shown Copilot code completion suggestions during the day specified.
 * @member {Number} total_active_users
 */
CopilotUsageMetrics.prototype['total_active_users'] = undefined;

/**
 * The total instances of users who accepted code suggested by Copilot Chat in the IDE (panel and inline).
 * @member {Number} total_chat_acceptances
 */
CopilotUsageMetrics.prototype['total_chat_acceptances'] = undefined;

/**
 * The total number of chat turns (prompt and response pairs) sent between users and Copilot Chat in the IDE.
 * @member {Number} total_chat_turns
 */
CopilotUsageMetrics.prototype['total_chat_turns'] = undefined;

/**
 * The total number of users who interacted with Copilot Chat in the IDE during the day specified.
 * @member {Number} total_active_chat_users
 */
CopilotUsageMetrics.prototype['total_active_chat_users'] = undefined;

/**
 * Breakdown of Copilot code completions usage by language and editor
 * @member {Array.<module:model/CopilotUsageMetricsBreakdownInner>} breakdown
 */
CopilotUsageMetrics.prototype['breakdown'] = undefined;






export default CopilotUsageMetrics;

