/**
 * GitHub v3 REST API
 * GitHub's v3 REST API.
 *
 * The version of the OpenAPI document: 1.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import RepositoryRulesetConditions from './RepositoryRulesetConditions';
import RepositoryRulesetConditionsRefName from './RepositoryRulesetConditionsRefName';
import RepositoryRulesetConditionsRepositoryNameTarget from './RepositoryRulesetConditionsRepositoryNameTarget';
import RepositoryRulesetConditionsRepositoryNameTargetRepositoryName from './RepositoryRulesetConditionsRepositoryNameTargetRepositoryName';

/**
 * The RepositoryNameAndRefName model module.
 * @module model/RepositoryNameAndRefName
 * @version 1.1.4
 */
class RepositoryNameAndRefName {
    /**
     * Constructs a new <code>RepositoryNameAndRefName</code>.
     * Conditions to target repositories by name and refs by name
     * @alias module:model/RepositoryNameAndRefName
     * @implements module:model/RepositoryRulesetConditions
     * @implements module:model/RepositoryRulesetConditionsRepositoryNameTarget
     * @param repositoryName {module:model/RepositoryRulesetConditionsRepositoryNameTargetRepositoryName} 
     */
    constructor(repositoryName) { 
        RepositoryRulesetConditions.initialize(this, repositoryName, repositoryId, repositoryProperty);RepositoryRulesetConditionsRepositoryNameTarget.initialize(this, repositoryName);
        RepositoryNameAndRefName.initialize(this, repositoryName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, repositoryName) { 
        obj['repository_name'] = repositoryName;
    }

    /**
     * Constructs a <code>RepositoryNameAndRefName</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepositoryNameAndRefName} obj Optional instance to populate.
     * @return {module:model/RepositoryNameAndRefName} The populated <code>RepositoryNameAndRefName</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepositoryNameAndRefName();
            RepositoryRulesetConditions.constructFromObject(data, obj);
            RepositoryRulesetConditionsRepositoryNameTarget.constructFromObject(data, obj);

            if (data.hasOwnProperty('ref_name')) {
                obj['ref_name'] = RepositoryRulesetConditionsRefName.constructFromObject(data['ref_name']);
            }
            if (data.hasOwnProperty('repository_name')) {
                obj['repository_name'] = RepositoryRulesetConditionsRepositoryNameTargetRepositoryName.constructFromObject(data['repository_name']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepositoryNameAndRefName</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepositoryNameAndRefName</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RepositoryNameAndRefName.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ref_name`
        if (data['ref_name']) { // data not null
          RepositoryRulesetConditionsRefName.validateJSON(data['ref_name']);
        }
        // validate the optional field `repository_name`
        if (data['repository_name']) { // data not null
          RepositoryRulesetConditionsRepositoryNameTargetRepositoryName.validateJSON(data['repository_name']);
        }

        return true;
    }


}

RepositoryNameAndRefName.RequiredProperties = ["repository_name"];

/**
 * @member {module:model/RepositoryRulesetConditionsRefName} ref_name
 */
RepositoryNameAndRefName.prototype['ref_name'] = undefined;

/**
 * @member {module:model/RepositoryRulesetConditionsRepositoryNameTargetRepositoryName} repository_name
 */
RepositoryNameAndRefName.prototype['repository_name'] = undefined;


// Implement RepositoryRulesetConditions interface:
/**
 * @member {module:model/RepositoryRulesetConditionsRefName} ref_name
 */
RepositoryRulesetConditions.prototype['ref_name'] = undefined;
/**
 * @member {module:model/RepositoryRulesetConditionsRepositoryNameTargetRepositoryName} repository_name
 */
RepositoryRulesetConditions.prototype['repository_name'] = undefined;
/**
 * @member {module:model/RepositoryRulesetConditionsRepositoryIdTargetRepositoryId} repository_id
 */
RepositoryRulesetConditions.prototype['repository_id'] = undefined;
/**
 * @member {module:model/RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty} repository_property
 */
RepositoryRulesetConditions.prototype['repository_property'] = undefined;
// Implement RepositoryRulesetConditionsRepositoryNameTarget interface:
/**
 * @member {module:model/RepositoryRulesetConditionsRepositoryNameTargetRepositoryName} repository_name
 */
RepositoryRulesetConditionsRepositoryNameTarget.prototype['repository_name'] = undefined;




export default RepositoryNameAndRefName;

